<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Temporal-Workflow-SyncSignals" -->
<topic id="1284aec5-7464-4243-aa38-75366c26a031" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <alert class="warning">
        <legacyBold>EXPERIMENTAL:</legacyBold> This is an experimental feature.  Temporal server doesn't
        currently have a synchronous way to interact with a running workflow, so the Neon Temporal client
        emulates this behavior using a combination of internal signals and queries.  This will be obsoleted
        and eventually replaced when Temporal supports this natively.
      </alert>
      <para>
        Ideally, you'd like your workflows to manage all of the logic for a given operation including
        reacting to external events.  Temporal currently provides two ways for doing this: external
        activities and signals.
      </para>
      <para>
        External activities are somewhat difficult configure and use and signals are nice, but they
        have fire-and-forget semantics, so it's impossible for a signal to indicate to the caller
        that the signal was processed by the workflow and optionally return a result providing more
        information about how the workflow handled the signal.
      </para>
      <para>
        For example, say you've implemented this order processing workflow:
      </para>
      <list class="ordered">
        <listItem>
          <para>
            Customer submits an order to an ecommerce website.
          </para>
        </listItem>
        <listItem>
          <para>
            The website starts a workflow to process the order.
          </para>
        </listItem>
        <listItem>
          <para>
            The order workflow sends a packing list to the warehouse, where the order
            will be packed and shipped.
          </para>
        </listItem>
        <listItem>
          <para>
            Warehouse workers send a signal to the workflow via a mobile app after
            the delivery company picks up the package.  This signal includes the
            tracking ID.
          </para>
        </listItem>
        <listItem>
          <para>
            The workflow queries the delivery company to obtain the package ETA
            and then sends an email to the customer with the tracking information.
          </para>
        </listItem>
        <listItem>
          <para>
            The workflow monitors the delivery status and sends another email to
            the customer after the package is delivered.
          </para>
        </listItem>
      </list>
      <para>
        That's pretty straightforward, but imagine that customers are allowed to
        cancel an order up until the the time when the order is packaged for delivery.
        So, let's say the customer goes back to the website and cancels the order.  The website
        could send a standard cancel signal to the workflow but since signals are fire-and-forget,
        the website will not be able to determine whether the order was actually cancelled
        or not.  There is no way for the workflow to return this status to the website.
      </para>
      <para>
        A workaround would be to have the website query the order database to determine
        whether it's still possible to cancel the order before sending the signal.
        Another workaround would be to have the website query the database after
        sending the signal, checking to see if the order status was changed
        to cancel.
      </para>
      <para>
        There are two problems with both of these approaches: you'll be sprinkling
        order business logic outside of the workflow which will probably become a
        maintainece nightmare over time and its very likely these approaches will
        introduce hard to overcome race conditions.
      </para>
    </introduction>

    <section>
      <title>Synchronous Signals</title>
      <content>
        <para>
          The <legacyBold>Neon.Temporal</legacyBold> package provides a reasonable solution to
          problems like that outlined above by extending standard Temporal signals so that 
          clients sending signals will wait for the signal to be procesed by the workflow
          as well as optionally allowing signals to return a result.  This is accomplished
          by specifying <codeInline>[SignalMethod(Synchronous=true)]</codeInline> for 
          signal method definitions in your workflow interfaces:
        </para>
        <code language="c#" tabSize="4">
          [WorkflowInterface]
          public interface : IMyWorkflow : IWorkflow
          {
              [WorkflowMethod]
              Task MainAsync();

              [SignalMethod("standard-signal")]
              Task SignalAsync(string arg);

              [SignalMethod("sync-signal-void", Synchronous = true)]
              Task SyncSignal1Async(string arg);

              [SignalMethod("sync-signal-with-result", Synchronous = true)]
              Task&lt;string&gt; SyncSignal2Async(string arg);
          }
        </code>
        <para>
          This interface defines a workflow with a main workflow method, <codeInline>SignalAsyc()</codeInline>
          as a standard fire-and-forget signal, <codeInline>SyncSignal1Async()</codeInline> which is a
          synchronous signal that doesn't return a result and <codeInline>SyncSignal1Async()</codeInline>,
          a synchronous signal that does return a result.
        </para>
        <para>
          The Neon Temporal client will include the synchronous signal methods the stubs generated
          for the workflow and you can simply call these like you would a standard signal.  The 
          difference is that the synchronous methods won't return until after the workflow has 
          actually processed the signal.  Standard signals return immediately after the signal
          has been submitted to Temporal and you'll never be sure when or even if the signal was 
          actually received and processed by the workflow.
        </para>
      </content>
    </section>

    <section>
      <title>Implementation Overview</title>
      <content>
        <para>
          Neon implements synchronous signals using a combination of standard Temporal signals and queries.
          This works roughly like this:
        </para>
        <list class="ordered">
          <listItem>
            <para>
              Your application calls a synchronous signal stub method.
            </para>
          </listItem>
          <listItem>
            <para>
              The stub polls Temporal for a reasonable period of time to ensure that the
              workflow actually running.
            </para>
          </listItem>
          <listItem>
            <para>
              The stub sends a standard signal to an internal signal method implemented by
              Neon.Temporal.  The signal is dispatched to your synchronous signal method
              where your logic can do its thing and then ultimately returns.
            </para>
          </listItem>
          <listItem>
            <para>
              Neon.Temporal maintains an internal table tracking each synchronous signal
              received.  We track whether or not the your signal method has returned and
              also persist any result there.
            </para>
          </listItem>
          <listItem>
            <para>
              After the client stub has sent the internal signal in step 2, it begins 
              polling the workflow for signal completion by sending queries to an
              internal method.  This method returns the signal status from the internal
              tracking table.  The stub will stop querying when it sees that the 
              signal method has returned.  At this point, the stub will return to
              the caller.
            </para>
          </listItem>
        </list>
        <para>
          This all is pretty clean, but there are some caveats:
        </para>
        <list class="bullet">
          <listItem>
            <para>
              This is a <legacyBold>Neon-only feature</legacyBold>.  You can not use this to send
              synchronous signals to workflows implemented in other lanmguages like Java or Go
              (they don't support this).
            </para>
          </listItem>
          <listItem>
            <para>
              By default synchronous signals will wait up to 60 seconds for the workflow
              to process a synchronous signal and return.  This relies on your workflow
              processing decision tasks promptly.  You can customize this timeout by 
              assigning a custom retry policy to 
              <codeEntityReference qualifyHint="false">P:Neon.Temporal.TemporalClient.SyncSignalRetry</codeEntityReference>.
            </para>
          </listItem>
          <listItem>
            <para>
              Workflows that have seen synchronous signals will be delayed for a period
              of time after returning to give the client stub a chance to query for any
              pending signal results.  By default, the workflow will be delayed for a
              maximum of <legacyBold>30 seconds</legacyBold>.  This means that when
              a workflow will be held up for this long if the signalling client stops
              (for some reason) before all signals have been acknowledged.
            </para>
            <para>
              You can customize this timeout via <codeEntityReference qualifyHint="false">P:Neon.Temporal.TemporalSettings.MaxWorkflowDelaySeconds</codeEntityReference>.
            </para>
          </listItem>
          <listItem>
            <para>
              This workflow delay will also add one sleep operation per second the workflow
              is delayed to the history.  Typically, only a handful of these will be recorded.
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <section>
      <title>Implementing Synchronous Signals</title>
      <content>
        <para>
          Neon supports two approaches to implementing synchronous signal methods.
          For very simple scenarios, your signal method can simply modify the 
          workflow state by examining and setting workflow instance fields or
          properties and then returning.  The more powerful but more complex
          technique is to enqueue a <codeEntityReference qualifyHint="false">T:Neon.Temporal.SignalRequest</codeEntityReference>
          or <codeEntityReference qualifyHint="false">T:Neon.Temporal.SignalRequest`1</codeEntityReference>
          to be processed by your workflow method.
        </para>
        <para>
          Let's look at a simple cancellation scenario first:
        </para>
        <code source="%NF_SNIPPETS%\Temporal\Snippets.Temporal.HelloWorld\SimpleSyncSignal.cs" region="code" language="c#" tabSize="4"/>
        <para>
          This is a partial implementation of an order workflow that provides a synchronous
          order cancellation signal.  Imagine in this case, that the workflow method loops
          at strategic places in its logic polling for the signal to set <codeInline>canCancel=true</codeInline>.
          The workflow logic also sets <codeInline>canCancel=false</codeInline> when
          cancellation is no longer possible.
        </para>
        <para>
          The <codeInline>CancelOrderAsync()</codeInline> synchronous signal method simply
          checks <codeInline>canCancel</codeInline> to determine whether cancellation is 
          still possible, sets <codeInline>canCancel=true</codeInline> when this is still
          the case, and then returns a string describing what happened.
        </para>
        <para>
          This approach is super simple but the polling is going to add to the workflow
          history.  Another approach is to use a <codeEntityReference qualifyHint="false">T:Neon.Temporal.WorkflowQueue`1</codeEntityReference>
          to marshal the signal information to the workflow logic.  We're going to use the
          new generic <codeEntityReference qualifyHint="false">T:Neon.Temporal.SignalRequest`1</codeEntityReference>
          class to make this easier.
        </para>
        <alert class ="note">
          <para>
            Neon.Temporal also has the <codeEntityReference qualifyHint="false">T:Neon.Temporal.SignalRequest</codeEntityReference>
            non-generic class that can be used for signals that don't return a result.
          </para>
        </alert>
        <code source="%NF_SNIPPETS%\Temporal\Snippets.Temporal.HelloWorld\QueuedSyncSignal.cs" region="code" language="c#" tabSize="4"/>
        <para>
          This (very) partial implementation of an order workflow depicts how a synchronous
          signal can interact with the workflow logic via a queue.  The workflow first
          creates a queue and then waits for a signal request to be sent by a signal
          for processing.  Here's how this works:
        </para>
        <list class="ordered">
          <listItem>
            <para>
              When a signal is received, the signal method constructs a <codeEntityReference qualifyHint="false">T:Neon.Temporal.SignalRequest`1</codeEntityReference>
              instance.  Via the magic of ambient state, the signal request class knows that it's within a signal
              method it intializes its <codeEntityReference qualifyHint="false">P:Neon.Temporal.SignalRequest.Args</codeEntityReference>
              property to the parameters values passed to the signal.  These are keyed by parameter name.
            </para>
          </listItem>
          <listItem>
            <para>
              The signal method enqueues the signal request and then throws a <codeEntityReference qualifyHint="false">T:Neon.Temporal.WaitForSignalReplyException</codeEntityReference>.
              This exception indicates that the workflow logic will handle indicating that the signal has been processed
              as well as specifying the result, if any.
            </para>
          </listItem>
          <listItem>
            <para>
              The workflow method dequeues the signal request.  Note how the <codeInline>reason</codeInline>
              signal parameter can be obtained via <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Temporal.SignalRequest.Arg``1(System.String)</codeEntityReference>.
              You can also reference <codeEntityReference qualifyHint="false">P:Neon.Temporal.SignalRequest`1.Args</codeEntityReference>
              which returns the complete argument dictionary.
            </para>
          </listItem>
          <listItem>
            <para>
              The workflow calls <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Temporal.SignalRequest`1.ReplyAsync(`0)</codeEntityReference>
              with the signal result when it's time for the signal to return.  Neon.Temporal handles the rest.
            </para>
          </listItem>
        </list>
        <para>
          This is admittedly a bit odd but it's not very complicated and it's probably the
          best we can do until Temporal supports this scenario natively.
        </para>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference qualifyHint="false">N:Neon.Temporal</codeEntityReference>
      <codeEntityReference qualifyHint="false">T:Neon.Temporal.SignalRequest</codeEntityReference>
      <codeEntityReference qualifyHint="false">T:Neon.Temporal.SignalRequest`1</codeEntityReference>
      <codeEntityReference qualifyHint="false">P:Neon.Temporal.SignalMethodAttribute.Synchronous</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
