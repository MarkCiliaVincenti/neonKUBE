<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Temporal-Workflow-SignalQueues" -->
<topic id="fef4f5f1-ee69-479c-9321-6586ec5d45f9" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
    </introduction>

    <section>
      <content>
        <para>
          Many workflows need to be notified when an event happens in the real world.  For example,
          a food delivery workflow may work something like:
        </para>
        <list class="ordered">
          <listItem>
            <para>Submit order to restaurant</para>
          </listItem>
          <listItem>
            <para>Wait for restaurant to accept the order</para>
          </listItem>
          <listItem>
            <para>Process the customer payment</para>
          </listItem>
          <listItem>
            <para>Wait for resturant to report the order ETA</para>
          </listItem>
          <listItem>
            <para>Schedule the driver pickup</para>
          </listItem>
        </list>
        <para>
          Steps #2 and #4 are waiting for events from the external restaurant systems which
          themselves may wait for an employee to manually interact with an application.
          So, how can we do this waiting in a Temporal workflow?
        </para>
        <para>
          There are three ways to wait for an external event in Temporal.  One bad way,
          one inconvienent way, and one supper cool way:
        </para>
        <list class="ordered">
          <listItem>
            <para>
              The bad approach is to simply have your workflow spin in a loop, polling an
              external source via an activity until it sees a status change indicating that the event has
              occurred.  You'd probably use <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Temporal.Workflow.SleepAsync(System.TimeSpan)</codeEntityReference>
              to slow your loop down.
            </para>
            <para>
              Although this will work, every call to your activity as well as every sleep call will
              be recorded to the workflow's history.  This means your history might grow very large
              (which is bad) and it also means that your workflow is consuming compute resources 
              while it's waiting.
            </para>
          </listItem>
          <listItem>
            <para>
              The inconvienent approach is to write an activity that will be completed externally.
              You can accomplish this by obtaining the activity's task token, an opaque byte array
              value that identifies the specific activity, storing this somewhere that will be available
              to an external system, and then calling <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Temporal.Activity.DoNotCompleteOnReturn</codeEntityReference>
              and returning from your activity method.
            </para>
            <para>
              Then you'll need an external system that determines when an event related to the activity
              happens and then calls <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Temporal.TemporalClient.ActivityCompleteByTokenAsync(System.String,System.Object,System.String)</codeEntityReference>,
              passing the activity token and the data to be returned by the activity.  The external code
              may also need to send activity heartbeats to Temporal, depending on the configured heartbeat
              timeout.
            </para>
            <para>
              Coordinating all of this can be pretty difficult and error prone.
            </para>
          </listItem>
          <listItem>
            <para>
              The better way is just to signal the workflow when the event happens.  You'll define a signal workflow
              method and use a <codeEntityReference qualifyHint="false">T:Neon.Temporal.WorkflowQueue`1</codeEntityReference>
              to notify your workflow method logic.
            </para>
          </listItem>
        </list>
        <para>
          Here's a sample showing how a workflow uses a queue to react to received signals.
        </para>
        <code source="%NF_SNIPPETS%\Temporal\Snippets.Temporal.HelloWorld\SignalWorkflow.cs" region="code" language="c#" tabSize="4"/>
        <para>
          The workflow above creates a queue and then loops, waiting for signals to be received and 
          be added to to the queue.  It reads these signals, updates its state and returns when it
          sees a "done" signal.
        </para>
        <para>
          Signals are delivered to workflows asynchronously.  This means that the the signal method may
          return to the caller before the workflow has actually receieved it.
        </para>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference qualifyHint="false">N:Neon.Temporal</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
