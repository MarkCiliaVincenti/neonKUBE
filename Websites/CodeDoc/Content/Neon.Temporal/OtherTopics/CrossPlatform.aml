<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Temporal-CrossPlatform" -->
<topic id="d5556812-b5b4-4aa4-93be-13a0a11458cf" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
    </introduction>

    <section address="summary">
      <title>Overview</title>
      <content>
        <para>
          The Temporal platform supports writing and deploying workflows and activities in multiple
          languages such as GOLANG, Java, and C#/.NET and it is possible for code written in one
          language to call workflows and activities written in another.
        </para>
        <para>
          Although we'd love it if you commited to using the .NET Temporal client for all
          your workflow needs, the time may come where your .NET code needs to interoperate
          with workflows and activities written in Java or GOLANG.  The reverse can also happen,
          where Java or GOLANG code needs to interoperate with .NET workflows and activities.
          To accmplish this, you'll need to know some details aboput how Temporal works.
        </para>
        <para>
          There are two important considerations you'll need to address before making cross-platform
          calls: <legacyBold>identifying the target workflow or activity being called</legacyBold>
          and <legacyBold>ensuring that serialized data is compatible</legacyBold> for both platforms.
          We'll discuss each of these below.
        </para>
      </content>
    </section>

    <section>
      <title>Workflow and Activity Type Names</title>
      <content>
        <para>
          Temporal has a concept called a <legacyBold>workflow type name</legacyBold>.  This
          is a string used to identify a workflow implementation.  For the GOLANG client,
          workflow type names are generally a combination of the module and name of the function
          implementing the workflow; like <legacyBold>main.MyWorkflow</legacyBold> where
          <legacyBold>main</legacyBold> is the module name and <legacyBold>MyWorkflow</legacyBold>
          is the workfloy function.  Custom custom names may be also be specified.  The Java and
          .NET clients  are a bit more complex and allow a workflow type to define multiple workflow
          entry point methods.  For these clients, the workflow type name will be a combination
          of the workflow class and method names (and these may also be customized).
        </para>
        <para>
          The first step towards cross-platform integration is to determine what the workflow or
          activity type name is for the target entity.  The easiest way to determine this is
          to go into your <legacyBold>Temporal Web UI</legacyBold> to discover the actual name used.
        </para>
      </content>
    </section>

    <section>
      <title>Data Serialization</title>
      <content>
        <para>
          To be able to make cross-platform workflow and activity calls, you'll also
          need to ensure that both sides are serializing data the same way.  There
          are two parts to this: using the same serialization format on both sides
          and ensuring that individual items are serialized the same.
        </para>
        <para>
          <legacyBold>Serialization Format:</legacyBold> You need to ensure that both
          platforms are using the same basic mechanism to serialize arguments and results
          into bytes that can be transmitted on the wire and persisted to the Temporal
          database.  By default, the GOLANG, Java, and .NET clients serialize data to
          JSON text and then render that into bytes as UTF-8.  It is possible
          to override this by implementing a custom <codeEntityReference qualifyHint="false">T:Neon.Temporal.IDataConverter</codeEntityReference>
          that serializes data as XML, Protobuf, or whatever.
        </para>
        <para>
          <legacyBold>Serialization Details:</legacyBold> You also need to ensure that
          things like JSON property names and details like how date/time and other values
          are consistent on both sides.  The .NET client's default JSON serialization
          implementation is based on the very popular
          <externalLink>
            <linkText>Newtonsoft JSON.NET</linkText>
            <linkUri>https://www.newtonsoft.com/json</linkUri>
          </externalLink>
          package.  You can use attributes like <codeInline>[JsonProperty]</codeInline>, <codeInline>[JsonIgnore]</codeInline>,
          and <codeInline>[JsonConverter]</codeInline> for fine control over this.  Here's a link
          to more information:
          <externalLink>
            <linkText>JSON.NET Attributes</linkText>
            <linkUri>https://www.newtonsoft.com/json/help/html/SerializationAttributes.htm</linkUri>
          </externalLink>
        </para>
      </content>
    </section>

    <section>
      <title>Cross-platform workflows</title>
      <content>
        <para>
          There are two approaches to interoperating with workflows written in
          another language: using an untyped or typed workflow stub.
        </para>
        <para>
          For <legacyBold>untyped workflow stubs</legacyBold>, you'll need to connect a <codeEntityReference qualifyHint="false">T:Neon.Temporal.TemporalClient</codeEntityReference>
          to the Temporal cluster, create an untyped <codeEntityReference qualifyHint="false">T:Neon.Temporal.WorkflowStub</codeEntityReference>
          using a <codeEntityReference qualifyHint="false">T:Neon.Temporal.WorkflowOptions</codeEntityReference>
          or <codeEntityReference qualifyHint="false">T:Neon.Temporal.ChildWorkflowOptions</codeEntityReference>
          to specify the exact workflow type name registered for the workflow.  Then you'll start the workflow
          taking care to pass the expected number and types of arguments.  You can also use this stub to query
          and signal the workflow as well as waiting for workflow to complete, obtaining the result.
        </para>
        <alert class="note">
          <para>
            You can also create an untyped <codeEntityReference qualifyHint="false">T:Neon.Temporal.WorkflowStub</codeEntityReference>
            to connect to and manage an existing, already running workflow by workflow ID.
          </para>
        </alert>
        <para>
          Here's a code snippit demonstrating how to invoke a GOLANG workflow that sends an email.
          The workflow accepts three string arguments like: <codeInline>bool SendEmail(string to, string subject, string body)</codeInline>
          and returns <codeInline>true</codeInline> on success.  The workflow type name registered
          <legacyBold>SendEmail</legacyBold> in the <legacyBold>Acme-PROD</legacyBold> namespace
          by the GOLANG implementation as <legacyBold>"SendEmail"</legacyBold>:
        </para>
        <code source="%NF_SNIPPETS%\Temporal\Snippets.Temporal.HelloWorld\CrossPlatform.cs" region="code_untyped" language="c#" tabSize="4"/>
        <para>
          For <legacyBold>typed workflow stubs</legacyBold>, you'll need to define a workflow interface
          with methods with argument and result types that match the workflow methods written using
          another language.  In general, the default workflow type name generated by the .NET client
          will not match the workflow type name registered for workflows written in other languages.
          So the trick is to decorate your workflow interface methods with <inlineCode>[WorkflowMethod(Name = "workflow type name", IsFullName=true]</inlineCode>
          attributes that specify the exact workflow type name registered by the target worker for
          the workflow.
        </para>
        <para>
          The <legacyCode>IsFullName = true</legacyCode> property tells the .NET client that it should
          target the workflow type name exactly as specified rather than prefixing it with the fully
          qualified interface name as it would normally do be default.  Here's a sample with an interface
          definition that does this.
        </para>
        <code source="%NF_SNIPPETS%\Temporal\Snippets.Temporal.HelloWorld\CrossPlatform.cs" region="code_typed" language="c#" tabSize="4"/>
      </content>
    </section>

    <section>
      <title>Cross-platform activities</title>
      <content>
        <para>
          Making cross-platform activity calls work very much like cross-platform workflows
          and you may use typed or untyped stubs just like we did showed for mworkflows above.
        </para>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference qualifyHint="false">N:Neon.Temporal</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
