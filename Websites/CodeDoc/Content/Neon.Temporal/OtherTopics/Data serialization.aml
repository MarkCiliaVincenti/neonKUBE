<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Temporal-Other-Serialization" -->
<topic id="0d34f0bf-ad1b-4ce1-ad9b-9b70cc1b29d1" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
    </introduction>

    <section>
      <content>
        <para>
          The Temporal service internally treats workflow and activity arguments and results as simple byte arrays.
          The Temporal clients are responsible for serializing and deserializing the application level arguments
          and results to the binary data actually managed by Temporal.
        </para>
        <para>
          By default the .NET, Java, and Go Temporal clients serialize this data as JSON.  The .NET client
          uses the popular <legacyBold>Newtonsoft.Json</legacyBold> nuget package to accomplish this, with
          the addition of a bit of code to support <legacyBold>Neon.ModelGen</legacyBold> generated
          <codeEntityReference qualifyHint="false">T:Neon.Data.IRoundtripData</codeEntityReference>
          classes.  This is handled by <codeEntityReference qualifyHint="false">T:Neon.Temporal.JsonDataConverter</codeEntityReference>.
        </para>
        <alert class="note">
          <para>
            The default .NET client JSON data serializer is based on the very popular
            <externalLink>
              <linkText>Newtonsoft JSON.NET</linkText>
              <linkUri>https://www.newtonsoft.com/json</linkUri>
            </externalLink>
            package.  You can use attributes like <codeInline>[JsonProperty]</codeInline>, <codeInline>JsonIgnore</codeInline>,
            and <codeInline>[JsonConverter]</codeInline> for fine control over this.  Here's a link
            to more information:
            <externalLink>
              <linkText>JSON.NET Attributes</linkText>
              <linkUri>https://www.newtonsoft.com/json/help/html/SerializationAttributes.htm</linkUri>
            </externalLink>
          </para>
        </alert>
        <para>
          You can write a custom converter to support XML, protobuf, or whatever.  This may be necessary
          if you need to interoperate with workflows or activities written for another client.  Your new
          converter will need to implement <codeEntityReference qualifyHint="false">T:Neon.Temporal.IDataConverter</codeEntityReference>
          and then assign an instance of your converter to <codeEntityReference qualifyHint="false">P:Neon.Temporal.TemporalClient.DataConverter</codeEntityReference>
          just after connecting a client to Temporal.
        </para>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference qualifyHint="false">N:Neon.Temporal</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
