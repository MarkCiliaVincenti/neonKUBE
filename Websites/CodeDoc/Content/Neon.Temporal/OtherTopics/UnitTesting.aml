<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Temporal-Other-UnitTesting" -->
<topic id="e5b8f3ca-e30d-4915-b9c3-2c630fca5b32" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
    </introduction>

    <section>
      <content>
        <para>
          The Temporal Java and Go clients provide powerful mechanisms for unit testing
          your workflows and activities.  These clients have can emulate Temporal server in-process.
          The .NET client is not at this level yet but we plans on getting there in the future.
        </para>
        <para>
          In the meantime, the <legacyBold>Neon.Xunit.Temporal</legacyBold> nuget package provides
          the <codeEntityReference qualifyHint="false">T:Neon.Xunit.Temporal.TemporalFixture</codeEntityReference>
          for use by tests authored for the popular Xunit test framework.  This fixture spins up
          a Temporal Server and UX as well as the Cassandra backing database as a Docker Compose app.
          state.
        </para>
        <para>
          This is pretty easy to use.  Create an Xunit test project and reference the 
          <legacyBold>Neon.Common</legacyBold>, <legacyBold>Neon.Temporal</legacyBold>,
          <legacyBold>Neon.Xunit</legacyBold>, and <legacyBold>Neon.Xunit.Temporal</legacyBold>
          nuget packages.  Then code your tests to look something like:
        </para>
        <code source="%NF_SNIPPETS%\Temporal\Snippets.Temporal.HelloWorld\Xunit.cs" language="c#" tabSize="4"/>
        <para>
          This example defines a simple workflow interface and implementation along with an Xunit
          test class.  The interesting part happens in the constructor.  Essentially what's happening
          here is that Xunit and the <codeEntityReference qualifyHint="false">T:Neon.Xunit.Temporal.TemporalFixture</codeEntityReference>
          are coordinating such that the <legacyBold>ghcr.io/neonrelease/Temporal-dev</legacyBold> container is
          started or restarted for the first test executed and then is reused for subsequent tests
          defined by the class.
        </para>
        <para>
          This scheme let's you test the happy path where everything works as expected.  What's missing
          is a way to test how your workflows react when the unexpected happens, like verifying that the
          workflow is deterministic when it's replayed from history or how it reacts in the face of
          timeouts or other errors.
        </para>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference qualifyHint="false">N:Neon.Temporal</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
