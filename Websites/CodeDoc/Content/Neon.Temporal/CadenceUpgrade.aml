<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Temporal-CadenceUpgrade" -->
<topic id="a6d5bc2a-3d4a-4264-92f7-eff1082b042b" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">
    
    <introduction>
      <para>
        Temporal as a fork of Uber Cadence and works much the same.  There are substantial
        breaking changes though.  This page descibes how the <legacyBold>Neon.Temporal</legacyBold> 
        .NET client differents from <legacyBold>Neon.Cadence</legacyBold> and describes what
        you'll need to do to upgrade.
      </para>
    </introduction>

    <section address="changes">
      <content>
        <para>
          The <legacyBold>Neon.Temporal</legacyBold> client has renamed anything called <legacyBold>"Cadence"</legacyBold>
          to <legacyBold>"Temporal"</legacyBold>.  Here are the major changes: 
        </para>
        <list class="ordered">
          <listItem>
            <para>
              <inlineCode>Neon.Cadence</inlineCode> namespace has been renamed to <inlineCode>Neon.Temporal</inlineCode>.
            </para>
          </listItem>
          <listItem>
            <para>
              <inlineCode>CadenceClient</inlineCode> has been renamed to <inlineCode>TemporalClient</inlineCode>.
            </para>
          </listItem>
          <listItem>
            <para>
              <inlineCode>CadenceSettings</inlineCode> has been renamed to <inlineCode>TemporalSettings</inlineCode>.
            </para>
          </listItem>
          <listItem>
            <para>
              Some options in <inlineCode>TemporalSettings</inlineCode>, <inlineCode>ActivityOptions</inlineCode>, <inlineCode>ChildWorkflowOptions</inlineCode>,
              and <inlineCode>WorkflowOptions</inlineCode> have been renamed for consistency with Temporal conventions.
            </para>
          </listItem>
          <listItem>
            <para>
              The <codeEntityReference qualifyHint="false">T:Neon.Temporal.Worker</codeEntityReference> lifecycle has changed a bit from Cadence.
              To start a worker on Cadence, you'd first establish a client connection, then register your workflow and activity implementations
              with <legacyBold>the client</legacyBold> and then call the client to start the worker.  This model was a bit broken because it
              implies that there can only be one worker per client instance.
            </para>
            <para>
              For <legacyBold>Temporal</legacyBold> after establishing the client connection, you'll call the client's
              <codeEntityReference qualifyHint="false">M:Neon.Temporal.TemporalClient.NewWorkerAsync</codeEntityReference> first,
              then register your workflow and activity registrations directly with the worker via
              <codeEntityReference qualifyHint="false">M:Neon.Temporal.Worker.RegisterAssemblyAsync</codeEntityReference>,
              <codeEntityReference qualifyHint="false">M:Neon.Temporal.Worker.RegisterAssemblyActrivitiesAsync</codeEntityReference>,
              <codeEntityReference qualifyHint="false">M:Neon.Temporal.Worker.RegisterAssemblyWorkflowsAsync</codeEntityReference>,
              <codeEntityReference qualifyHint="false">M:Neon.Temporal.Worker.RegisterActivityAsync</codeEntityReference>, or
              <codeEntityReference qualifyHint="false">M:Neon.Temporal.Worker.RegisterWorkflowAsync</codeEntityReference>
              and then after you've registered everything, you'll call <codeEntityReference qualifyHint="false">M:Neon.Temporal.Worker.StartAsync</codeEntityReference>
              to start the worker.
            </para>
            <para>
              You may call <codeEntityReference qualifyHint="false">M:Neon.Temporal.Worker.Dispose</codeEntityReference>
              to explicitly stop a worker or let the client do this when it is disposed.  This behaviour is unchanged
              from Cadence.
            </para>
          </listItem>
          <listItem>
            <para>
              The Cadence <inlineCode>ActivityWorkerStartedException</inlineCode> and <inlineCode>WorkflowWorkerStartedException</inlineCode>
              exceptions have been replaced by <codeEntityReference qualifyHint="false">T:System.InvalidOperationtionException</codeEntityReference>
              when an attempt to register additional activities or workflows on a worker that has already started.
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <relatedTopics>
      <externalLink>
        <linkText>Temporal: The Only Workflow Platform You'll Ever Need</linkText>
        <linkUri>https://www.youtube.com/watch?v=llmsBGKOuWI</linkUri>
      </externalLink>
      <externalLink>
        <linkText>.NET Temporal GitHub Repository</linkText>
        <linkUri>https://github.com/nforgeio/neonKUBE/tree/master/Lib/Neon.Temporal</linkUri>
      </externalLink>
      <codeEntityReference qualifyHint="false">N:Neon.Temporal</codeEntityReference>
      <externalLink>
        <linkText>.NET Temporal Open Issues</linkText>
        <linkUri>https://github.com/nforgeio/neonKUBE/issues?q=is%3Aopen+is%3Aissue+label%3ATemporal</linkUri>
      </externalLink>
      <externalLink>
        <linkText>.NET Temporal Samples</linkText>
        <linkUri>https://github.com/nforgeio/Temporal-samples</linkUri>
      </externalLink>
      <externalLink>
        <linkText>Temporal Documentation</linkText>
        <linkUri>https://Temporalworkflow.io/docs/</linkUri>
      </externalLink>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
