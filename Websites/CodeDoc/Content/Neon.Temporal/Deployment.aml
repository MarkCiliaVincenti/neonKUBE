<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Temporal-Deloyment" -->
<topic id="7e2e1d4c-1782-4872-9c59-c600f50eb546" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
    </introduction>

    <section address="summary">
      <content>
        <para>
          A Temporal deployment is composed of three components: one or more Temporal service servers, one or more Cassandra noSQL 
          database servers (or MySQL), and machines running your worker services.
        </para>
        <table>
          <row>
            <entry><para><legacyBold>Temporal service</legacyBold></para></entry>
            <entry>
              <para>
                is resonsible for persisting workflow state to the database as well as scheduling
                workflows and activities on specific worker service instances.
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <legacyBold>Cassandra</legacyBold>
              </para>
            </entry>
            <entry>
              <para>
                is responsible for reliably storing workflow and activity state.
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <legacyBold>Worker Service</legacyBold>
              </para>
            </entry>
            <entry>
              <para>
                hosts your workflow and activity code.  With <legacyBold>Neon.Temporal</legacyBold>, you
                can code your workflows in any supported .NET language.  You'll typically deploy
                your workflow service as a console application that connects to a Temporal cluster via a
                <codeEntityReference qualifyHint="false">T:Neon.Temporal.TemporalClient</codeEntityReference>,
                registers one or more workflows and/or activities, informs Temporal that the service
                is ready, and then waits for Temporal to assign workflows and activities for execution.
              </para>
            </entry>
          </row>
        </table>
        <para>
          A most simple Temporal solution deployment will have a single Temporal server, a Cassandra
          database node, and a worker service instance:
        </para>
        <mediaLink>
          <caption></caption>
          <image xlink:href="temporal-deployment-simple"/>
        </mediaLink>
        <para>
          Temporal can be scaled horizontally by adding more Cassandra, Temporal, and Workflow Service machines.
          You can do this manually with bare metal hardware, using clusters of virtual machines, or 
          machanisms provided by public cloud providers like AWS, Azure and Google or deploying on platforms
          like Kubernetes.  Temporal is agnostic to all of this though.  It just needs servers to run on
          and expects worker service instances to connect over the network via a compatible client.
        </para>
        <mediaLink>
          <caption></caption>
          <image xlink:href="temporal-deployment-scaled"/>
        </mediaLink>
        <para>
          Temporal supports multi-tenancy by allowing workflow and activity implementations to isolated
          into multiple namespaces.  Namespaces are simply a name that can be used to separate workflows much
          like namespaces can be used to separate pods running in a Kubernetes cluster.  It's common
          to deploy a Temporal cluster that defines namespaces for different teams running workflows on the
          cluster and even for individual users.  Temporal can support thousands of namespaces.
        </para>
        <mediaLink>
          <caption></caption>
          <image xlink:href="temporal-deployment-multi-tenant"/>
        </mediaLink>
        <para>
          The diagram above depicts three Temporal namespaces, each with its own set of worker services 
          processing workflows and activities.  In these situations, it's common for a central team
          to manage the Temporal/Cassandra servers with each tenant team managing their own servers
          hosting their workflow services.
        </para>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference qualifyHint="false">N:Neon.Temporal</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
