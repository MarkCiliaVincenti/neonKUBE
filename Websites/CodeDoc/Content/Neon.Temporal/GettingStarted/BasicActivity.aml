<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Temporal-GettingStarted-BasicActivity" -->
<topic id="a5cdc2a2-6f6d-4717-b2a4-deeefb8d55e6" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
    </introduction>

    <section>
      <content>
        <para>
          Temporal activities are used by workflows to interact with the outside world.  This includes
          querying the state of an external entity as well as performing actions like updating a database,
          sending and email or SMS, or making calls to REST APIs.
        </para>
        <list class="bullet">
          <listItem>
            <para>
              Temporal requires that workflows <legacyBold>never interact with the outside world directy</legacyBold>.
              Workflows should only include the logic to decide what needs to be done to complete the operation and
              that the workflow will use activities to determine external state as well as actually perform any
              external operations.
            </para>
          </listItem>
          <listItem>
            <para>
              Temporal activities <legacyBold>must be used by workflows to iteract with the outside world.</legacyBold>
            </para>
          </listItem>
        </list>
        <para>
          A Temporal activity is coded much like a workflow.  You'll write an interface defining one or more activity
          operation methods followed by a class in that implements the activity.  Then you'll register the implementation
          in your workflow service and start a worker.
        </para>
        <code source="%NF_SNIPPETS%\Temporal\Snippets.Temporal.HelloWorld\Program-BasicActivity-1.cs" region="code" language="c#" tabSize="4"/>
        <para>
          Here we define the <codeInline>ISendHelloActivity</codeInline> interface which defines a method that
          sends an email message.  This method is tagged with a <codeEntityReference qualifyHint="false">T:Neon.Temporal.ActivityMethodAttribute</codeEntityReference>
          attribute indicating that it's an activity entry point.  Note that activity interfaces must inherit <codeEntityReference qualifyHint="false">T:Neon.Temporal.IActivity</codeEntityReference>
          and that we tagged this with <codeEntityReference qualifyHint="false">T:Neon.Temporal.ActivityInterfaceAttribute</codeEntityReference>
          indicating that the activity will execute within the <legacyBold>my-tasks</legacyBold> task list.
        </para>
        <para>
          The <codeInline>SendHelloClass</codeInline> implements the activity.  Activity classes must derive from
          <codeEntityReference qualifyHint="false">T:Neon.Temporal.ActivityBase</codeEntityReference> and of course,
          must implement the activity interface.  In this example, the activity creates a <codeInline>SmtpClient</codeInline>
          and then uses it to send an email message.
        </para>
        <para>
          The following code shows how you can register and call the activity via a workflow.
        </para>
        <code source="%NF_SNIPPETS%\Temporal\Snippets.Temporal.HelloWorld\Program-BasicActivity-2.cs" region="code" language="c#" tabSize="4"/>
        <para>
          You can see above that we define a new workflow that accepts an email address and a name as
          parameters, uses the <codeEntityReference qualifyHint="false">P:Neon.Temporal.WorkflowBase.Workflow</codeEntityReference>
          property to create an activity stub and then invokes the activity, passing the email address
          and name.  The workflow service program also adds a call to 
          <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Temporal.TemporalClient.RegisterActivityAsync``1(System.String,System.String)</codeEntityReference>
          to register the activity implementation with Temporal.
        </para>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference qualifyHint="false">N:Neon.Temporal</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
