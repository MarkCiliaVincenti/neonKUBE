<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Temporal-GettingStarted-BasicWorkflow" -->
<topic id="71ca278a-dfb2-450f-965b-c5bc373538e1" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
    </introduction>

    <section>
      <content>
        <para>
          .NET Temporal workflows are defined by an <codeInline>interface</codeInline> and then implemented
          as a <codeInline>class</codeInline>.  We'll start out with a simple <legacyBold>HelloWorld</legacyBold>
          console application targeting .NET Core or .NET Framework and adding references to the 
          <legacyBold>Neon.Temporal</legacyBold> and <legacyBold>Neon.Common</legacyBold> nuget packages.
        </para>
        <code source="%NF_SNIPPETS%\Temporal\Snippets.Temporal.HelloWorld\Program-BasicWorkflow.cs" language="c#" tabSize="4"/>
        <para>
          Here we define <codeInline>IHelloWorkflow</codeInline> which defines the <codeInline>HelloAsync</codeInline> 
          workflow method which implements your workflow.  Workflow interfaces have a couple requirements:
        </para>
        <list class="bullet">
          <listItem>
            <para>Workflow interfaces need to inherit <codeEntityReference qualifyHint="false">T:Neon.Temporal.IWorkflow</codeEntityReference></para>
          </listItem>
          <listItem>
            <para>All workflow interface methods must be <codeInline>async</codeInline></para>
          </listItem>
        </list>
        <para>
          The <codeEntityReference qualifyHint="false">T:Neon.Temporal.WorkflowInterfaceAttribute</codeEntityReference> is optional
          but can be used to specify workflow related options.  In this example, we're indicating that the workflow will be registered
          with Temporal in the <legacyBold>my-tasks</legacyBold> task queue (we'll be discussing task queues in depth later).  All workflow 
          implementations must inherit <codeEntityReference qualifyHint="false">T:Neon.Temporal.WorkflowBase</codeEntityReference>
          and also implement the workflow interface you defined.
        </para>
        <para>
          Next, we define the <legacyBold>HelloWorkflow</legacyBold> <codeInline>class</codeInline> that actually implements
          the workflow.  In this case, the <codeInline>HelloAsync()</codeInline> workflow method simply returns a string value.
          We tag the method with a <codeEntityReference qualifyHint="false">T:Neon.Temporal.WorkflowMethodAttribute</codeEntityReference>
          to indicate that it's a workflow entry point.
        </para>
        <para>
          The example above is coded as a basic console application with the <codeInline>Main()</codeInline> method:
        </para>
        <list class="ordered">
          <listItem>
            <para>
              Initializes the connection settings to connect Temporal running on the local machine, configuring <legacyBold>my-namespace</legacyBold>
              as the default namespace where your workflows and activities will be registered and run, and indicating that the default namespace
              should be created when it doesn't already exist (handy for testing).
            </para>
          </listItem>
          <listItem>
            <para>Establishes a connection to Temporal.</para>
          </listItem>
          <listItem>
            <para>Registers the workflow implementation.</para>
          </listItem>
          <listItem>
            <para>
              Starts the workflow worker.  This informs Temporal that you've finished registering workflow and activity implementations
              and your workflow service is ready to be assigned tasks by Temporal within the <legacyBold>my-tasks</legacyBold> task queue.
            </para>
          </listItem>
          <listItem>
            <para>
              Creates a type-safe stub that implements the specified workflow interface such that calling the method actually
              executes the workflow.  The program then calls the stub's <codeInline>HelloAsync()</codeInline> method and 
              prints the result to the console.
            </para>
          </listItem>
        </list>
        <para>
          Running a workflow really couldn't be much simpler.  Here's what's happening under the covers:
        </para>
        <list class="ordered">
          <listItem>
            <para>
              The stub <codeInline>HelloAsync()</codeInline> method tells the Temporal server to start the workflow,
              with any arguments passed.  Note that the stub method doesn't return until the the workflow completes.
            </para>
          </listItem>
          <listItem>
            <para>
              Temporal receives this requests and persists the details to Cassandra for reliability and then 
              looks for a workflow service that is registered for <legacyBold>my-tasks</legacyBold>.
            </para>
          </listItem>
          <listItem>
            <para>
              Temporal will see that our sample application has registered itself and will schedule the workflow
              to be executed by our application.
            </para>
          </listItem>
          <listItem>
            <para>
              The application's <codeEntityReference qualifyHint="false">T:Neon.Temporal.TemporalClient</codeEntityReference>
              receives the workflow execution request from Temporal, instantiates an instance of the <codeInline>HelloWorkflow</codeInline>
              workflow class and then calls the <codeInline>HelloAsync()</codeInline> method.
            </para>
          </listItem>
          <listItem>
            <para>
               <codeInline>HelloAsync()</codeInline> does its thing and returns the result string.
            </para>
          </listItem>
          <listItem>
            <para>
               Temporal persists the result to Cassandra, marks the workflow as complete, and then signals
               the pending stub <codeInline>HelloAsync()</codeInline> call that it can return with the
               value returned by your workflow implementation.
            </para>
          </listItem>
        </list>
        <para>
          This may not look like much, but Temporal makes this operation inheritly reliable by:
        </para>
        <list class="bullet">
          <listItem>
            <para>Assigning the workflow to an available workflow instance, waiting for one to be ready.</para>
          </listItem>
          <listItem>
            <para>Reassigning the workflow if the workflow service executing it is restarted or fails.</para>
          </listItem>
          <listItem>
            <para>Ensuring that the workflow is idempotent such that steps that have already been completed won't be reexecuted due to workflow service failures.</para>
          </listItem>
          <listItem>
            <para>Load balancing work across multiple registered worker instances.</para>
          </listItem>
          <listItem>
            <para>Recording the history of the workflow execution along with the final result.</para>
          </listItem>
        </list>
        <para>
          This example is super simple but even here, Temporal delivers substantial benefits.
          This would be non-trivial to do reliably with custom code without Temporal.
        </para>
        <alert class="note">
          <para>
            This example is a bit contrived because we are implementing and invoking a workflow in
            the same program.  Normally, folks will deploy a workflow service that runs until terminated
            and have workflows invoked from other applications such as console or ASP.NET applications.
            Note that any 64-bit Windows, Linux or OS/X .NET Core or Windows .NET Framework application can use
            <codeEntityReference qualifyHint="false">T:Neon.Temporal.TemporalClient</codeEntityReference>
            to establish a connection to a Temporal cluster and invoke or manage workflows.
          </para>
        </alert>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference qualifyHint="false">N:Neon.Temporal</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
