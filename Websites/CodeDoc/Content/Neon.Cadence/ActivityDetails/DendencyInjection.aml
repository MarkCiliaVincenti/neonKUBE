<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Cadence-Activity-DendencyInjection" -->
<topic id="b33f3181-8295-4546-b51d-553342717095" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
    </introduction>

    <section>
      <content>
        <para>
          Cadence activities support injecting depdendencies as parameters to the
          activity implementation constructor.  This can be used to inject things like
          database or REST API clients into an activity and can also be used to pass
          in mocked implementations for workflow and activity unit testing.
        </para>
        <para>
          You'll need to add a reference the <legacyBold>Microsoft.Extensions.DependencyInjection</legacyBold>
          nuget package to your worker service, configure your dependencies using the global
          Neon service container <codeEntityReference qualifyHint="false">P:Neon.Common.NeonHelper.ServiceContainer</codeEntityReference>,
          and then add a constructor to your activity implementation with parameters that accept
          the dependencies.
        </para>
        <note class="note">
          <para>
            You must register your dependencies before your worker registers its activity
            implementations.
          </para>
        </note>
        <para>
          Here's an example of worker injecting an object instance into an activity:
        </para>
        <code source="%NF_SNIPPETS%\Cadence\Snippets.Cadence.HelloWorld\Program-ActivityDependency.cs" region="code" language="c#" tabSize="4"/>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference qualifyHint="false">N:Neon.Cadence</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
