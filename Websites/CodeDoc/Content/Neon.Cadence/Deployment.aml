<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Cadence-Deloyment" -->
<topic id="e7611458-d70d-458a-9dfe-09bd8811ec11" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
    </introduction>

    <section address="summary">
      <content>
        <para>
          A Cadence deployment is composed of three components: one or more Cadence service servers, one or more Cassandra noSQL 
          database servers (or MySQL), and machines running your worker services.
        </para>
        <table>
          <row>
            <entry><para><legacyBold>Cadence service</legacyBold></para></entry>
            <entry>
              <para>
                is resonsible for persisting workflow state to the database as well as scheduling
                workflows and activities on specific worker service instances.
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <legacyBold>Cassandra</legacyBold>
              </para>
            </entry>
            <entry>
              <para>
                is responsible for reliably storing workflow and activity state.
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <legacyBold>Worker Service</legacyBold>
              </para>
            </entry>
            <entry>
              <para>
                hosts your workflow and activity code.  With <legacyBold>Neon.Cadence</legacyBold>, you
                can code your workflows in any supported .NET language.  You'll typically deploy
                your workflow service as a console application that connects to a Cadence cluster via a
                <codeEntityReference qualifyHint="false">T:Neon.Cadence.CadenceClient</codeEntityReference>,
                registers one or more workflows and/or activities, informs Cadence that the service
                is ready, and then waits for Cadence to assign workflows and activities for execution.
              </para>
            </entry>
          </row>
        </table>
        <para>
          A most simple Cadence solution deployment will have a single Cadence server, a Cassandra
          database node, and a worker service instance:
        </para>
        <mediaLink>
          <caption></caption>
          <image xlink:href="deployment-simple"/>
        </mediaLink>
        <para>
          Cadence can be scaled horizontally by adding more Cassandra, Cadence, and Workflow Service machines.
          You can do this manually with bare metal hardware, using clusters of virtual machines, or 
          machanisms provided by public cloud providers like AWS, Azure and Google or deploying on platforms
          like Kubernetes.  Cadence is agnostic to all of this though.  It just needs servers to run on
          and expects worker service instances to connect over the network via a compatible client.
        </para>
        <mediaLink>
          <caption></caption>
          <image xlink:href="deployment-scaled"/>
        </mediaLink>
        <para>
          Cadence supports multi-tenancy by allowing workflow and activity implementations to isolated
          into multiple domains.  Domains are simply a name that can be used to separate workflows much
          like namespaces can be used to separate pods running in a Kubernetes cluster.  It's common
          to deploy a Cadence cluster that defines domains for different teams running workflows on the
          cluster and even for individual users.  Cadence can support thousands of domains.
        </para>
        <mediaLink>
          <caption></caption>
          <image xlink:href="deployment-multi-tenant"/>
        </mediaLink>
        <para>
          The diagram above depicts three Cadence domains, each with its own set of worker services 
          processing workflows and activities.  In these situations, it's common for a central team
          to manage the Cadence/Cassandra servers with each tenant team managing their own servers
          hosting their workflow services.
        </para>
      </content>
    </section>

    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
