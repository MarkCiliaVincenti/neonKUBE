<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Cadence-Other-Serialization" -->
<topic id="41335d55-fbda-49f1-9187-fffeafb41352" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
    </introduction>

    <section>
      <content>
        <para>
          The Cadence service internally treats workflow and activity arguments and results as simple byte arrays.
          The Cadence clients are responsible for serializing and deserializing the application level arguments
          and results to the binary data actually managed by Cadence.
        </para>
        <para>
          By default the .NET, Java, and Go Cadence clients serialize this data as JSON.  The .NET client
          uses the popular <legacyBold>Newtonsoft.Json</legacyBold> nuget package to accomplish this, with
          the addition of a bit of code to support <legacyBold>Neon.ModelGen</legacyBold> generated
          <codeEntityReference qualifyHint="false">T:Neon.Data.IRoundtripData</codeEntityReference>
          classes.  This is handled by <codeEntityReference qualifyHint="false">T:Neon.Cadence.JsonDataConverter</codeEntityReference>.
        </para>
        <para>
          You can write a custom converter to support XML, protobuf, or whatever.  This may be necessary
          if you need to interoperate with workflows or activities written for another client.  Your new
          converter will need to implement <codeEntityReference qualifyHint="false">T:Neon.Cadence.IDataConverter</codeEntityReference>
          and then assign an instance of your converter to <codeEntityReference qualifyHint="false">P:Neon.Cadence.CadenceClient.DataConverter</codeEntityReference>
          just after connecting a client to Cadence.
        </para>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference qualifyHint="false">N:Neon.Cadence</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
