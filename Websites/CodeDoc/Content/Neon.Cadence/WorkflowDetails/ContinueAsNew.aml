<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Cadence-Activity-ContinueAsNew" -->
<topic id="46fb345e-f0fa-4b5e-a67c-ae6f5800d4e9" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
    </introduction>

    <section>
      <content>
        <para>
          A common pattern is to deploy a workflow business instance for important business
          entities and have these run continuously there after.  For example, you could implement
          a customer engagement workflow and then execute an instance for every customer.  The
          workflow could wake up every so often, query the status of customer and then send
          marketing emails or TEXT messages as appropriate.
        </para>
        <code source="%NF_SNIPPETS%\Cadence\Snippets.Cadence.HelloWorld\ContinueAsNew.cs" region="code_loop" language="c#" tabSize="4"/>
        <para>
          This example defines an activity that can read/write a customer record and can
          send an email and then implements a simple customer engagement workflow that sends
          a welcome email to the customer when one hasn't been sent yet and then sends
          a marketing message every seven days.  The workflow is coded as a loop that
          sleeps for 30 minutes between iterations.
        </para>
        <para>
          Although this will work, looping like this is a bad practice.  The problem is that
          Cadence records each of the activity calls as well as the sleep operation to the
          workflow history.  This workflow is designed to run indefinitely which means the
          history is going to grow without bounds.  Cadence can support histories with 100K+
          items, but you really should avoid huge histories whenever possible because:
        </para>
        <list class="bullet">
          <listItem>
            <para>Eventually you'll reach the history limit and your workflow will stop working.</para>
          </listItem>
          <listItem>
            <para>Rescheduled workflows will need to replay the history which could take a while to complete.</para>
          </listItem>
          <listItem>
            <para>Large histories are going stress all parts of the system including Cadence server, Cassandra, and your workflow services.</para>
          </listItem>
        </list>
        <para>
          Cadence provides a way around this called <legacyBold>continue as new</legacyBold>.  The idea
          is to have the workflow indicate that should continue as a new run.  Cadence responds by starting
          a new workflow run with the same workflow ID but with a new run ID.  Here's an example:      
        </para>
        <code source="%NF_SNIPPETS%\Cadence\Snippets.Cadence.HelloWorld\ContinueAsNew.cs" region="code_continue" language="c#" tabSize="4"/>
        <para>
          We've refactored the workflow by removing the loop and replacing it with a call to 
          <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Cadence.Workflow.ContinueAsNewAsync(System.Object[])</codeEntityReference>,
          passing the original arguments to the new run.  Cadence will start a new workflow run,
          replacing the loop and also restarting the workflow history.
        </para>
      </content>
    </section>

    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
