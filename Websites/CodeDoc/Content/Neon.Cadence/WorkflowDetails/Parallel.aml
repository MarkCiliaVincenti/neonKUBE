<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Cadence-GettingStarted-Parallel" -->
<topic id="0cc6a07b-e6d4-4840-9e61-aa8026a26ad4" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
    </introduction>

    <section>
      <content>
        <para>
          Cadence supports running multiple child workflows and/or activities in parallel using
          future stubs.  These work somewhat differently from the typed stubs we've shown so far.
        </para>
        <list class="bullet">
          <listItem>
            <para>
              Regular stubs are type-safe because they implement the workflow or activity interface.
              The C# or Visual Basic compiler will ensure that the parameters and result match the 
              interface.  These checks happen at compile time, which is nice.
            </para>
          </listItem>
          <listItem>
            <para>
              Future stubs are created for a specific workflow or activity method.  You'll specify
              the workflow or activity interface as well as the method name as specified by the 
              <codeEntityReference qualifyHint="false">T:Neon.Cadence.WorkflowMethodAttribute</codeEntityReference> or
              <codeEntityReference qualifyHint="false">T:Neon.Cadence.ActivityMethodAttribute</codeEntityReference>.
              For methods without an explicitly specified name, use <codeInline>null</codeInline> or
              <codeEntityReference qualifyHint="false">T:System.String.Empty</codeEntityReference>
            </para>
          </listItem>
          <listItem>
            <para>
              Future stubs include generic and non-generic versions of <codeInline>StartAsync(params object[] args)</codeInline>.
              These start the workflow or activity and return a future that can be used send signals or
              queries (for workflows) and also retrieve the workflow result.  You'll use the generic 
              version to specify the result type for workflows/activity methods that return a result.
              Use the non-generic version for workflow/activities that don't return a result.
            </para>
          </listItem>
          <listItem>
            <para>
              Future stub calls are not type checked at compile time.  But, the .NET client does
              check these parameters at runtime and also makes a reasonable effort at casting
              any arguments to what the workflow or activity method expects.
            </para>
          </listItem>
        </list>
        <para>
          The example below shows a workflow that executes a child workflow and activity in parallel:
        </para>
        <code source="%NF_SNIPPETS%\Cadence\Snippets.Cadence.HelloWorld\Parallel.cs" region="code" language="c#" tabSize="4"/>
        <para>
          The sample defines the <codeInline>IMyActivity</codeInline> and <codeInline>IChildWorkflow</codeInline> 
          interfaces and assumes that these are implemented in another workflow service.  <codeInline>ParallelWorkflow</codeInline>
          implements <codeInline>RunAsync()</codeInline> which creates future stubs for the child workflow and
          activity methods, starts them so they'll run in parallel, and then returns the result returned by the
          child workflow method.
        </para>
        <para>
          Notice that we specified the <legacyBold>run</legacyBold> as the name for the child workflow
          method and <legacyBold>run-activity</legacyBold> for the activity method.  These map to the 
          names specified in the interface method attributes.
        </para>
        <para>
          Then we start the workflow anbd activity methods, passing any necessary parameters.  Notice that
          that we specified the <codeInline>string</codeInline> as the generic parameter to the child
          workflow call.  This indicates that we're expecting the child to return a string.
        </para>
        <para>
          Finally, we await the futures by calling <codeInline>GetAsync()</codeInline>.  This waits for the
          operation to complete and returns the operation result if any.
        </para>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference qualifyHint="false">N:Neon.Cadence</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
