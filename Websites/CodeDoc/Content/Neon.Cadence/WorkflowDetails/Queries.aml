<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Cadence-Workflow-Queries" -->
<topic id="9dad47bc-7aa4-4979-9a5b-c68d10b230a7" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
    </introduction>

    <section>
      <content>
        <para>
          Cadence allow you to query a workflow's state.  For example you might want to know 
          how a workflow is progressing.  To accomplish this, you define a query method that
          may optionally accept parameters and that returns the result.  Here's an example:
        </para>
        <code source="%NF_SNIPPETS%\Cadence\Snippets.Cadence.HelloWorld\QueryWorkflow.cs" language="c#" tabSize="4"/>
        <para>
          This sample defines the <codeInline>IMyWorkflow</codeInline> interface with a query
          method.  Note that this method must be tagged by a <codeEntityReference qualifyHint="false">T:Neon.Cadence.QueryMethodAttribute</codeEntityReference>
          specifying unique name identifying the query method within the workflow.  Cadence allows workflows to have
          multiple query methods and this name is use to distunguish between them.
        </para>
        <para>
          Query methods are only allowed to return workflow state, they <legacyBold>must never modify workflow state</legacyBold>.
          In this example, the workflow has a field it updates with the current state as the workflow progresses.
          The query method simply returns this field value.  Near the bottom of the sample, you can see the program invoke
          the workflow and then query it a few times, writing the current status to the console.
        </para>
        <para>
          Workflow queries can accept parameters if needed and return any serializable type.
        </para>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference qualifyHint="false">N:Neon.Cadence</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
