<?xml version="1.0" encoding="utf-8"?>
<!-- topic-filename="Neon.Cadence-Workflow-CodingRules" -->
<topic id="47a2af19-5f1f-4c5f-853e-88d9bc439d5f" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
    </introduction>

    <section>
      <content>
        <para>
          Workflow entry point methods must follow certain coding rules so that Cadence will be able to do its
          magic.  You must code your workflow methods such that they are absolutely deterministic and repeatable.
          Your workflows must make the same decisions the first time it's invoked as it would if Cadence had
          to restart the workflow and replay operations from history to restore the workflow to its latest state.
        </para>
        <para>
          You'll need to follow these rules:
        </para>
        <list class="ordered">
          <listItem>
            <para>
              Never reference static global propeties or methods whose values may change of the course of the workflow
              execution or that may change if the workflow is relocated from one machine to another.  Use activtities
              instead for these.  Activtities record their result to workflow history the first time they're called
              and return the same result from history on subsequent calls.
            </para>
          </listItem>
          <listItem>
            <para>
              Never call non-deterministic methods that return things like GUIDs or random numbers directly
              from your workflow code.  These will typically return different results on subsequent calls
              and this would break the workflow repeatability requirement.  Instead, use methods like
              <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Cadence.Workflow.NewGuidAsync</codeEntityReference>,
              <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Cadence.Workflow.NextRandomAsync</codeEntityReference> or
              <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Cadence.Workflow.NextRandomBytesAsync(System.Int32)</codeEntityReference>.
              These methods ensure the result is recorded to history on the first call and returned from
              history on subseqent calls.
            </para>
          </listItem>
          <listItem>
            <para>
              Never perform network, I/O, database or network operations directly from workflow code.  These operations are generally
              not deterministic: network packets get lost, database content can change, REST APIs can be down or modified, and files 
              can be modified or deleted out from under you.  Perform these operations in activities so they'll be recorded
              to history.
            </para>
          </listItem>
          <listItem>
            <para>
              Never use things like <codeEntityReference qualifyHint="false" autoUpgrade="true">P:System.DateTime.Now</codeEntityReference>
              to obtain the current time and date.  This is a variation of rule #1.  This property will likely return a different value
              every time it's called.  Use <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Cadence.Workflow.UtcNowAsync</codeEntityReference>
              or call an activity.
            </para>
          </listItem>
          <listItem>
            <para>
              Workflows must never create and execute additional tasks in parallel.  You must immediately <codeInline>await</codeInline>
              all async methods in your workflow.  Not doing this implicitly starts a parallel task and the completion order of tasks
              (or any multi-thread operation) is non-deterministic.  You can run activities and child workflows in parallel though via
              <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Cadence.Workflow.NewActivityFutureStub``1(System.String,Neon.Cadence.ActivityOptions)</codeEntityReference> and
              <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Cadence.Workflow.NewChildWorkflowFutureStub``1(System.String,Neon.Cadence.ChildWorkflowOptions)</codeEntityReference>.
            </para>
          </listItem>
          <listItem>
            <para>
              Workflows must not execute code on new threads.
            </para>
          </listItem>
          <listItem>
            <para>
              Workflows must not call things like <codeEntityReference qualifyHint="false" autoUpgrade="true">M:System.Threading.Thread.Sleep(System.TimeSpan)</codeEntityReference>
              or <codeEntityReference qualifyHint="false" autoUpgrade="true">M:System.Threading.Tasks.Thread.DelayAsync(System.TimeSpan)</codeEntityReference>.
              Use <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Cadence.Workflow.SleepAsync(System.TimeSpan)</codeEntityReference> or
              <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Cadence.Workflow.SleepUntilUtcAsync(System.DateTime)</codeEntityReference> instead.
            </para>
          </listItem>
          <listItem>
            <para>
              You'll need to take care when releasing updated workflow code because the history for workflows
              already in flight may not match up with the changed algorithm.  You can use
              <codeEntityReference qualifyHint="false" autoUpgrade="true">M:Neon.Cadence.Workflow.GetVersionAsync(System.String,System.Int32,System.Int32)</codeEntityReference>
              in your upgraded workflow to detect whether to implement the original algorithm for
              a workflow execution or to implement the new algorithm.
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
