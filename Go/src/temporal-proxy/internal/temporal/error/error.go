//-----------------------------------------------------------------------------
// FILE:		errors.go
// CONTRIBUTOR: John C Burns
// COPYRIGHT:	Copyright (c) 2016-2019 by neonFORGE, LLC.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package proxyerror

import (
	"fmt"

	"go.temporal.io/temporal"
)

type (

	// TemporalError is a struct used to pass errors
	// generated by calls to the temporal server from the
	// temporal-proxy to the Neon.Temporal Library.
	TemporalError struct {
		String *string `json:"String"`
		Type   *string `json:"Type"`
	}
)

// NewTemporalErrorEmpty is the default constructor for a TemporalError.
//
// returns *TemporalError -> pointer to a newly initialized TemporalError
// in memory.
func NewTemporalErrorEmpty() *TemporalError {
	return new(TemporalError)
}

// NewTemporalError is the constructor for a TemporalError
// when supplied parameters.
//
// param err error -> error to set.
//
// param errorType ...interface{} -> the temporal error type.
func NewTemporalError(err error, errType ...TemporalErrorType) *TemporalError {
	temporalError := NewTemporalErrorEmpty()
	if err == nil {
		return nil
	}
	errStr := err.Error()
	temporalError.String = &errStr

	if len(errType) > 0 {
		temporalError.SetType(errType[0])
	} else {
		if temporal.IsCanceledError(err) {
			temporalError.SetType(Cancelled)
		} else if temporal.IsCustomError(err) {
			temporalError.SetType(Custom)
		} else if temporal.IsGenericError(err) {
			temporalError.SetType(Generic)
		} else if temporal.IsPanicError(err) {
			temporalError.SetType(Panic)
		} else if temporal.IsTerminatedError(err) {
			temporalError.SetType(Terminated)
		} else if temporal.IsTimeoutError(err) {
			temporalError.SetType(Timeout)
		} else {
			temporalError.SetType(Custom)
		}
	}

	return temporalError
}

// GetType gets the TemporalErrorType from a TemporalError
// instance.
//
// returns TemporalErrorType -> the corresponding error type to the
// string representing the error type in a TemporalError instance
func (c *TemporalError) GetType() TemporalErrorType {
	if c.Type == nil {
		err := fmt.Errorf("no error type set")
		panic(err)
	}

	switch *c.Type {
	case "cancelled":
		return Cancelled
	case "custom":
		return Custom
	case "generic":
		return Generic
	case "panic":
		return Panic
	case "terminated":
		return Terminated
	case "timeout":
		return Timeout
	default:
		err := fmt.Errorf("unrecognized error type %v", *c.Type)
		panic(err)
	}
}

// SetType sets the *string to the corresponding TemporalErrorType
// in a TemporalError instance
//
// param errorType TemporalErrorType -> the TemporalErrorType to set as a string
// in a TemporalError instance
func (c *TemporalError) SetType(errorType TemporalErrorType) {
	var typeString string
	switch errorType {
	case Cancelled:
		typeString = "cancelled"
	case Custom:
		typeString = "custom"
	case Generic:
		typeString = "generic"
	case Panic:
		typeString = "panic"
	case Terminated:
		typeString = "terminated"
	case Timeout:
		typeString = "timeout"
	default:
		err := fmt.Errorf("unrecognized error type %s", errorType)
		panic(err)
	}
	c.Type = &typeString
}

// ToString returns the string representation of a TemporalError
//
// returns string -> a TemporalError as a string (TemporalError.String field)
func (c *TemporalError) ToString() string {
	return *c.String
}
