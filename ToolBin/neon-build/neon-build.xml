<?xml version="1.0"?>
<doc>
    <assembly>
        <name>neon-build</name>
    </assembly>
    <members>
        <member name="T:NeonBuild.KubeClientPlatform">
            <summary>
            Enumerates the supported Kubernetes client platforms.
            </summary>
        </member>
        <member name="F:NeonBuild.KubeClientPlatform.Windows">
            <summary>
            Windows.
            </summary>
        </member>
        <member name="F:NeonBuild.KubeClientPlatform.Osx">
            <summary>
            OSX (aka macOS)
            </summary>
        </member>
        <member name="T:NeonBuild.KubeSetupException">
            <summary>
            Thrown for Kubernetes setup related problems.
            </summary>
        </member>
        <member name="M:NeonBuild.KubeSetupException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">Optionally specifies an inner exception.</param>
        </member>
        <member name="T:NeonBuild.KubeSetupHelper">
            <summary>
            Kubernetes setup related information and actions (for <b>ksetup</b>).
            </summary>
        </member>
        <member name="M:NeonBuild.KubeSetupHelper.ParsePlatform(System.String)">
            <summary>
            Parses a target platform string.
            </summary>
            <param name="platform">The platform string.</param>
            <returns>The <see cref="T:NeonBuild.KubeClientPlatform"/> value.</returns>
            <exception cref="T:NeonBuild.KubeSetupException">Thrown when required environment variables aren't set or are invalid.</exception>
        </member>
        <member name="M:NeonBuild.KubeSetupHelper.#ctor(NeonBuild.KubeClientPlatform,Neon.Common.CommandLine,System.Action{System.String},System.Action{System.String})">
            <summary>
            Constructor.
            </summary>
            <param name="platform">The target client platform.</param>
            <param name="commandLine">The command line where version and other options are parsed.</param>
            <param name="outputAction">Optionally specifies an action to receive logged output.</param>
            <param name="errorAction">Optionally specifies an action to receive logged error output.</param>
            <exception cref="T:NeonBuild.KubeSetupException">Thrown when required environment variables aren't set or are invalid.</exception>
            <remarks>
            You can pass callbacks to the <paramref name="outputAction"/> and/or <paramref name="errorAction"/>
            parameters to be receive logged output and errors.  Note that <paramref name="outputAction"/> will receive
            both STDERR and STDOUT text if <paramref name="errorAction"/> isn't specified.
            </remarks>
        </member>
        <member name="M:NeonBuild.KubeSetupHelper.#ctor(System.String,Neon.Common.CommandLine,System.Action{System.String},System.Action{System.String})">
            <summary>
            Constructor.
            </summary>
            <param name="platform">The target client platform as a string.</param>
            <param name="commandLine">The command line where version and other options are parsed.</param>
            <param name="outputAction">Optional action to be called when text lines are written to STDOUT.</param>
            <param name="errorAction">Optional action to be called when text lines are written to STDERR.</param>
            <exception cref="T:NeonBuild.KubeSetupException">Thrown when required environment variables aren't set or are invalid or if the platform is not valid.</exception>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.Platform">
            <summary>
            Returns the target client platform.
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.CacheRoot">
            <summary>
            Returns the cache folder path (from the <c>NF_CACHE</c> environment variable),
            ensuring that the folder exists.
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.CacheVM">
            <summary>
            Returns the virtual machine cache folder, ensuring that the folder exists.
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.CacheOsx">
            <summary>
            Returns the OSX cache folder, ensuring that the folder exists.
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.CacheWindows">
            <summary>
            Returns the Windows cache folder, ensuring that the folder exists.
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.CacheUbuntu">
            <summary>
            Returns the Ubuntu cache folder, ensuring that the folder exists.
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.CachePowerShellFolder">
            <summary>
            Returns the path to the cached PowerShell setup folder.
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.Ubuntu1604VhdxUrl">
            <summary>
            URL to the latest preconfigured Ubuntu 16.04 Hyper-V virtual machine VHDX file.
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.Ubuntu1604BaseName">
            <summary>
            The name of the base Ubuntu 16.04 image downloaded to the cache (VHDX file).
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.Ubuntu1604Username">
            <summary>
            The root username for the <see cref="P:NeonBuild.KubeSetupHelper.Ubuntu1604VhdxUrl"/> virtual machine image.
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.Ubuntu1604Password">
            <summary>
            The root password for the <see cref="P:NeonBuild.KubeSetupHelper.Ubuntu1604VhdxUrl"/> virtual machine image.
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.KubeVersion">
            <summary>
            Returns the target <b>kubectl</b> tool version (from the <c>NF_KUBE_VERSION</c> environment variable).
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.KubeCtlUrl">
            <summary>
            Returns the download URL for the KUBECTL executable.
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.UserFolder">
            <summary>
            Returns the path to the current user folder.
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.SourceRepoFolder">
            <summary>
            Returns the path to the root KSETUP source folder.
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.BuildFolder">
            <summary>
            Returns the path to the build output folder (from the <c>NF_BUILD</c> environment variable).
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.ExternalFolder">
            <summary>
            Returns the path to the project's external folder.
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.VirtualBoxWindowsUrl">
            <summary>
            Returns the URI to be used to download the Windows VirtualBox installer.
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.WinInstallerFolder">
            <summary>
            Returns path to the <b>WinInstaller</b> project folder.
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.InnoSetupCompilerPath">
            <summary>
            Returns the path to the Inno Setup compiler.
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.PowerShell">
            <summary>
            Returns the <see cref="P:NeonBuild.KubeSetupHelper.PowerShell"/> client to be used for configuration.
            </summary>
            <exception cref="T:System.NotImplementedException">Thrown if PowerShell is not available on the current operating system.</exception>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.PlatformFolder">
            <summary>
            Returns the subfolder name to use for the client platform.
            </summary>
            <returns>The folder name.</returns>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.CachedKubeCtlPath">
            <summary>
            Returns the fully qualified path to the downloaded <b>kubectl</b> command line
            executable for a client platform.
            </summary>
            <returns>The file path.</returns>
        </member>
        <member name="M:NeonBuild.KubeSetupHelper.Clear">
            <summary>
            Clears any cached setup related components.
            </summary>
        </member>
        <member name="M:NeonBuild.KubeSetupHelper.Download">
            <summary>
            Downloads the required setup components for the target client platform if
            these files aren't already cached.
            </summary>
        </member>
        <member name="M:NeonBuild.KubeSetupHelper.SetToolPath">
            <summary>
            Adds the cached component folders for the current versions to the PATH environment variable
            so that we can execute the tools without a path prefix.
            </summary>
        </member>
        <member name="M:NeonBuild.KubeSetupHelper.PushLogEnable(System.Boolean)">
            <summary>
            Pushes the log output enabled state.
            </summary>
            <param name="enabled">The new state (ignored if output is already disabled).</param>
        </member>
        <member name="M:NeonBuild.KubeSetupHelper.PopLogEnable">
            <summary>
            Pops the log output enabled state.
            </summary>
        </member>
        <member name="P:NeonBuild.KubeSetupHelper.LogEnabled">
            <summary>
            Returns <c>true</c> if log output is enabled.
            </summary>
        </member>
        <member name="M:NeonBuild.KubeSetupHelper.LogLine(System.String)">
            <summary>
            Writes a line of text to the standard output.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:NeonBuild.KubeSetupHelper.Log(System.String)">
            <summary>
            Writes text to the standard output.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:NeonBuild.KubeSetupHelper.LogErrorLine(System.String)">
            <summary>
            Writes a line of text to error output.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:NeonBuild.KubeSetupHelper.LogError(System.String)">
            <summary>
            Writes text to the standard error output.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:NeonBuild.KubeSetupHelper.Execute(System.String,System.String,System.Boolean)">
            <summary>
            Executes a program, wiring up the the standard output and error streams so they
            can be intercepted via the output and error actions.
            </summary>
            <param name="path">Path to the executable file.</param>
            <param name="args">The arguments.</param>
            <param name="ignoreError">Optionally specifies that non-zero exit codes are to be ignored.</param>
            <returns>The execution result.</returns>
            <exception cref="T:Neon.Common.ExecuteException">Thrown for non-zero process exit codes and <paramref name="ignoreError"/><c>=false</c>.</exception>
        </member>
        <member name="M:NeonBuild.KubeSetupHelper.PowerShellExecute(System.String,System.Boolean,System.Boolean)">
            <summary>
            Executes a PowerShell command that returns a simple string result.
            </summary>
            <param name="command">The command string.</param>
            <param name="noEnvironmentVars">
            Optionally disables that environment variable subsitution (defaults to <c>false</c>).
            </param>
            <param name="logOutput">Enables logging of standard output (errors are always logged).</param>
            <returns>The command response.</returns>
            <exception cref="T:Neon.Windows.PowerShellException">Thrown if the command failed.</exception>
            <exception cref="T:System.NotImplementedException">Thrown for non-Windows operating system where PowerShell isn't available.</exception>
        </member>
        <member name="M:NeonBuild.KubeSetupHelper.PowerShellExecuteJson(System.String,System.Boolean,System.Boolean)">
            <summary>
            Executes a PowerShell command that returns result JSON, subsituting any
            environment variable references of the form <b>${NAME}</b> and returning a list 
            of <c>dynamic</c> objects parsed from the table with the object property
            names set to the table column names and the values parsed as strings.
            </summary>
            <param name="command">The command string.</param>
            <param name="noEnvironmentVars">
            Optionally disables that environment variable subsitution (defaults to <c>false</c>).
            </param>
            <param name="logOutput">Enables logging of standard output (errors are always logged).</param>
            <returns>The list of <c>dynamic</c> objects parsed from the command response.</returns>
            <exception cref="T:Neon.Windows.PowerShellException">Thrown if the command failed.</exception>
        </member>
        <member name="M:NeonBuild.KubeSetupHelper.DownloadToCache(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Downloads a file to the cache if it's not already present.
            </summary>
            <param name="uri">The source URI.</param>
            <param name="path">The relative target file path.</param>
            <param name="message">The optional message to log when doenloading the file.</param>
            <param name="force">Optionally specifies that the file should be redownloaded if it already exists.</param>
            <returns>The fully qualified path to the downloaded file.</returns>
        </member>
        <member name="T:NeonBuild.Program">
            <summary>
            Hosts the program entrypoint.
            </summary>
        </member>
        <member name="M:NeonBuild.Program.Main(System.String[])">
            <summary>
            This is the program entrypoint.
            </summary>
            <param name="args">The command line arguments.</param>
        </member>
        <member name="P:NeonBuild.Program.RepoRootFolder">
            <summary>
            Returns the path to the neonKUBE local repository root folder.
            </summary>
        </member>
        <member name="P:NeonBuild.Program.DefaultKubernetesVersion">
            <summary>
            Returns the default version of Kubernetes to be installed.
            </summary>
        </member>
        <member name="M:NeonBuild.Program.EnsureOption(System.String,System.String)">
            <summary>
            Ensures that a command line option is present.
            </summary>
            <param name="option">The option name.</param>
            <param name="defValue">Optionally specifies the default value.</param>
        </member>
        <member name="M:NeonBuild.Program.Exit(System.Int32)">
            <summary>
            Terminates the program with a specified exit code.
            </summary>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:NeonBuild.Program.PackVersion(Neon.Common.CommandLine)">
            <summary>
            Reads a Nuget package version string from the first line of a text file and
            then updates the version section in a CSPROJ file or NUSPEC with the version.  
            This is useful for batch publishing multiple libraries.
            </summary>
            <param name="commandLine">The command line.</param>
        </member>
        <member name="M:NeonBuild.Program.GTag(Neon.Common.CommandLine)">
            <summary>
            Loads a Google Analytics [gtag.js] file and inserts it at the top of the <b>head</b>
            section of the HTML pages found in a folder.
            </summary>
            <param name="commandLine">The command line.</param>
        </member>
        <member name="T:NeonBuild.WinInstallBuilder">
            <summary>
            Builds the <b>ksetup</b> installer for Windows.
            </summary>
        </member>
        <member name="M:NeonBuild.WinInstallBuilder.#ctor(NeonBuild.KubeSetupHelper)">
            <summary>
            Constructor.
            </summary>
            <param name="setupHelper">The Kubernetes settup helper.</param>
        </member>
        <member name="P:NeonBuild.WinInstallBuilder.Helper">
            <summary>
            Returns the setup helper.
            </summary>
        </member>
        <member name="M:NeonBuild.WinInstallBuilder.Run">
            <summary>
            Builds the installer.
            </summary>
        </member>
    </members>
</doc>
