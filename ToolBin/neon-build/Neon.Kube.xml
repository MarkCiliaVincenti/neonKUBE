<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.Kube</name>
    </assembly>
    <members>
        <member name="T:Neon.Kube.DesktopClient">
            <summary>
            <para>
            Implements an HTTP client that will be used by the <b>neon-cli</b>
            tool for communicating with the neonDESKTOP application running
            on the same machine.
            </para>
            <note>
            Calls to the desktop application will fail silently if the desktop
            doesn't respond because the desktop may not be running and these
            are really just nice status notifications, not anything critical.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Kube.DesktopClient.#ctor(System.String,System.TimeSpan)">
            <summary>
            Internal constructor.
            </summary>
            <param name="serviceUri">Base URI for the desktop API service.</param>
            <param name="timeout">Optional request timeout (defaults to <b>500ms</b>).</param>
        </member>
        <member name="M:Neon.Kube.DesktopClient.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.DesktopClient.UpdateUIAsync">
            <summary>
            Signals the desktop application to update its UI state.  This
            will generally be called after <b>neon-cli</b> has modified
            the cluster connection status.
            </summary>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <note>
            This method will fail silently if the desktop application does
            not respond.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.DesktopClient.Login">
            <summary>
            Signals to the Desktop application that the workstation has logged
            into a cluster.
            </summary>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <note>
            This method will fail silently if the desktop application does
            not respond.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.DesktopClient.Logout">
            <summary>
            Signals to the Desktop application that the workstation has logged
            out of a cluster.
            </summary>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <note>
            This method will fail silently if the desktop application does
            not respond.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.DesktopClient.StartOperationAsync(System.String)">
            <summary>
            Signals the desktop application that a long-running operation such
            as cluster setup is starting.
            </summary>
            <param name="summary">A brief summary of the operation.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <note>
            This method will fail silently if the desktop application does
            not respond.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.DesktopClient.EndOperationAsync(System.String,System.Boolean)">
            <summary>
            Signals the desktop application the a long-running operation has
            completed.
            </summary>
            <param name="completedToast">
            Optionally specifies text to be displayed as toast by the 
            desktop application.
            </param>
            <param name="failed">Optionally indicates that the operation failed.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <note>
            This method will fail silently if the desktop application does
            not respond.
            </note>
            </remarks>
        </member>
        <member name="T:Neon.Kube.KubeClientConfig">
            <summary>
            Used by the neonKUBE client desktop and command line tools to 
            manage the client side configuration.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeClientConfig.#ctor">
            <summary>
            Default constuctor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientConfig.Schema">
            <summary>
            The schema version for this state file.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientConfig.InstallationId">
            <summary>
            The globally unique client installation ID.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientConfig.StatusPollSeconds">
            <summary>
            The interval the desktop application uses to poll for changes to the Kubernetes
            cluster configuration state.  This defaults to <b>1 second</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientConfig.DesktopServicePort">
            <summary>
            The local network port where the neonDESKTOP application exposes
            the desktop service providing integration for the <b>neon-cli</b>
            command line tool.  This defaults to <see cref="F:Neon.Kube.KubeConst.DesktopServicePort"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientConfig.KubectlProxyPort">
            <summary>
            The local network port where <b>kubectl proxy</b> will listen
            and forward traffic to the Kubernetes API server.  This 
            defaults to <see cref="F:Neon.Kube.KubeConst.KubectlProxyPort"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientConfig.KubeDashboardProxyPort">
            <summary>
            The local network port used for proxying requests to
            the Kubernetes dashboard for the current cluster.  This 
            defaults to <see cref="F:Neon.Kube.KubeConst.KubeDashboardProxyPort"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientConfig.KibanaDashboardProxyPort">
            <summary>
            The local network port used for proxying requests to
            the Kibanarnetes dashboard for the current cluster.  This 
            defaults to <see cref="F:Neon.Kube.KubeConst.KibanaDashboardProxyPort"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientConfig.PrometheusDashboardProxyPort">
            <summary>
            The local network port used for proxying requests to
            the Prometheusrnetes dashboard for the current cluster.  This 
            defaults to <see cref="F:Neon.Kube.KubeConst.PrometheusDashboardProxyPort"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientConfig.KialiDashboardProxyPort">
            <summary>
            The local network port used for proxying requests to
            the Kialirnetes dashboard for the current cluster.  This 
            defaults to <see cref="F:Neon.Kube.KubeConst.KialiDashboardProxyPort"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientConfig.GrafanaDashboardProxyPort">
            <summary>
            The local network port used for proxying requests to
            the Grafanarnetes dashboard for the current cluster.  This 
            defaults to <see cref="F:Neon.Kube.KubeConst.GrafanaDashboardProxyPort"/>.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeClientConfig.Validate">
            <summary>
            Ensures that the state is valid.
            </summary>
        </member>
        <member name="T:Neon.Kube.PortForward">
            <summary>
            <para>
            Implements a reverse HTTP or proxy between an endpoint on the local machine
            and an endpoint on a remote machine.
            </para>
            <note>
            This is supported <b>only on Windows</b>.
            </note>
            </summary>
            <remarks>
            <para>
            Use the <see cref="T:Neon.Kube.PortForward"/> constructor to create a proxy.  You'll
            pass the local and remote endpoints and optional request and response 
            handlers.
            </para>
            <para>
            The request handler will be called when a request is received on the local
            endpoint give the handler a chance to modify the request before it is
            forwarded on to the remote endpoint.  The response handler is called when
            a response is received from the remote endpoint, giving the handler a
            chance to examine and possibly modify the response before it is returned
            to the caller.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.PortForward.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.PortForward.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Constructs a port forward.
            </summary>
            <param name="serviceName">The service to connect to.</param>
            <param name="localPort">The local port.</param>
            <param name="remotePort">The remote port.</param>
            <param name="namespace">The namespace which the service is running.</param>
            Optionally specifies an acceptable server certificate.  This can be used 
            as a way to allow access for a specific self-signed certificate.
        </member>
        <member name="M:Neon.Kube.PortForward.Dispose">
            <ingeritdoc/>
        </member>
        <member name="T:Neon.Kube.RemoteOperation">
            <summary>
            The payload passed to the desktop API server via <see cref="M:Neon.Kube.DesktopClient.StartOperationAsync(System.String)"/>
            and <see cref="M:Neon.Kube.DesktopClient.EndOperationAsync(System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.RemoteOperation.ProcessId">
            <summary>
            The caller's process ID.  The desktop application uses this to
            determine whether the caller has terminated before signalling
            that the operation has completed.
            </summary>
        </member>
        <member name="P:Neon.Kube.RemoteOperation.Summary">
            <summary>
            A brief summary of the operation being performed.
            </summary>
        </member>
        <member name="P:Neon.Kube.RemoteOperation.CompletedToast">
            <summary>
            Optionally specifies the text to be displayed by the desktop application
            as toast for calls to <see cref="M:Neon.Kube.DesktopClient.EndOperationAsync(System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.RemoteOperation.Failed">
            <summary>
            Indicates whether the operation failed.
            </summary>
        </member>
        <member name="T:Neon.Kube.ReverseProxy">
            <summary>
            <para>
            Implements a reverse HTTP or proxy between an endpoint on the local machine
            and an endpoint on a remote machine.
            </para>
            <note>
            This is supported <b>only on Windows</b>.
            </note>
            </summary>
            <remarks>
            <para>
            Use the <see cref="T:Neon.Kube.ReverseProxy"/> constructor to create a proxy.  You'll
            pass the local and remote endpoints and optional request and response 
            handlers.
            </para>
            <para>
            The request handler will be called when a request is received on the local
            endpoint give the handler a chance to modify the request before it is
            forwarded on to the remote endpoint.  The response handler is called when
            a response is received from the remote endpoint, giving the handler a
            chance to examine and possibly modify the response before it is returned
            to the caller.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.ReverseProxy.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.ReverseProxy.#ctor(System.Int32,System.Int32,System.String,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Action{Microsoft.Net.Http.Server.RequestContext},System.Action{Microsoft.Net.Http.Server.RequestContext})">
            <summary>
            Constructs a reverse proxy.
            </summary>
            <param name="localPort">The local port.</param>
            <param name="remotePort">The remote port.</param>
            <param name="remoteHost">Optionally specifies the remote hostname or IP address.</param>
            <param name="remoteTls">Optionally indicates that the remote endpoint required TLS.</param>
            <param name="validCertificate">
            Optionally specifies an acceptable server certificate.  This can be used 
            as a way to allow access for a specific self-signed certificate.  Passing 
            a certificate implies <paramref name="remoteTls"/><c>=true</c>.
            </param>
            <param name="clientCertificate">
            Optionally specifies a client certificate.  Passing a certificate implies
            <paramref name="remoteTls"/><c>=true</c>.
            </param>
            <param name="requestHandler">Optional request hook.</param>
            <param name="responseHandler">Optional response hook.</param>
        </member>
        <member name="M:Neon.Kube.ReverseProxy.Dispose">
            <ingeritdoc/>
        </member>
        <member name="M:Neon.Kube.ReverseProxy.GetBuffer">
            <summary>
            Returns a buffer from the pool or allocates a new buffer if
            the pool is empty.
            </summary>
        </member>
        <member name="M:Neon.Kube.ReverseProxy.ReleaseBuffer(System.Byte[])">
            <summary>
            Releases a buffer by adding it back to the pool.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Neon.Kube.ReverseProxy.RequestProcessor">
            <summary>
            Handles received requests.
            </summary>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:Neon.Kube.ClusterDefinitionException">
            <summary>
            Signals cluster definition errors.
            </summary>
        </member>
        <member name="M:Neon.Kube.ClusterDefinitionException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.ClusterDefinitionException.#ctor(System.String)">
            <summary>
            Consstructs an instance with a message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Neon.Kube.KubeException">
            <summary>
            Describes a cluster related related error.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs and instance with a message and an optional inner exception.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The optional inner exception.</param>
        </member>
        <member name="T:Neon.Kube.VersionException">
            <summary>
            Indicates a client or other version incompatiblity.
            </summary>
        </member>
        <member name="M:Neon.Kube.VersionException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.VersionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs and instance with a message and an optional inner exception.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The optional inner exception.</param>
        </member>
        <member name="T:Neon.Kube.HeadendClient">
            <summary>
            Provides access to neonKUBE headend services.
            </summary>
        </member>
        <member name="M:Neon.Kube.HeadendClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.HeadendClient.GetSetupInfoAsync(Neon.Kube.ClusterDefinition)">
            <summary>
            Returns information required for setting up a Kubernetes cluster.  This
            includes things like the URIs to be used for downloading the <b>kubectl</b>
            and <b>kubeadm</b> tools.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <returns>A <see cref="T:Neon.Kube.KubeSetupInfo"/> with the information.</returns>
        </member>
        <member name="M:Neon.Kube.HeadendClient.GetClientInfoAsync">
            <summary>
            Returns client related information such as the location of the help and GitHub
            repo pages and the availability of updates.
            </summary>
            <returns>A <see cref="T:Neon.Kube.KubeClientInfo"/>.</returns>
        </member>
        <member name="M:Neon.Kube.HeadendClient.GetHelmChartZipAsync(System.String,System.String)">
            <summary>
            Gets a helm chart from the NeonKube repository and returns it as a zip file
            </summary>
            <param name="chartName">The Helm chart name.</param>
            <param name="branch">The branch to get the chart from. Defaults to master.</param>
            <returns>The ZIP file encoded into bytes.</returns>
        </member>
        <member name="M:Neon.Kube.HeadendClient.AddGitFilesToZipAsync(System.IO.Compression.ZipArchive,System.String,System.String)">
            <summary>
            Adds GitHub files from a directory to a ZIP archive.
            </summary>
            <param name="zip">The zip file.</param>
            <param name="directory">The directory to add.</param>
            <param name="baseDirectory">The base directory.</param>
            <returns>The <see cref="T:System.IO.Compression.ZipArchive"/>.</returns>
        </member>
        <member name="M:Neon.Kube.HeadendClient.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Kube.KubeClientInfo">
            <summary>
            Describes client related information such as help, GitHub repo links as well
            as available update.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeClientInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientInfo.HelpUrl">
            <summary>
            Returns the neonKUBE help URL.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientInfo.GitHubUrl">
            <summary>
            Returns the neonKUBE GitHub repository URL.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientInfo.ReleaseNotesUrl">
            <summary>
            Returns the URL for the installed release notes.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientInfo.UpdateVersion">
            <summary>
            Returns the version for the latest available neonKUBE update.
            This will be <c>null</c> when there are no updates.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientInfo.UpdateUrl">
            <summary>
            Returns the URL for the latest available neonKUBE update.
            This will be <c>null</c> when there are no updates.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientInfo.UpdateReleaseNotesUrl">
            <summary>
            Returns the URL for the latest available neonKUBE update
            release notes.  This will be <c>null</c> when there are 
            no updates.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientInfo.VmTemplateSitePrefix">
            <summary>
            Returns the URI prefix for the web server with the neonKUBE virtual machine
            templates.  Simply append a template file name like <b>hyperv-ubuntu-20.04.latest.vhdx</b>
            to this to get the URI for a specific template.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeSetupInfo">
            <summary>
            Describes the details required to setup a Kubernetes cluster.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeSetupInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.LinuxTemplateUri">
            <summary>
            Returns the URI for the Linux node template for the specified hosting enviroment 
            and Linux distribution and version.  This may be null for some hosting environments
            like bare metal and clouds.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.KubeCtlLinuxUri">
            <summary>
            The <b>kubectl</b> binary download URI for Linux.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.KubeCtlOsxUri">
            <summary>
            The <b>kubectl</b> binary download URI for OS/X.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.KubeCtlWindowsUri">
            <summary>
            The <b>kubectl</b> binary download URI for Windows.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.KubeAdmLinuxUri">
            <summary>
            The <b>kubeadm</b> binary download URI for Linux.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.KubeletLinuxUri">
            <summary>
            The <b>kubelet</b> binary download URI for Linux.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.DockerPackageUri">
            <summary>
            The Docker package for Ubuntu.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.HelmLinuxUri">
            <summary>
            The Helm binary URL for Linux.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.HelmOsxUri">
            <summary>
            The Helm binary URL for OS/X.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.HelmWindowsUri">
            <summary>
            The Helm binary URL for Windows.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.CalicoRbacYamlUri">
            <summary>
            The Calico RBAC rules download (YAML for kubectl).
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.CalicoSetupYamlUri">
            <summary>
            The Calico setup download (YAML for kubectl).
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.IstioLinuxUri">
            <summary>
            The Istio binary URL for Linux.
            </summary>
        </member>
        <member name="T:Neon.Kube.HostingManager">
            <summary>
            Base class for environment specific hosting managers. 
            </summary>
        </member>
        <member name="M:Neon.Kube.HostingManager.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Neon.Kube.HostingManager.Dispose">
            <summary>
            Releases any important resources associated with the instance.
            </summary>
        </member>
        <member name="M:Neon.Kube.HostingManager.Dispose(System.Boolean)">
            <summary>
            Releases any important resources associated with the instance.
            </summary>
            <param name="disposing">Pass <c>true</c> if the instance is being disposed as opposed to being finalized.</param>
        </member>
        <member name="P:Neon.Kube.HostingManager.ShowStatus">
            <summary>
            Specifies whether the class should print setup status to the console.
            This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingManager.MaxParallel">
            <summary>
            The maximum number of nodes that will execute provisioning steps in parallel.  This
            defaults to <b>5</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingManager.WaitSeconds">
            <summary>
            Number of seconds to delay after specific operations (e.g. to allow services to stablize).
            This defaults to <b>0.0</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingManager.IsProvisionNOP">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.HostingManager.Validate(Neon.Kube.ClusterDefinition)">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Kube.HostingManager.RequiresAdminPrivileges">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.HostingManager.Provision(System.Boolean,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.HostingManager.AddPostProvisionSteps(Neon.Kube.SetupController{Neon.Kube.NodeDefinition})">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Kube.HostingManager.CanManageRouter">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.HostingManager.UpdatePublicIngress">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.HostingManager.EnablePublicSsh">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.HostingManager.DisablePublicSsh">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.HostingManager.GetSshEndpoint(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.HostingManager.GetDataDisk(Neon.Kube.SshProxy{Neon.Kube.NodeDefinition})">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Kube.HostingManagerFactory">
            <summary>
            Provides for the creation of <see cref="T:Neon.Kube.HostingManager"/> implementations
            for a target hosting environment.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingManagerFactory.Loader">
            <summary>
            <b>INTERNAL USE ONLY:</b> The driver providing low-level access to hosting
            manager implementations.  This is initialized by a call to <c>HostingLoader.Initialize()</c>
            defined withing the <b>Neon.Kube.Hosting</b> assembly.
            </summary>
        </member>
        <member name="M:Neon.Kube.HostingManagerFactory.#ctor(System.Action)">
            <summary>
            Constructor.
            </summary>
            <param name="loaderAction">
            The optional action that will initialize the static <see cref="P:Neon.Kube.HostingManagerFactory.Loader"/> property with
            the <see cref="T:Neon.Kube.IHostingLoader"/> implemention.
            </param>
        </member>
        <member name="M:Neon.Kube.HostingManagerFactory.CheckInitialized">
            <summary>
            Ensures that the factory has been initialized.
            </summary>
        </member>
        <member name="M:Neon.Kube.HostingManagerFactory.GetManager(Neon.Kube.ClusterProxy,Neon.Kube.KubeSetupInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.HostingManagerFactory.IsCloudEnvironment(Neon.Kube.HostingEnvironments)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.HostingManagerFactory.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Ensures that that a cluster definition is valid.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
        </member>
        <member name="T:Neon.Kube.HostingProviderAttribute">
            <summary>
            Use this attribute to identify <see cref="T:Neon.Kube.IHostingManager"/> class implementations
            so they can be discovered by the <see cref="T:Neon.Kube.HostingManager"/> class.
            </summary>
        </member>
        <member name="M:Neon.Kube.HostingProviderAttribute.#ctor(Neon.Kube.HostingEnvironments)">
            <summary>
            Constructor.
            </summary>
            <param name="environment">Specifies the target hosting environment.</param>
        </member>
        <member name="P:Neon.Kube.HostingProviderAttribute.Environment">
            <summary>
            Returns the target hosting environment supported by the tagged <see cref="T:Neon.Kube.IHostingManager"/>.
            </summary>
        </member>
        <member name="T:Neon.Kube.IHostingLoader">
            <summary>
            <b>INTERNAL USE ONLY:</b> This interface describes a low-level class implementations
            that are registered by the <b>Neon.Kube.Hosting</b> class library with 
            <see cref="T:Neon.Kube.HostingManager"/> to provide a way to access the various hosting
            implementations without having to bake this into the <b>Neon.Kube</b> assembly.
            </summary>
        </member>
        <member name="M:Neon.Kube.IHostingLoader.GetManager(Neon.Kube.ClusterProxy,Neon.Kube.KubeSetupInfo,System.String)">
            <summary>
            Returns the <see cref="T:Neon.Kube.HostingManager"/> for a specific environment.
            </summary>
            <param name="cluster">The cluster being managed.</param>
            <param name="setupInfo">Specifies the cluster setup information.</param>
            <param name="logFolder">
            The folder where log files are to be written, otherwise or <c>null</c> or 
            empty if logging is disabled.
            </param>
            <returns>
            The <see cref="T:Neon.Kube.HostingManager"/> or <c>null</c> if no hosting manager
            could be located for the specified cluster environment.
            </returns>
            <exception cref="T:Neon.Kube.KubeException">Thrown if the multiple managers implement support for the same hosting environment.</exception>
        </member>
        <member name="M:Neon.Kube.IHostingLoader.IsCloudEnvironment(Neon.Kube.HostingEnvironments)">
            <summary>
            Determines whether a hosting environment is hosted in the cloud.
            </summary>
            <param name="environment">The target hosting environment.</param>
            <returns><c>true</c> for cloud environments.</returns>
        </member>
        <member name="T:Neon.Kube.IHostingManager">
            <summary>
            Interface describing the hosting environment managers.
            </summary>
        </member>
        <member name="P:Neon.Kube.IHostingManager.IsProvisionNOP">
            <summary>
            Returns <c>true</c> if the provisioning operation actually does nothing.
            </summary>
        </member>
        <member name="M:Neon.Kube.IHostingManager.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Verifies that a cluster is valid for the hosting manager, customizing 
            properties as required.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if any problems were detected.</exception>
        </member>
        <member name="P:Neon.Kube.IHostingManager.RequiresAdminPrivileges">
            <summary>
            Returns <c>true</c> if provisoning requires that the user have
            administrator privileges.
            </summary>
        </member>
        <member name="M:Neon.Kube.IHostingManager.Provision(System.Boolean,System.String,System.String)">
            <summary>
            Creates and initializes the cluster resources such as the virtual machines,
            networks, load balancers, network security groups, public IP addresses etc.
            </summary>
            <param name="force">
            Indicates that any existing resources (such as virtual machines) 
            are to be replaced or overwritten during privisioning.  The actual interpretation
            of this parameter is specific to each hosting manager implementation.
            </param>
            <param name="secureSshPassword">
            The secure SSH password to be set for all node VMs. This is required.
            </param>
            <param name="orgSshPassword">
            The starting SSH password for the VMs.  This may be passed as <c>null</c> when
            the provisioning manager is able to configure the passwords when the VMs are
            born, such as in the cloud or when hosted via on-premise hypervisors.  This
            is currently used only by the bare metal hosting manager which will need to
            be able to log into existing nodes provisioned manually by the cluster operator.
            </param>
            <returns><c>true</c> on success.</returns>
            <remarks>
            <para>
            For the clusters that return <see cref="P:Neon.Kube.IHostingManager.CanManageRouter"/>=<c>true</c> (typically
            cloud managers  indicating that they can manage the upstream router or load balancer) 
            this method will leave the public SSH NAT rules in place so that cluster provisioning
            and setup will be able to establish SSH connections to each cluster node.  This is
            equivalent to calling <see cref="M:Neon.Kube.IHostingManager.EnablePublicSsh"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.IHostingManager.AddPostProvisionSteps(Neon.Kube.SetupController{Neon.Kube.NodeDefinition})">
            <summary>
            Adds any necessary post-provisioning steps to a setup controller.
            </summary>
            <param name="controller">The target setup controller.</param>
        </member>
        <member name="P:Neon.Kube.IHostingManager.CanManageRouter">
            <summary>
            Returns <c>true</c> if the hosting manage is capable of updating the upstream
            network router or load balancer.  Cloud based managers will return <c>true</c>
            whereas on-premise managers will return <c>false</c> because we don't have
            the ability to manage physical routers yet.
            </summary>
        </member>
        <member name="M:Neon.Kube.IHostingManager.UpdatePublicIngress">
            <summary>
            <para>
            Updates the cluster's load balancer or router to use the current set of
            ingress rules defined by <see cref="P:Neon.Kube.NetworkOptions.IngressRules"/>.  This
            also updates <see cref="P:Neon.Kube.NetworkOptions.EgressAddressRules"/> and public 
            SSH NAT mappings if those are currently enabled.
            </para>
            <note>
            This currently supported only by cloud hosting managers like for Azure,
            AWS, and Google.  This will do nothing for the on-premise hosting managers
            because we don't have the ability to manage physical routers yet.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Kube.IHostingManager.EnablePublicSsh">
            <summary>
            <para>
            Enables public SSH access for every node in the cluster, honoring source
            address limitations specified by <see cref="P:Neon.Kube.NetworkOptions.SshAddressRules"/>
            in the cluster definition.
            </para>
            <para>
            Each node will be assigned a public port that has a NAT rule directing SSH
            traffic to that specific node.  These ports will be in the range of
            <see cref="P:Neon.Kube.NetworkOptions.ReservedIngressStartPort"/> to <see cref="P:Neon.Kube.NetworkOptions.ReservedIngressEndPort"/>.
            <see cref="M:Neon.Kube.IHostingManager.GetSshEndpoint(System.String)"/> will return the external endpoint
            for nodes when external SSH is enabled. 
            </para>
            <note>
            This currently supported only by cloud hosting managers like: Azure,
            AWS, and Google.  This will do nothing for the on-premise hosting managers
            because we don't have the ability to manage physical routers yet.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Kube.IHostingManager.DisablePublicSsh">
            <summary>
            <para>
            Disables public SSH access for every node in the cluster, honoring source
            address limitations specified by <see cref="P:Neon.Kube.NetworkOptions.SshAddressRules"/>
            in the cluster definition.
            </para>
            <note>
            This currently supported only by cloud hosting managers like: Azure,
            AWS, and Google.  This will do nothing for the on-premise hosting managers
            because we don't have the ability to manage physical routers yet.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Kube.IHostingManager.GetSshEndpoint(System.String)">
            <summary>
            Returns the FQDN or IP address (as a string) and the port to use
            to establish a SSH connection to a specific node. 
            </summary>
            <param name="nodeName">The target node's name.</param>
            <returns>A <b>(string Address, int Port)</b> tuple.</returns>
            <remarks>
            This will return the direct private node endpoint by default.  If
            <see cref="M:Neon.Kube.IHostingManager.EnablePublicSsh"/> has been called and is supported by 
            the hosting manager, then this returns the public address of the
            cluster along with the public NAT port.
            </remarks>
        </member>
        <member name="M:Neon.Kube.IHostingManager.GetDataDisk(Neon.Kube.SshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Identifies the data disk for a node.  This returns the data disk's device 
            name when an unitialized data disk exists or "PRIMARY" when the  OS disk
            will be used for data.
            </summary>
            <returns>The disk device name or "PRIMARY".</returns>
            <remarks>
            <note>
            This will not work after the node's data disk has been initialized.
            </note>
            </remarks>
        </member>
        <member name="T:Neon.Kube.IHostingManagerFactory">
            <summary>
            Describes the implementation for mapping a hosting environment into
            a concrete <see cref="T:Neon.Kube.IHostingManager"/> implementation.
            </summary>
        </member>
        <member name="M:Neon.Kube.IHostingManagerFactory.GetManager(Neon.Kube.ClusterProxy,Neon.Kube.KubeSetupInfo,System.String)">
            <summary>
            Returns the <see cref="T:Neon.Kube.HostingManager"/> implementation for a specific environment.
            </summary>
            <param name="cluster">The cluster being managed.</param>
            <param name="setupInfo">Specifies the cluster setup information.</param>
            <param name="logFolder">
            <para>
            The folder where log files are to be written, otherwise or <c>null</c> or 
            empty if logging is disabled.
            </para>
            <note>
            Specific hosting managers may choose to ignore this when it doesn't make sense.
            </note>
            </param>
            <returns>
            The <see cref="T:Neon.Kube.HostingManager"/> or <c>null</c> if no hosting manager
            could be located for the specified cluster environment.
            </returns>
            <exception cref="T:Neon.Kube.KubeException">Thrown if the multiple managers implement support for the same hosting environment.</exception>
        </member>
        <member name="M:Neon.Kube.IHostingManagerFactory.IsCloudEnvironment(Neon.Kube.HostingEnvironments)">
            <summary>
            Determines whether a hosting environment is hosted in the cloud.
            </summary>
            <param name="environment">The target hosting environment.</param>
            <returns><c>true</c> for cloud environments.</returns>
        </member>
        <member name="T:Neon.Kube.KubeConst">
            <summary>
            Important cluster constants.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.NeonProdRegistry">
            <summary>
            Identifies the production cluster public Docker registry.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.NeonDevRegistry">
            <summary>
            Identifies the development cluster public Docker registry.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConst.NeonBranchRegistry">
            <summary>
            Returns the appropriate public Docker registry to be used for the git branch the
            assembly was built from.  This returns <see cref="F:Neon.Kube.KubeConst.NeonProdRegistry"/> for release
            branches and <see cref="F:Neon.Kube.KubeConst.NeonDevRegistry"/> for all other branches.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.MaxJitter">
            <summary>
            Timespan used to introduce some random jitter before an operation
            is performed.  This is typically used when it's possible that a 
            large number of entities will tend to perform an operation at
            nearly the same time (e.g. when a message signalling that an
            operation should be performed is broadcast to a large number
            of listeners.  Components can pass this to <see cref="M:Neon.Common.NeonHelper.PseudoRandomTimespan(System.TimeSpan)"/>
            to obtain a random delay timespan.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.MaxMasters">
            <summary>
            The maximum number of cluster master nodes.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.MinMasterCores">
            <summary>
            The minimum number of cores required by master nodes.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.MinWorkerCores">
            <summary>
            The minimum number of cores required by worker nodes.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.MinMasterRamMiB">
            <summary>
            The minimum RAM (MiB) required for master nodes.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.MinWorkerRamMiB">
            <summary>
            The minimum RAM (MiB) required for worker nodes.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.MinMasterNics">
            <summary>
            The minimum required network interface cards for master nodes.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.MinWorkerNics">
            <summary>
            The minimum required network interface cards for worker nodes.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.DockerPublicRegistry">
            <summary>
            Hostname of the Docker public registry.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.RootUser">
            <summary>
            The root Kubernetes context username for provisioned clusters. 
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.DesktopServicePort">
            <summary>
            The default local network port for the neonDESKTOP API
            used by the <b>neon-cli</b> tool for communicating with
            the neonDESKTOP.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.KubectlProxyPort">
            <summary>
            The default local network port where <b>kubectl proxy</b> will 
            listen and forward traffic to the Kubernetes API server.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.KubeDashboardProxyPort">
            <summary>
            The default local network port used for proxying requests to
            the Kubernetes dashboard for the current cluster.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.KibanaDashboardProxyPort">
            <summary>
            The default local network port used for proxying requests to
            the Kibana dashboard for the current cluster.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.PrometheusDashboardProxyPort">
            <summary>
            The default local network port used for proxying requests to
            the Prometheus dashboard for the current cluster.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.KialiDashboardProxyPort">
            <summary>
            The default local network port used for proxying requests to
            the Kiali dashboard for the current cluster.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.GrafanaDashboardProxyPort">
            <summary>
            The default local network port used for proxying requests to
            the Grafana dashboard for the current cluster.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.SysAdminUsername">
            <summary>
            The default host machine sysadmin username.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.SysAdminUID">
            <summary>
            The default host machine sysadmin user ID.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.SysAdminGroup">
            <summary>
            The default host machine sysadmin group.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.SysAdminGID">
            <summary>
            The default host machine sysadmin group ID.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.VmTemplatePassword">
            <summary>
            The root account password baked into the Hyper-V and XenServer cluster
            host node virtual machine templates.  Note that this will not be
            used for hosts provisioned on public clouds for security reasons.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.ContainerUsername">
            <summary>
            The default host machine container username.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.ContainerUID">
            <summary>
            <para>
            The default host machine container user ID.
            </para>
            <note>
            This explictly set to the first valid normal Linux user ID to
            be compatible with as many Docker images as possible.
            </note>
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.ContainerGroup">
            <summary>
            The default host machine container group name.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.ContainerGID">
            <summary>
            <para>
            The default host machine container group ID.
            </para>
            <note>
            This explictly set to the first valid normal Linux user ID to
            be compatible with as many Docker images as possible.
            </note>
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.LocalStorageClassName">
            <summary>
            <para>
            The default name for the local <see cref="T:k8s.Models.V1StorageClass"/>
            </para>
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.LocalVolumePath">
            <summary>
            <para>
            The default path for the <see cref="F:Neon.Kube.KubeConst.LocalStorageClassName"/>
            </para>
            <note>
            This is temporary, once Kubernetes supports dynamic provisioning of local storage volumes, we'll use
            that instead.
            </note>
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.NodeTemplateDiskSize">
            <summary>
            The primary disk size in bytes for VMs created using the standard neonKUBE
            node templates (XenServer and Hyper-V).  This is configured manually
            when node templates are periodically created.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.MinXenServerVersion">
            <summary>
            The minimum supported XenServer/XCP-ng hypervisor host version.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.CloudVNetStartReservedIPs">
            <summary>
            The number of IP addresses reserved by cloud deployments at the beginning of the 
            nodes subnet by the cloud provider and also for future neonKUBE features.
            This typically includes the cloud default gateway and DNS forwarding IPs as well
            as potential future neonKUBE features such as an integrated VPN and perhaps 
            management VMs.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.CloudVNetEndReservedIPs">
            <summary>
            The number of IP addresses reserved by cloud deployments at the end of the nodes
            subnet by the cloud provider.  This typically includes the network UDP broadcast
            address.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.LatestClusterVersion">
            <summary>
            The latest neonKUBE cluster version supported.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.SupportedClusterVersions">
            <summary>
            Lists thje supported neonKUBE cluster versions.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeHelper">
            <summary>
            cluster related utilties.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.ClearCachedItems">
            <summary>
            Clears all cached items.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.SetLogger(Neon.Diagnostics.INeonLogger)">
            <summary>
            Explicitly sets the class <see cref="T:Neon.Diagnostics.INeonLogger"/> implementation.  This defaults to
            a reasonable value.
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:Neon.Kube.KubeHelper.SetTestMode(System.String)">
            <summary>
            Puts <see cref="T:Neon.Kube.KubeHelper"/> into test mode to support unit testing.  This
            changes the folders where Kubernetes and neonKUBE persists their state to
            directories beneath the folder passed.  This also modifies the KUBECONFIG
            environment variable to reference the new location.
            </summary>
            <param name="folder">Specifies the folder where the state will be persisted.</param>
        </member>
        <member name="M:Neon.Kube.KubeHelper.ResetTestMode">
            <summary>
            Resets the test mode, restoring normal operation.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if a parent process set test mode.</exception>
        </member>
        <member name="P:Neon.Kube.KubeHelper.IsTestMode">
            <summary>
            Returns <c>true</c> if the class is running in test mode.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeHelper.Desktop">
            <summary>
            Returns the <see cref="T:Neon.Kube.DesktopClient"/> suitable for communicating
            with the neonDESKTOP application.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.ReadFileTextWithRetry(System.String)">
            <summary>
            Reads a file as text, retrying if the file is already open.
            </summary>
            <param name="path">The file path.</param>
            <returns>The file text.</returns>
            <remarks>
            It's possible for the configuration file to be temporarily opened
            by another process (e.g. the neonDESKTOP application or a 
            command line tool).  Rather than throw an exception, we're going
            to retry the operation a few times.
            </remarks>
        </member>
        <member name="M:Neon.Kube.KubeHelper.WriteFileTextWithRetry(System.String,System.String)">
            <summary>
            Writes a file as text, retrying if the file is already open.
            </summary>
            <param name="path">The file path.</param>
            <param name="text">The text to be written.</param>
            <remarks>
            It's possible for the configuration file to be temporarily opened
            by another process (e.g. the neonDESKTOP application or a 
            command line tool).  Rather than throw an exception, we're going
            to retry the operation a few times.
            </remarks>
        </member>
        <member name="P:Neon.Kube.KubeHelper.ClientConfig">
            <summary>
            Accesses the neonDESKTOP client configuration.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.LoadClientConfig">
            <summary>
            Loads or reloads the <see cref="P:Neon.Kube.KubeHelper.ClientConfig"/>.
            </summary>
            <returns>The client configuration.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHelper.SaveClientState">
            <summary>
            Persists the <see cref="P:Neon.Kube.KubeHelper.ClientConfig"/> to disk.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.EncryptFile(System.String)">
            <summary>
            Encrypts a file or directory when supported by the underlying operating system
            and file system.  Currently, this only works on non-HOME versions of Windows
            and NTFS file systems.  This fails silently.
            </summary>
            <param name="path">The file or directory path.</param>
            <returns><c>true</c> if the operation was successful.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHelper.EncryptSensitiveFiles">
            <summary>
            Ensures that sensitive folders and files on the local workstation are encrypted at rest
            for security purposes.  These include the users <b>.kube</b>, <b>.neonkube</b>, and any
            the <b>OpenVPN</b> if it exists.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeHelper.InToolContainer">
            <summary>
            Returns <c>true</c> if the current application is running in the special 
            <b>neon-cli</b> container as a shimmed application.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeHelper.HostPlatform">
            <summary>
            Returns the <see cref="T:Neon.Kube.KubeHostPlatform"/> for the current workstation.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeHelper.Headend">
            <summary>
            Returns a <see cref="T:Neon.Kube.HeadendClient"/>.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.GetNeonKubeUserFolder(System.Boolean)">
            <summary>
            Returns the path the folder holding the user specific Kubernetes files.
            </summary>
            <param name="ignoreNeonToolContainerVar">
            Optionally ignore the presence of a <b>NEON_TOOL_CONTAINER</b> environment 
            variable.  Defaults to <c>false</c>.
            </param>
            <returns>The folder path.</returns>
            <remarks>
            The actual path return depends on the presence of the <b>NEON_TOOL_CONTAINER</b>
            environment variable.  <b>NEON_TOOL_CONTAINER=1</b> then we're running in a 
            shimmed Docker container and we'll expect the cluster login information to be mounted
            at <b>/neonkube</b>.  Otherwise, we'll return a suitable path within the 
            current user's home directory.
            </remarks>
        </member>
        <member name="M:Neon.Kube.KubeHelper.GetKubeUserFolder(System.Boolean)">
            <summary>
            Returns the path the folder holding the user specific Kubernetes configuration files.
            </summary>
            <param name="ignoreNeonToolContainerVar">
            Optionally ignore the presence of a <b>NEON_TOOL_CONTAINER</b> environment 
            variable.  Defaults to <c>false</c>.
            </param>
            <returns>The folder path.</returns>
            <remarks>
            The actual path return depends on the presence of the <b>NEON_TOOL_CONTAINER</b>
            environment variable.  <b>NEON_TOOL_CONTAINER=1</b> then we're running in a 
            shimmed Docker container and we'll expect the cluster login information to be mounted
            at <b>/$HOME/.kube</b>.  Otherwise, we'll return a suitable path within the 
            current user's home directory.
            </remarks>
        </member>
        <member name="P:Neon.Kube.KubeHelper.RunFolder">
            <summary>
            Returns the directory path where the [neon run CMD ...] will copy secrets and run the command.
            </summary>
            <returns>The folder path.</returns>
        </member>
        <member name="P:Neon.Kube.KubeHelper.LogFolder">
            <summary>
            Returns the default directory path where neon-cli logs will be written.
            </summary>
            <returns>The folder path.</returns>
        </member>
        <member name="P:Neon.Kube.KubeHelper.KubeConfigPath">
            <summary>
            Returns the path to the Kubernetes configuration file.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeHelper.ClustersFolder">
            <summary>
            Returns the path the folder containing cluster related files (including kube context 
            extension), creating the folder if it doesn't already exist.
            </summary>
            <returns>The folder path.</returns>
            <remarks>
            <para>
            This folder will exist on developer/operator workstations that have used the <b>neon-cli</b>
            to deploy and manage clusters.  Each known cluster will have a JSON file named
            <b><i>NAME</i>.context.json</b> holding the serialized <see cref="T:Neon.Kube.KubeContextExtension"/> 
            information for the cluster, where <i>NAME</i> maps to a cluster configuration name
            within the <c>kubeconfig</c> file.
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Kube.KubeHelper.PasswordsFolder">
            <summary>
            Returns path to the folder holding the encryption passwords.
            </summary>
            <returns>The folder path.</returns>
        </member>
        <member name="P:Neon.Kube.KubeHelper.DesktopFolder">
            <summary>
            Returns path to the neonDESKTOP application state folder.
            </summary>
            <returns>The folder path.</returns>
        </member>
        <member name="P:Neon.Kube.KubeHelper.CacheFolder">
            <summary>
            Returns the path the folder containing cached files for various environments.
            </summary>
            <returns>The folder path.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHelper.GetPlatformCacheFolder(Neon.Kube.KubeHostPlatform)">
            <summary>
            Returns the path to the folder containing cached files for the specified platform.
            </summary>
            <param name="platform">Identifies the platform.</param>
            <returns>The folder path.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHelper.GetCachedComponentPath(Neon.Kube.KubeHostPlatform,System.String,System.String)">
            <summary>
            Returns the path to the cached file for a specific named component with optional version.
            </summary>
            <param name="platform">Identifies the platform.</param>
            <param name="component">The component name.</param>
            <param name="version">The component version (or <c>null</c>).</param>
            <returns>The component file path.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHelper.GetContextExtensionPath(Neon.Kube.KubeContextName)">
            <summary>
            Returns the path to the kubecontext extension file path for a specific context
            by raw name.
            </summary>
            <param name="contextName">The kubecontext name.</param>
            <returns>The file path.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHelper.GetContextExtension(Neon.Kube.KubeContextName)">
            <summary>
            Returns the kubecontext extension for the structured configuration name.
            </summary>
            <param name="name">The structured context name.</param>
            <returns>The <see cref="T:Neon.Kube.KubeContextExtension"/> or <c>null</c>.</returns>
        </member>
        <member name="P:Neon.Kube.KubeHelper.TempFolder">
            <summary>
            Returns the path the neonFORGE temporary folder, creating the folder if it doesn't already exist.
            </summary>
            <returns>The folder path.</returns>
            <remarks>
            This folder will exist on developer/operator workstations that have used the <b>neon-cli</b>
            to deploy and manage clusters.  The client will use this to store temporary files that may
            include sensitive information because these folders are encrypted on disk.
            </remarks>
        </member>
        <member name="P:Neon.Kube.KubeHelper.VmTemplatesFolder">
            <summary>
            Returns the path to the current user's cluster virtual machine templates
            folder, creating the directory if it doesn't already exist.
            </summary>
            <returns>The path to the cluster setup folder.</returns>
        </member>
        <member name="P:Neon.Kube.KubeHelper.ProgramFolder">
            <summary>
            Returns the path to the neonKUBE program folder.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeHelper.PwshPath">
            <summary>
            Returns the path to the Powershell Core executable to be used.
            This will first examine the <b>NEONKUBE_PROGRAM_FOLDER</b> environment
            variable to see if the installed version of Powershell Core should
            be used, otherwise it will simply return <b>pwsh.exe</b> so that
            the <b>PATH</b> will be searched.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.LoadConfig">
            <summary>
            Loads or reloads the Kubernetes configuration.
            </summary>
            <returns>The <see cref="P:Neon.Kube.KubeHelper.Config"/>.</returns>
        </member>
        <member name="P:Neon.Kube.KubeHelper.Config">
            <summary>
            Returns the user's current <see cref="P:Neon.Kube.KubeHelper.Config"/>.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.SetConfig(Neon.Kube.KubeConfig)">
            <summary>
            Rewrites the local kubeconfig file.
            </summary>
            <param name="config">The new configuration.</param>
        </member>
        <member name="M:Neon.Kube.KubeHelper.InitContext(Neon.Kube.KubeConfigContext)">
            <summary>
            This is used for special situations for setting up a cluster to
            set an uninitialized Kubernetes config context as the current
            <see cref="P:Neon.Kube.KubeHelper.CurrentContext"/>.
            </summary>
            <param name="context">The context being set or <c>null</c> to reset.</param>
        </member>
        <member name="M:Neon.Kube.KubeHelper.SetCurrentContext(Neon.Kube.KubeContextName)">
            <summary>
            Sets the current Kubernetes config context.
            </summary>
            <param name="contextName">The context name of <c>null</c> to clear the current context.</param>
            <exception cref="T:System.ArgumentException">Thrown if the context specified doesnt exist.</exception>
        </member>
        <member name="M:Neon.Kube.KubeHelper.SetCurrentContext(System.String)">
            <summary>
            Sets the current Kubernetes config context by string name.
            </summary>
            <param name="contextName">The context name of <c>null</c> to clear the current context.</param>
            <exception cref="T:System.ArgumentException">Thrown if the context specified doesnt exist.</exception>
        </member>
        <member name="P:Neon.Kube.KubeHelper.CurrentContext">
            <summary>
            Returns the <see cref="P:Neon.Kube.KubeHelper.CurrentContext"/> for the connected cluster
            or <c>null</c> when there is no current context.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeHelper.CurrentContextName">
            <summary>
            Returns the current context's <see cref="P:Neon.Kube.KubeHelper.CurrentContextName"/> or <c>null</c>
            if there's no current context.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeHelper.ClusterCertificate">
            <summary>
            Returns the Kuberneties API service certificate for the current
            cluster context or <c>null</c> if we're not connected to a cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeHelper.ClientCertificate">
            <summary>
            Returns the Kuberneties API client certificate for the current
            cluster context or <c>null</c> if we're not connected to a cluster.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.FindCertificateByFriendlyName(System.Security.Cryptography.X509Certificates.X509Store,System.String)">
            <summary>
            Looks for a certificate with a friendly name.
            </summary>
            <param name="store">The certificate store.</param>
            <param name="friendlyName">The case insensitive friendly name.</param>
            <returns>The certificate or <c>null</c> if one doesn't exist by the name.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHelper.InstallKubeCtl(Neon.Kube.KubeSetupInfo)">
            <summary>
            <para>
            Ensures that <b>kubectl</b> tool whose version is at least as great as the Kubernetes
            cluster version is installed to the <b>neonKUBE</b> programs folder by copying the
            tool from the cache if necessary.
            </para>
            <note>
            This will probably require elevated privileges.
            </note>
            <note>
            This assumes that <b>kubectl</b> has already been downloaded and cached and also that 
            more recent <b>kubectl</b> releases are backwards compatible with older deployed versions
            of Kubernetes.
            </note>
            </summary>
            <param name="setupInfo">The KUbernetes setup information.</param>
        </member>
        <member name="M:Neon.Kube.KubeHelper.InstallHelm(Neon.Kube.KubeSetupInfo)">
            <summary>
            <para>
            Ensures that <b>helm</b> tool whose version is at least as great as the requested
            cluster version is installed to the <b>neonKUBE</b> programs folder by copying the
            tool from the cache if necessary.
            </para>
            <note>
            This will probably require elevated privileges.
            </note>
            <note>
            This assumes that <b>Helm</b> has already been downloaded and cached and also that 
            more recent <b>Helm</b> releases are backwards compatible with older deployed versions
            of Tiller.
            </note>
            </summary>
            <param name="setupInfo">The KUbernetes setup information.</param>
        </member>
        <member name="M:Neon.Kube.KubeHelper.Kubectl(System.Object[])">
            <summary>
            Executes a <b>kubectl</b> command on the local workstation.
            </summary>
            <param name="args">The command arguments.</param>
            <returns>The <see cref="T:Neon.Common.ExecuteResponse"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHelper.PortForward(System.String,System.Int32,System.Int32,System.String,System.Diagnostics.Process)">
            <summary>
            Executes a <b>kubectl port-forward</b> command on the local workstation.
            </summary>
            <param name="serviceName">The service to forward.</param>
            <param name="remotePort">The service port.</param>
            <param name="localPort">The local port to forward to.</param>
            <param name="namespace">The Kubernetes namespace where the service is running.</param>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> to use.</param>
            <returns>The <see cref="T:Neon.Common.ExecuteResponse"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHelper.ExecInPod(k8s.IKubernetes,k8s.Models.V1Pod,System.String,System.String[])">
            <summary>
            Executes a command in a k8s pod.
            </summary>
            <param name="client">The <see cref="T:k8s.Kubernetes"/> client to use.</param>
            <param name="pod">The pod where the command should run.</param>
            <param name="namespace">The namespace where the pod is running.</param>
            <param name="command">The command to run.</param>
            <returns>The command result.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHelper.LookupPassword(System.String)">
            <summary>
            Looks up a password given its name.
            </summary>
            <param name="passwordName">The password name.</param>
            <returns>The password value.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the password doesn't exist.</exception>
        </member>
        <member name="M:Neon.Kube.KubeHelper.CreateIsoFile(System.String,System.String,System.String)">
            <summary>
            <para>
            Packages the files within a folder into an ISO file.
            </para>
            <note>
            This requires Powershell to be installed and this will favor using the version of
            Powershell installed along with the neon-cli is present.
            </note>
            </summary>
            <param name="inputFolder">Path to the input folder.</param>
            <param name="isoPath">Path to the output ISO file.</param>
            <param name="label">Optionally specifies a volume label.</param>
            <exception cref="T:Neon.Common.ExecuteException">Thrown if the operation failed.</exception>
        </member>
        <member name="M:Neon.Kube.KubeHelper.CreateNodePrepIso(Neon.Kube.ClusterDefinition,Neon.Kube.NodeDefinition,System.String)">
            <summary>
            Creates an ISO file containing the <b>neon-node-prep.sh</b> script that 
            will be used for confguring the node on first boot.  This includes disabling
            the APT package update services, setting a secure password for the [sysadmin]
            account, and configuring the network interface with the configured static IP.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <param name="nodeDefinition">The node definition.</param>
            <param name="securePassword">The new secure SSH password.</param>
            <returns>A <see cref="T:Neon.IO.TempFile"/> that references the generated ISO file.</returns>
            <remarks>
            <para>
            The hosting manager will call this for each node being prepared and then
            insert the ISO into the node VM's DVD/CD drive before booting the node
            for the first time.  The <b>neon-node-prep</b> service configured on
            the corresponding node templates will look for this DVD and script and
            execute it early during the node boot process.
            </para>
            <para>
            The ISO file reference is returned as a <see cref="T:Neon.IO.TempFile"/>.  The
            caller should call <see cref="M:Neon.IO.TempFile.Dispose"/> when it's done
            with the file to ensure that it is deleted.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.KubeHelper.WriteLog(System.Action{System.String},System.String)">
            <summary>
            Writes a message to a log writer action when it's not <c>null</c>.
            </summary>
            <param name="logWriter">The log writer action ot <c>null</c>.</param>
            <param name="message">The message or <c>null</c> to wtite a blank line.</param>
        </member>
        <member name="M:Neon.Kube.KubeHelper.InitializeNode(Neon.Kube.SshProxy{Neon.Kube.NodeDefinition},System.String,System.Boolean,System.Action{System.String})">
            <summary>
            Performs low-level initialization of a cluster node.  This is applied one time to
            Hyper-V and XenServer/XCP-ng node templates when they are created and at cluster
            creation time for cloud and bare metal based clusters.  The node must already
            be booted and running.
            </summary>
            <param name="node">The node's SSH proxy.</param>
            <param name="sshPassword">The current <b>sysadmin</b> password.</param>
            <param name="updateDistribution">Optionally upgrade the node's Linux distribution.  This defaults to <c>false</c>.</param>
            <param name="logWriter">Action that writes a line of text to the operation output log or console (or <c>null</c>).</param>
        </member>
        <member name="M:Neon.Kube.KubeHelper.VerifyNodeOs(Neon.Kube.SshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Ensures that the node operating system and version is supported for a neonKUBE
            cluster.  This faults the nodeproxy on faliure.
            </summary>
            <param name="node">The target node.</param>
        </member>
        <member name="M:Neon.Kube.KubeHelper.EnsureIngressNodes(Neon.Kube.ClusterDefinition)">
            <summary>
            <para>
            Ensures that at least one cluster node is enabled for cluster ingress
            network traffic.
            </para>
            <note>
            It is possible for the user to have set <see cref="P:Neon.Kube.NodeDefinition.Ingress"/>
            to <c>false</c> for all nodes.  We're going to pick a reasonable set of
            nodes in this case.  I there are 3 or more workers, then only the workers
            will receive traffic, otherwise all nodes will receive traffic.
            </note>
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
        </member>
        <member name="T:Neon.Kube.KubeHostFolders">
            <summary>
            Enumerates the paths of important directories on cluster 
            host servers.
            </summary>
            <remarks>
            <note>
            Although these constants are referenced by C# code, Linux scripts 
            are likely to hardcode these strings.  You should do a search and
            replace whenever you change any of these values.
            </note>
            <note>
            Changing any of these will likely break [neon-cli] interactions
            with existing clusters that use the previous folder path.  Be
            ver sure you know what you're doing when you make changes.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.KubeHostFolders.Archive(System.String)">
            <summary>
            Path to a user archive directory.
            </summary>
            <param name="username">The username.</param>
            <returns>The directory path.</returns>
        </member>
        <member name="F:Neon.Kube.KubeHostFolders.Bin">
            <summary>
            Path to the cluster executable files directory.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostFolders.Config">
            <summary>
            Path to the cluster configuration directory.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHostFolders.Download(System.String)">
            <summary>
            Path to the user download directory.
            </summary>
            <param name="username">The username.</param>
            <returns>The directory path.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHostFolders.Exec(System.String)">
            <summary>
            The user folder where cluster tools can upload, unpack, and then
            execute <see cref="T:Neon.Kube.CommandBundle"/>s as well as store temporary
            command output files.
            </summary>
            <param name="username">The username.</param>
            <returns>The directory path.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHostFolders.Home(System.String)">
            <summary>
            Path to a user archive directory.
            </summary>
            <param name="username">The username.</param>
            <returns>The directory path.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHostFolders.NeonKubeHome(System.String)">
            <summary>
            Path to a user <b>.neonkube</b> home directory.
            </summary>
            <param name="username">The username.</param>
            <returns>The directory path.</returns>
        </member>
        <member name="F:Neon.Kube.KubeHostFolders.Scripts">
            <summary>
            Path to the cluster management scripts directory.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostFolders.Setup">
            <summary>
            Path to the cluster setup scripts directory.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostFolders.State">
            <summary>
            Path to the cluster setup state directory.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostFolders.Tmpfs">
            <summary>
            Root folder on the local tmpfs (shared memory) folder where 
            cluster will persist misc temporary files.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHostFolders.Upload(System.String)">
            <summary>
            Path to a user upload directory.
            </summary>
            <param name="username">The username.</param>
            <returns>The directory path.</returns>
        </member>
        <member name="T:Neon.Kube.KubeHostPlatform">
            <summary>
            Enumerates the operating systems supported by neonKUBE.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostPlatform.Linux">
            <summary>
            Linux.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostPlatform.Windows">
            <summary>
            Windows.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostPlatform.Osx">
            <summary>
            OS/X
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeHostPorts">
            <summary>
            Defines reserved local node and cluster network ports.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostPorts.KubeApiServer">
            <summary>
            Port exposed by the Kubernetes API servers on the master nodes.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostPorts.KubeFirstNodePort">
            <summary>
            The first port reserved by Kubernetes for exposing service node ports.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostPorts.KubeLastNodePort">
            <summary>
            The last port reserved by Kubernetes for exposing service node ports.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostPorts.KubeDashboard">
            <summary>
            The node port exposed by the Kubernetes dashboard service.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeVersions">
            <summary>
            Specifies deployment related component versions for the current
            neonKUBE release.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeVersions.KubernetesVersion">
            <summary>
            The version of Kubernetes to be installed.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeVersions.KubernetesDashboardVersion">
            <summary>
            The version of the Kubernetes dashboard to be installed.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeVersions.KubeAdminPackageVersion">
            <summary>
            The package version for Kubernetes admin service.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeVersions.KubeCtlPackageVersion">
            <summary>
            The package version for the Kubernetes cli.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeVersions.KubeletPackageVersion">
            <summary>
            The package version for the Kubelet service.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeVersions.DockerVersion">
            <summary>
            The version of Docker to be installed.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeVersions.CalicoVersion">
            <summary>
            The version of Calico to install.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeVersions.IstioVersion">
            <summary>
            The version of Istio to install.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeVersions.HelmVersion">
            <summary>
            The version of Helm to be installed.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeConfig">
            <summary>
            Used to manage serialization of Kubernetes <b>kubeconfig</b> files. 
            These are used to manage cluster contexts on client machines:
            <a href="https://github.com/eBay/Kubernetes/blob/master/docs/user-guide/kubeconfig-file.md">more information</a>.
            </summary>
            <remarks>
            <note>
            This implementation currently supports only the a single kubeconfig
            located at <c>$HOME/.kube/config</c> (within the current user's
            HOME folder).  The <c>KUBECONFIG</c> environment variable is ignored.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.KubeConfig.Load">
            <summary>
            Reads and returns the current KubeConfig.
            </summary>
            <returns>The parsed <see cref="T:Neon.Kube.KubeConfig"/> or an empty config if the file doesn't exist.</returns>
            <exception cref="T:Neon.Kube.KubeException">Thrown when the current config is invalid.</exception>
        </member>
        <member name="M:Neon.Kube.KubeConfig.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfig.ApiVersion">
            <summary>
            The cluster API server protocol version (defaults to <b>v1</b>).
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfig.Kind">
            <summary>
            Identifies the document type: <b>Config</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfig.Clusters">
            <summary>
            The list of cluster configurations.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfig.Contexts">
            <summary>
            The list of config contexts.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfig.CurrentContext">
            <summary>
            The name of the current context or <c>null</c> when there is no current context.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfig.Preferences">
            <summary>
            The optional dictionary of preferences.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfig.Users">
            <summary>
            The list of user configurations.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfig.Context">
            <summary>
            Returns the current context or <c>null</c>.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeConfig.GetCluster(System.String)">
            <summary>
            Returns the named cluster.
            </summary>
            <param name="name">The cluster name.</param>
            <returns>The <see cref="T:Neon.Kube.KubeConfigCluster"/> or <c>null</c>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeConfig.GetUser(System.String)">
            <summary>
            Returns the named user.
            </summary>
            <param name="name">The user name.</param>
            <returns>The <see cref="T:Neon.Kube.KubeConfigUser"/> or <c>null</c>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeConfig.GetContext(System.String)">
            <summary>
            Returns the named context (using a raw context name).
            </summary>
            <param name="rawName">The raw context name.</param>
            <returns>The <see cref="T:Neon.Kube.KubeConfigContext"/> or <c>null</c>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeConfig.GetContext(Neon.Kube.KubeContextName)">
            <summary>
            Returns the named context (using a structured context name).
            </summary>
            <param name="name">The raw context name.</param>
            <returns>The <see cref="T:Neon.Kube.KubeConfigContext"/> or <c>null</c>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeConfig.SetContext(Neon.Kube.KubeConfigContext,Neon.Kube.KubeConfigCluster,Neon.Kube.KubeConfigUser,System.Boolean)">
            <summary>
            Adds or updates a kubecontext.
            </summary>
            <param name="context">The new context.</param>
            <param name="cluster">The context cluster information.</param>
            <param name="user">The context user information.</param>
            <param name="noSave">Optionally prevent context save after the change.</param>
        </member>
        <member name="M:Neon.Kube.KubeConfig.RemoveContext(Neon.Kube.KubeConfigContext,System.Boolean)">
            <summary>
            Removes a kubecontext if it exists.
            </summary>
            <param name="context">The context to be removed.</param>
            <param name="noSave">Optionally prevent context save after the change.</param>
        </member>
        <member name="M:Neon.Kube.KubeConfig.Validate">
            <summary>
            Validates the configuration.
            </summary>
            <exception cref="T:Neon.Kube.KubeException">Thrown when the current config is invalid.</exception>
        </member>
        <member name="M:Neon.Kube.KubeConfig.SetContext(System.String)">
            <summary>
            Sets the current context.
            </summary>
            <param name="contextName">The name of the current context or <c>null</c> to deselect the context.</param>
            <exception cref="T:Neon.Kube.KubeException">Thrown if the context does not exist.</exception>
        </member>
        <member name="M:Neon.Kube.KubeConfig.Save">
            <summary>
            Persists the KubeContext along with any neonKUBE extension information to the
            local user folder.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeConfigCluster">
            <summary>
            Describes a Kubernetes cluster configuration.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeConfigCluster.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigCluster.Name">
            <summary>
            The local nickname for the cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigCluster.Properties">
            <summary>
            The cluster properties.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeConfigClusterProperties">
            <summary>
            Describes a Kubernetes cluster's properties.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeConfigClusterProperties.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigClusterProperties.Server">
            <summary>
            Fully qualified URL to the cluster's API server.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigClusterProperties.CertificateAuthorityData">
            <summary>
            Optional path to the cluster certificate authority file.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigClusterProperties.InsecureSkipTlsVerify">
            <summary>
            Optionally disables TLS verification of the server.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeConfigContext">
            <summary>
            Describes a Kubernetes context.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeConfigContext.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeConfigContext.#ctor(Neon.Kube.KubeContextName)">
            <summary>
            Constructs a configuration from a structured name.
            </summary>
            <param name="contextName">The structured context name.</param>
        </member>
        <member name="P:Neon.Kube.KubeConfigContext.Name">
            <summary>
            The local nickname for the context.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigContext.Properties">
            <summary>
            The context properties.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigContext.Extension">
            <summary>
            The context extension information for the context.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeConfigContextProperties">
            <summary>
            Describes a Kubernetes context properties.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeConfigContextProperties.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigContextProperties.Cluster">
            <summary>
            The optional cluster nickname.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigContextProperties.Namespace">
            <summary>
            The optional namespace.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigContextProperties.User">
            <summary>
            The optional user nickname.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeConfigUser">
            <summary>
            Describes a Kubernetes user configuration.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeConfigUser.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigUser.Name">
            <summary>
            The local nickname for the user.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigUser.Properties">
            <summary>
            The user properties.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeConfigUserProperties">
            <summary>
            Describes a Kubernetes user's credentials.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeConfigUserProperties.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigUserProperties.Token">
            <summary>
            The optional authentication token (or <c>null</c>).
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigUserProperties.ClientCertificateData">
            <summary>
            The optional path to the client certificate (or <c>null</c>).
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigUserProperties.ClientKeyData">
            <summary>
            The optional client key data.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigUserProperties.Username">
            <summary>
            The optional username (or <c>null</c>).
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigUserProperties.Password">
            <summary>
            The optional password (or <c>null</c>).
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeContextExtension">
            <summary>
            Holds extended cluster information such as the cluster definition and
            node SSH credentials.  These records are persisted as files to the 
            <b>$HOME/.neonkube/clusters</b> folder in YAML files named like
            <b><i>USER</i>@<i>NAME</i>.context.yaml</b>.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeContextExtension.Load(System.String)">
            <summary>
            Reads a <see cref="T:Neon.Kube.KubeContextExtension"/> from a file if it exists.
            </summary>
            <param name="path">Path the the context extension file.</param>
            <returns>The <see cref="T:Neon.Kube.KubeContextExtension"/> if the file exists or <c>null</c>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeContextExtension.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeContextExtension.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
            <param name="path">Optionally specifies the path to the extension file.</param>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.ClusterId">
            <summary>
            Set to a globally unique ID to identify the cluster.  This defaults to 
            a gewnerated unique value.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.ClusterDefinition">
            <summary>
            The cluster definition.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.SetupDetails">
            <summary>
            Holds additional information required during setup as well as for
            provisoning additional clsuter nodes.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.SshUsername">
            <summary>
            The SSH root username.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.SshPassword">
            <summary>
            The SSH root password.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.SshCredentials">
            <summary>
            Returns a <see cref="P:Neon.Kube.KubeContextExtension.SshCredentials"/> instance suitable for connecting to
            a cluster node.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.KubernetesDashboardCertificate">
            <summary>
            The custom certificate generated for the Kubernetes dashboard PEM.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.SshNodeFingerprint">
            <summary>
            The SSH RSA private key fingerprint used to secure the cluster nodes.  This is a
            MD5 hash encoded as hex bytes separated by colons.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.SshNodePrivateKey">
            <summary>
            The SSH RSA private key used to secure the cluster nodes.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.SshNodePublicKey">
            <summary>
            The SSH RSA private key used to secure the cluster nodes.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.SshClientKey">
            <summary>
            The public and private parts of the SSH client key used to
            authenticate an SSH session with a cluster node.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeContextExtension.SetPath(System.String)">
            <summary>
            Sets the file path where the extension will be persisted.
            </summary>
            <param name="path">The target path.</param>
        </member>
        <member name="M:Neon.Kube.KubeContextExtension.Save">
            <summary>
            <para>
            Persists the extension data.
            </para>
            <note>
            A valid path must have been passed to the constructor for this to work.
            </note>
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeContextName">
            <summary>
            Handles the parsing of a Kubernetes context name which by convention
            encodes the user, cluster, and namespace as a string.
            </summary>
            <remarks>
            <para>
            neonKUBE encodes context names like:
            </para>
            <para>
            <b>USER</b> "@" <b>CLUSTER</b> [ "/" <b>NAMESPACE</b> ]
            </para>
            <para>k
            where <b>USER</b> is the username, <b>CLUSTER</b> identifies the
            cluster and <b>NAMESPACE</b> optionally identifies the Kubernetes
            namespace (which defaults to <b>default</b> when not specified).
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.KubeContextName.op_Explicit(Neon.Kube.KubeContextName)~System.String">
            <summary>
            Explictly casts a <see cref="T:Neon.Kube.KubeContextName"/> into a <c>string</c>.
            </summary>
            <param name="name">The context name or <c>null</c>.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Neon.Kube.KubeContextName.op_Explicit(System.String)~Neon.Kube.KubeContextName">
            <summary>
            Explictly casts a <c>string</c> into a <see cref="T:Neon.Kube.KubeContextName"/>.
            </summary>
            <param name="name">The context name or <c>null</c>.</param>
            <returns>The converted context name.</returns>
        </member>
        <member name="M:Neon.Kube.KubeContextName.op_Equality(Neon.Kube.KubeContextName,Neon.Kube.KubeContextName)">
            <summary>
            Compares <see cref="T:Neon.Kube.KubeContextName"/> for equality.
            </summary>
            <param name="name1">Name 1</param>
            <param name="name2">Name 2</param>
            <returns><c>true</c> if the names are equal.</returns>
        </member>
        <member name="M:Neon.Kube.KubeContextName.op_Inequality(Neon.Kube.KubeContextName,Neon.Kube.KubeContextName)">
            <summary>
            Compares <see cref="T:Neon.Kube.KubeContextName"/> for inequality.
            </summary>
            <param name="name1">Name 1</param>
            <param name="name2">Name 2</param>
            <returns><c>true</c> if the names are not equal.</returns>
        </member>
        <member name="M:Neon.Kube.KubeContextName.Parse(System.String)">
            <summary>
            Parses a Kubernetes context name like: <b>USER</b> "@" <b>CLUSTER</b> [ "/" <b>NAMESPACE</b> ]
            </summary>
            <param name="text">The input text.</param>
            <returns>The parsed name.</returns>
            <remarks>
            <note>
            The username, cluster, and namespace will be converted to lowercase.
            </note>
            </remarks>
            <exception cref="T:System.FormatException">Thrown if the name is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.KubeContextName.#ctor">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeContextName.#ctor(System.String,System.String,System.String)">
            <summary>
            Parameterized constructor.
            </summary>
            <param name="username">The username.</param>
            <param name="cluster">The cluster name.</param>
            <param name="kubeNamespace">Optionally specifies the namespace (defaults to <b>"default"</b>).</param>
            <remarks>
            <note>
            The username, cluster, and namespace will be converted to lowercase.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.KubeContextName.User">
            <summary>
            Returns the username.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextName.Cluster">
            <summary>
            Returns the cluster name.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextName.Namespace">
            <summary>
            Returns the namespace or <b>default</b>.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeContextName.ValidateName(System.String)">
            <summary>
            Validates that a name component includes only nvalid characters.
            </summary>
            <param name="name">The name beoing tested.</param>
            <returns><c>true</c> if the name is OK.</returns>
        </member>
        <member name="M:Neon.Kube.KubeContextName.Validate">
            <summary>
            Ensures that the properties are valid.
            </summary>
            <exception cref="T:System.FormatException">Thrown when there's a problem.</exception>
        </member>
        <member name="M:Neon.Kube.KubeContextName.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.KubeContextName.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.KubeContextName.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Kube.KubeFileDetails">
            <summary>
            Holds the contents and permissions for a downloaded Kubernetes file.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeFileDetails.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeFileDetails.#ctor(System.String,System.String,System.String)">
            <summary>
            Parameterized constructor.
            </summary>
            <param name="text">The file contexts.</param>
            <param name="permissions">Optional file permissions (defaults to <b>600</b>).</param>
            <param name="owner">Optional file owner (defaults to <b>root:root</b>).</param>
        </member>
        <member name="P:Neon.Kube.KubeFileDetails.Text">
            <summary>
            The file text.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeFileDetails.Permissions">
            <summary>
            The file permissions.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeFileDetails.Owner">
            <summary>
            The file owner.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeLogin">
            <summary>
            Holds all of the information required to import/export a cluster
            login.  This includes the Kubernetes cluster, login, and neonKUBE
            extensions.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeLogin.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeLogin.Cluster">
            <summary>
            The Kubernetes cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeLogin.Context">
            <summary>
            The Kubernetes context.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeLogin.Extensions">
            <summary>
            The context extension information.  This may be <c>null</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeLogin.User">
            <summary>
            The Kubernetes user.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeLogin.Validate">
            <summary>
            Ensures that the login information is valid.
            </summary>
            <exception cref="T:Neon.Kube.KubeException">Thrown if the instance is invalid.</exception>
        </member>
        <member name="T:Neon.Kube.KubeSetupDetails">
            <summary>
            Holds details required during setup or for provisioning 
            additional cluster nodes.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeSetupDetails.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupDetails.SetupInfo">
            <summary>
            Identifies the information used to setup the cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupDetails.SetupPending">
            <summary>
            Indicates whether provisioning is complete but setup is still
            pending for this cluster
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupDetails.ClusterJoinCommand">
            <summary>
            The command to be used join nodes to an existing cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupDetails.MasterFiles">
            <summary>
            Holds files captured from the boot master node that will need to be provisioned
            on the remaining masters.  The dictionary key is the file path and the value 
            specifies the file text, permissions, and owner.
            </summary>
        </member>
        <member name="T:Neon.Kube.SshClientKey">
            <summary>
            Describes a client key used for SSH public key authentication.
            </summary>
            <remarks>
            <note>
            Only <b>RSA</b> keys should be used in production.  Other keys like DSA are
            no longer considered secure.
            </note>
            <para>
            SSH authentication keys have two parts, the public key that needs to be deployed
            to every server machine and the private key that will be retained on client
            machines which will be used to sign authentication challenges by servers.
            </para>
            <para>
            The <see cref="P:Neon.Kube.SshClientKey.PublicPUB"/> property holds the public key.  This key has a 
            standard format can can be appended directly to the <b>authorized_keys</b>
            file on a Linux machine.
            </para>
            <para>
            <see cref="P:Neon.Kube.SshClientKey.PrivatePEM"/> and <see cref="P:Neon.Kube.SshClientKey.PrivatePPK"/> hold the private key
            using two different formats.  <see cref="P:Neon.Kube.SshClientKey.PrivatePEM"/> uses the <b>OpenSSH</b>
            format and is suitable for deployment on Linux client workstations.  <see cref="P:Neon.Kube.SshClientKey.PrivatePPK"/> 
            uses the <b>PuTTY Private Key (PPK)</b> format and is suitable for deploying
            on Windows client workstations that use PuTTY and WinSCP.
            </para>
            <para>
            <see cref="P:Neon.Kube.SshClientKey.Passphrase"/> is not currently used but eventually, this will
            enable an additional level of encryption at rest.
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Kube.SshClientKey.PublicPUB">
            <summary>
            The RSA public key to deployed on the server for authenticating SSH clients.
            This has the <b>PUB</b> format as generated by the Linux <b>ssh-keygen</b>
            tool.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshClientKey.PrivatePEM">
            <summary>
            The private key formatted for <b>OpenSSH</b> (PEM formatted).  
            </summary>
        </member>
        <member name="P:Neon.Kube.SshClientKey.PrivatePPK">
            <summary>
            The private key formatted as <b>PuTTY Private Key (PPK)</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshClientKey.Passphrase">
            <summary>
            <b>Not Implemented Yet:</b> The optional passphrase used for additional security.
            </summary>
        </member>
        <member name="T:Neon.Kube.ClusterDefinition">
            <summary>
            Describes a Kubernetes cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.NameRegex">
            <summary>
            Regex for verifying cluster names for hosts, routes, groups, etc.
            </summary>
        </member>
        <member name="F:Neon.Kube.ClusterDefinition.ReservedLabelPrefix">
            <summary>
            The prefix reserved for neonKUBE related daemon, image, and pod labels.
            </summary>
        </member>
        <member name="M:Neon.Kube.ClusterDefinition.FromYaml(System.String,System.Boolean)">
            <summary>
            Parses a cluster definition from YAML text.
            </summary>
            <param name="yaml">The JSON text.</param>
            <param name="strict">Optionally require that all input properties map to <see cref="T:Neon.Kube.ClusterDefinition"/> properties.</param>
            <returns>The parsed <see cref="T:Neon.Kube.ClusterDefinition"/>.</returns>
            <remarks>
            <note>
            The source is first preprocessed using <see cref="T:Neon.IO.PreprocessReader"/>
            and then is parsed as YAML.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.ClusterDefinition.ValidateFile(System.String,System.Boolean)">
            <summary>
            Parses and validates a YAML cluster definition file.
            </summary>
            <param name="path">The file path.</param>
            <param name="strict">Optionally require that all input properties map to <see cref="T:Neon.Kube.ClusterDefinition"/> properties.</param>
            <exception cref="T:System.ArgumentException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.ClusterDefinition.FromFile(System.String,System.Boolean)">
            <summary>
            Parses a YAML cluster definition from a file.
            </summary>
            <param name="path">The file path.</param>
            <param name="strict">Optionally require that all input properties map to <see cref="T:Neon.Kube.ClusterDefinition"/> properties.</param>
            <returns>The parsed <see cref="T:Neon.Kube.ClusterDefinition"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the definition is not valid.</exception>
            <remarks>
            <note>
            The source is first preprocessed using <see cref="T:Neon.IO.PreprocessReader"/>
            and then is parsed as JSON.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.ClusterDefinition.IsValidName(System.String)">
            <summary>
            Verifies that a string is a valid cluster name.
            </summary>
            <param name="name">The name being tested.</param>
            <returns><c>true</c> if the name is valid.</returns>
        </member>
        <member name="M:Neon.Kube.ClusterDefinition.ValidateSize(System.String,System.Type,System.String)">
            <summary>
            Ensures that a VM memory or disk size specification is valid and also
            converts the value to the corresponding long count.
            </summary>
            <param name="sizeValue">The size value string.</param>
            <param name="optionsType">Type of the property holding the size property (used for error reporting).</param>
            <param name="propertyName">The size property name (used for error reporting).</param>
            <returns>The size converted into a <c>long</c>.</returns>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the size is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.ClusterDefinition.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Name">
            <summary>
            The cluster name.
            </summary>
            <remarks>
            <note>
            The name may include only letters, numbers, periods, dashes, and underscores.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.ClusterVersion">
            <summary>
            Optionally specifies the semantic version of the neonKUBE cluster being created.
            This defaults to <c>null</c> which indicates that the latest supported cluster
            version will be created.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Debug">
            <summary>
            <para>
            Specifies cluster debugging options.
            </para>
            <note>
            These options are generally intended for neonKUBE developers only.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Security">
            <summary>
            Specifies cluster security options.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Provisioner">
            <summary>
            Identifies the tool/version used to provision the cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Kubernetes">
            <summary>
            Returns the Kubernetes cluster options.,
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Docker">
            <summary>
            Returns the options to be used when installing Docker on each
            of the cluster nodes.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Monitor">
            <summary>
            Returns the options to be used for configuring the cluster integrated
            Elasticsearch/Fluentd/Kibana (Mon) logging stack.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.AllowUnitTesting">
            <summary>
            Optionally enable unit testing on this cluster.  This is disabled by 
            default for safety.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Hosting">
            <summary>
            Specifies hosting related settings (e.g. the cloud provider).  This defaults to
            <c>null</c> which indicates that the cluster will be hosted on private servers.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Datacenter">
            <summary>
            Identifies the datacenter.
            </summary>
            <remarks>
            <note>
            The name may include only letters, numbers, periods, dashes, and underscores.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Environment">
            <summary>
            Indicates how the cluster is being used.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.LinuxDistribution">
            <summary>
            Specifies the distribution of Linux to be installed on the cluster nodes.  Currently
            only <b>ubuntu</b> is supported.  This defaults to <b>ubuntu</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.LinuxVersion">
            <summary>
            <para>
            Specifies the version of <see cref="P:Neon.Kube.ClusterDefinition.LinuxDistribution"/> to be installed.  This is
            formatted like <b>20.04.#</b> where <b>#</b> is the minor release or <b>20.04-latest</b>
            for the latest release.
            </para>
            <para>
            Currently, only <b>Ubuntu 20.04.#</b> releases are supported.  You'll need to check the
            cluster install documentation to discover which point releases are currently available.
            </para>
            <para>
            This defaults to <b>20.04.latest</b>.
            </para>
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.LinuxTemplateUri">
            <summary>
            <para>
            Optionally overrides the location of the Linux node template URI.  This is usually
            located on a neonFORGE managed server and derived from <see cref="P:Neon.Kube.ClusterDefinition.LinuxDistribution"/>
            and <see cref="P:Neon.Kube.ClusterDefinition.LinuxVersion"/> which should work for most users.
            </para>
            <para>
            You may set this to a custom URI which may be useful for setting up air-gapped 
            clusters for for testing purposes.  This defaults to <c>null</c>.
            </para>
            <note>
            This URI can use HTTP, HTTPS, or FTP for all hosting environments except <see cref="F:Neon.Kube.HostingEnvironments.XenServer"/>
            which doesn't support HTTPS.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.TimeSources">
            <summary>
            Specifies the NTP time sources to be configured for the cluster.  These are the
            FQDNs or IP addresses of the sources.  This defaults to <b>pool.ntp.org</b>.
            </summary>
            <remarks>
            <para>
            The cluster masters will be configured to synchronize their time with these
            time sources and the worker nodes will be configured to synchronize their time
            with the master nodes.
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.PackageProxy">
            <summary>
            Optionally specifies one or more APT proxy/cache servers the cluster will use to install
            and update Linux packages.  These are endpoints like <b>HOSTNAME:PORT</b> or <b>ADDRESS.PORT</b>
            of a <b>apt-cacher-ng</b> or other package proxy server.  The port is generall set to <b>3142</b>
            Multiple proxies may be specified by separating them with spaces.  This defaults to
            referencing the <b>apt-cacher-ng</b> instances running on the master nodes.
            </summary>
            <remarks>
            <para>
            A package cache will greatly reduce the Internet network traffic required to deploy a
            cluster, especially for large clusters.
            </para>
            <note>
            The cluster nodes are configured to failover to different proxies or to hit the 
            default Linux distribution package mirror directly if any or all of the caches
            specified are unavailable.
            </note>
            <note>
            The package caches will be tried in the order they are listed.  This essentially
            makes the first cache primary, with the others as backups.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Setup">
            <summary>
            Optionally specifies setup process related options.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Network">
            <summary>
            Describes the cluster's network configuration.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.NodeOptions">
            <summary>
            Specifies host node options.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.NodeDefinitions">
            <summary>
            Describes the cluster nodes.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Nodes">
            <summary>
            Enumerates all cluster node definitions.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.SortedNodes">
            <summary>
            Enumerates all cluster node definitions sorted in ascending order by name.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Masters">
            <summary>
            Enumerates the cluster master node definitions.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.SortedMasterNodes">
            <summary>
            Enumerates the cluster master node definitions sorted in ascending order by name.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Workers">
            <summary>
            Enumerates the cluster worker node definitions.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.SortedWorkerNodes">
            <summary>
            Enumerates the cluster worker node definitions sorted in ascending order by name.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.SortedMasterThenWorkerNodes">
            <summary>
            Enumerates the cluster master nodes sorted by name follwed by the worker nodes,
            also sorted by name.  This is convienent for situations like assigning IP addresses
            or ports such that the masters are grouped together first.
            </summary>
        </member>
        <member name="M:Neon.Kube.ClusterDefinition.ValidatePrivateNodeAddresses">
            <summary>
            Validates that node private IP addresses are set, are within the nodes subnet, and
            are unique.  This method is intended to be called from hosting options classes
            like <see cref="T:Neon.Kube.MachineHostingOptions"/> which require specified node IP addresses.
            </summary>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.ClusterDefinition.Validate">
            <summary>
            Validates the cluster definition and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.ClusterDefinition.AddNode(Neon.Kube.NodeDefinition)">
            <summary>
            Adds a node to the cluster.
            </summary>
            <param name="node">The new node.</param>
        </member>
        <member name="T:Neon.Kube.DebugOptions">
            <summary>
            <para>
            Specifies cluster debug options.
            </para>
            <note>
            <b>WARNING:</b> In general, you should not customize any debugging options for
            production clusters.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Kube.DebugOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.DockerOptions">
            <summary>
            Describes the Docker options for a neonKUBE.
            </summary>
        </member>
        <member name="M:Neon.Kube.DockerOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.DockerOptions.Version">
            <summary>
            <para>
            The version of Docker to be installed or <b>default</b> to install a reasonable
            version for the version of Kubernetes being deployed.  This defaults to <b>default</b>
            which will install a reasonable supported version.
            </para>
            <note>
            Only Community Editions of Docker are supported at this time.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Kube.DockerOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.DockerOptions.ClearSecrets">
            <summary>
            Clears any sensitive properties like the Docker registry credentials.
            </summary>
        </member>
        <member name="T:Neon.Kube.EtcdOptions">
            <summary>
            Specifies the options for configuring the cluster integrated Etcd 
            metrics stack: <a href="https://Etcd.io/">https://Etcd.io/</a>
            </summary>
        </member>
        <member name="P:Neon.Kube.EtcdOptions.Resources">
            <summary>
            Compute Resources required by Etcd.
            </summary>
        </member>
        <member name="P:Neon.Kube.EtcdOptions.DiskSize">
            <summary>
            Indicates disk size for Etcd nodes.  
            This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="T:Neon.Kube.AwsHostingOptions">
            <summary>
            Specifies the Amazon Web Services hosting settings.
            </summary>
        </member>
        <member name="M:Neon.Kube.AwsHostingOptions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.AwsHostingOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.AzureCloudEnvironment">
            <summary>
            Specifies the target Azure environment.
            </summary>
            <remarks>
            <para>
            Microsoft Azure deploys more than one environment for hosting services.
            <b>global-cloud</b> identifies their public cloud which is where most users
            and companies will deploy services.  Azure also has a few private environments
            that are typically used by specialized customers (like governments).
            </para>
            <para>
            The easiest way to use this is by setting the <see cref="P:Neon.Kube.AzureCloudEnvironment.Name"/> property to
            one of the possible environments:
            </para>
            <list type="table">
            <item>
                <term><b>global-cloud</b></term>
                <description>
                Public Azure cloud (the default).
                </description>
            </item>
            <item>
                <term><b>china-cloud</b></term>
                <description>
                Private Chinese cloud.
                </description>
            </item>
            <item>
                <term><b>german-cloud</b></term>
                <description>
                Private German cloud.
                </description>
            </item>
            <item>
                <term><b>us-government</b></term>
                <description>
                Private United States government cloud.
                </description>
            </item>
            </list>
            <para>
            Alternatively, you can set <see cref="P:Neon.Kube.AzureCloudEnvironment.Name"/> to <b>custom</b> and then set
            the specific environment endpoint URLs:
            </para>
            <para><see cref="P:Neon.Kube.AzureCloudEnvironment.AuthenticationEndpoint"/></para>
            <para><see cref="P:Neon.Kube.AzureCloudEnvironment.ResourceManagerEndpoint"/></para>
            <para><see cref="P:Neon.Kube.AzureCloudEnvironment.GraphEndpoint"/></para>
            <para><see cref="P:Neon.Kube.AzureCloudEnvironment.ManagementEnpoint"/></para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.AzureCloudEnvironment.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureCloudEnvironment.Name">
            <summary>
            Identifies the Azure environment.  This defaults to <see cref="F:Neon.Kube.AzureCloudEnvironments.GlobalCloud"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureCloudEnvironment.AuthenticationEndpoint">
            <summary>
            Environment authentication endpoint.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureCloudEnvironment.ResourceManagerEndpoint">
            <summary>
            Environment resource manager endpoint.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureCloudEnvironment.GraphEndpoint">
            <summary>
            Environment graph endpoint.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureCloudEnvironment.ManagementEnpoint">
            <summary>
            Environment management endpoint.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureCloudEnvironment.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.AzureCloudEnvironments">
            <summary>
            Enumerates the possible Azure hosting environments.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureCloudEnvironments.GlobalCloud">
            <summary>
            Public Azure cloud (default).
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureCloudEnvironments.Custom">
            <summary>
            Custom cloud where the management URIs
            will be specified explicitly.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureCloudEnvironments.ChinaCloud">
            <summary>
            China cloud.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureCloudEnvironments.GermanCloud">
            <summary>
            German cloud.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureCloudEnvironments.USGovernment">
            <summary>
            United States Government cloud.
            </summary>
        </member>
        <member name="T:Neon.Kube.AzureHelper">
            <summary>
            Microsoft Azure helpers.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHelper.MaxClusterNodes">
            <summary>
            The maximum number of nodes currently allowed in a cluster deployed to Azure.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHelper.MaxHostedEndpoints">
            <summary>
            The maximum number of hosted load balanced TCP/UDP endpoints allowed  in a cluster deployed to Azure.
            This is an Azure limit.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHelper.GetDiskSizeGiB(Neon.Kube.AzureStorageTypes,System.Decimal)">
            <summary>
            Converts the requested disk size in bytes to the actual required size of the Azure
            managed disk in GiB.
            </summary>
            <param name="storageType">Specifies the disk storage type.</param>
            <param name="driveSizeBytes">The requested size in bytes.</param>
            <returns>The actual Azure disk size in GiB.</returns>
        </member>
        <member name="T:Neon.Kube.AzureHostingOptions">
            <summary>
            Specifies the Microsoft Azure cluster hosting settings.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingOptions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingOptions.SubscriptionId">
            <summary>
            Azure account subscription ID obtained from the Azure portal.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingOptions.TenantId">
            <summary>
            Tenant ID generated when creating the neon tool's Azure service principal.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingOptions.AppId">
            <summary>
            Application ID for the application created to manage Azure access to neonKUBE provisioning and management tools.. 
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingOptions.AppPassword">
            <summary>
            Password generated when creating the neon tool's Azure service principal.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingOptions.ResourceGroup">
            <summary>
            Azure resource group where all cluster components are to be provisioned.  This defaults
            to "neon-" plus the cluster name but can be customized as required.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingOptions.Region">
            <summary>
            Identifies the target Azure region (e.g. <b>westus</b>).
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingOptions.DisableProximityPlacement">
            <summary>
            <para>
            neonKUBE cluster VMs are all deployed within the same Azure <a href="https://azure.microsoft.com/en-us/blog/introducing-proximity-placement-groups/">placement group</a>
            by default.  This ensures the smallest possible network latency between the cluster VMs.
            </para>
            <note>
            <para>
            Proximity placement groups have one downside: they make it more likely that Azure
            may not be able to find enough unused VMs to satisfy the proximity constraints.  This
            can happen when you first provision a cluster or later on when you try to scale one.
            </para>
            <para>
            For neonKUBE clusters the additional risk of an Azure provisioning failure is going
            to be very low due to how we use availability sets, which is as similar deployment
            constraint: master nodes are deployed to one availability set and workers to another.
            Without a proximity placement group, Azure could deploy the masters to one datacenter
            and the workers to another.  This wasn't that likely in the past but as Azure has
            added more datacenters, the chance of this happening has increased.
            </para>
            <para>
            Adding the proximity placement constrain, requires that Azure deploy both the masters
            and workers in the same datacenter.  So say your cluster has 3 masters and 50 workers.
            With proximity placement enabled, the Azure region will need to have a datacenter with
            53 VMs available with the specified sizes.  With proximity placement disabled, Azure
            could deploy the 3 masters in one datacenter and the 50 workers in another.
            </para>
            </note>
            <para>
            This property defaults to <c>false</c>.  You can disable the proximity placement
            constraint by setting this to <c>true</c>.
            </para>
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingOptions.DomainLabel">
            <summary>
            The DNS domain prefix for the public IP address to be assigned to the cluster.
            This defaults to <b>"neon-UUID"</b> where UUID is generated.
            </summary>
            <remarks>
            <note>
            <b>Recomendation:</b> To ensure that there's no conflicts with other 
            services deployed to Azure by you or other companies, we recommend that
            you generate a GUID and assign it to this property.
            </note>
            <para>
            This must be unique across all services deployed to an Azure region (your
            services as well as any other Azure cluster).  The IP address will be exposed
            by the Azure DNS like:
            </para>
            <para>
            DOMAINLABEL.AZURE-REGION.cloudapp.azure.com
            </para>
            <para>
            For example, a public IP address with the <b>mycluster</b> deployed to the
            Azure <b>westus</b> region would have this DNS name:
            </para>
            <para>
            mycluster.westus.cloudapp.azure.com
            </para>
            <para>
            Labels can be up to 80 characters in length and may include letters, digits,
            dashes, underscores, and periods.
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Kube.AzureHostingOptions.Environment">
            <summary>
            Specifies the target Azure environment.  This defaults to the 
            normal public Azure cloud.  See <see cref="T:Neon.Kube.AzureCloudEnvironment"/>
            for other possibilities.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingOptions.FaultDomains">
            <summary>
            <para>
            Specifies the number of Azure fault domains the worker nodes should be
            distributed across.  This defaults to <b>3</b> which should not be increased
            without making sure that your subscription supports the increase (most won't).
            </para>
            <note>
            Manager nodes will always be provisioned in three fault domains to ensure
            that there will always be a quorum after any single fault domain failure.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingOptions.UpdateDomains">
            <summary>
            <para>
            Specifies the number of Azure update domains the cluster workers will 
            distributed across.  This defaults to <b>20</b>  You may customize this
            with a value in the range of <b>2</b>...<b>20</b>.
            </para>
            <para>
            Azure automatically distributes VMs across the specified number of update
            domains and when it's necessary to perform planned maintenance on the underlying
            hardware or to relocate a VM to another host, Azure gaurantees that it will
            reboot hosts in only one update domain at a time and then wait 30 minutes between
            update domains to give the application a chance to stablize.
            </para>
            <para>
            A value of <b>2</b> indicates that one half of the cluster servers may be rebooted
            at the same time during an update domain upgrade.  A value of <b>20</b> indicates 
            that one twentieth of your VMs may be rebooted at a time.
            </para>
            <note>
            <para>
            There's no way to specifically assign cluster nodes to specific update domains
            in Azure.  This would have been nice for a cluster hosting replicated database
            nodes where we'd like to assign replica nodes to different update domains such
            that all data would still be available while an update domain was being rebooted.
            </para>
            <para>
            I imagine Azure doesn't allow this due to the difficuilty of ensuring these
            constraints across a very large number of customer deployments.  Azure also
            mentions that the disruption of a VM for planned maintenance can be slight
            because VMs can be relocated from one host to another while still running.
            </para>
            </note>
            <note>
            Manager nodes are always deployed with 20 update domains and since no cluster
            should ever need anywhere close this number of managers, we'll be ensured
            that only a single manager will be rebooted together during planned Azure
            maintenance and the 30 minutes Azure waits after rebooting an update domain
            gives the rebooted manager a chance to rejoin the other managers and catch
            up on any changes that happened while it was offline.
            </note>
            <note>
            neonKUBE deploys manager and worker nodes in separate Azure availability zones.
            This means that there will always be a quorum of managers available as any one
            update zone is rebooted.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingOptions.DefaultVmSize">
            <summary>
            <para>
            Specifies the default Azure virtual machine size.  You the available VM sizes are listed 
            <a href="https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general">here</a>.
            Cluster node VMs will be provisioned with this size unless overridden by <see cref="T:Neon.Kube.AzureNodeOptions"/>
            for specific nodes.
            </para>
            <note>
            This defaults to <b>Standard_B2S</b> which should be suitable for testing purposes
            as well as relatively idle clusters.  Each <b>Standard_B2S</b> VM includes 2 virtual
            cores and 4 GiB RAM.  At the time this was written, the pay-as-you-go cost for this
            VM is listed at $0.0416/hour or about $30/month in a USA datacenter.  <b>Bs-series</b>
            VMs are available in almost all Azure datacenters.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingOptions.DefaultStorageType">
            <summary>
            Specifies the default Azure storage type to be used when creating a
            node that does not specify the storage type in its <see cref="T:Neon.Kube.NodeOptions"/>.
            This defaults to <see cref="F:Neon.Kube.AzureStorageTypes.StandardSSD"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingOptions.DefaultDiskSize">
            <summary>
            Specifies the default Azure disk size to be used when creating a
            node that does not specify a disk size in its <see cref="T:Neon.Kube.NodeOptions"/>.
            This defaults to <b>64 GiB</b>.
            </summary>
            <remarks>
            <para>
            <see cref="F:Neon.Kube.AzureStorageTypes.StandardHDD"/>, <see cref="F:Neon.Kube.AzureStorageTypes.StandardSSD"/>, and
            <see cref="F:Neon.Kube.AzureStorageTypes.PremiumSSD"/> disks may be provisioned in these
            sizes: <b>4GiB</b>, <b>8GiB</b>, <b>16GiB</b>, <b>32GiB</b>, <b>64GiB</b>, <b>128GiB</b>, <b>256GiB</b>, <b>512GiB</b>,
            <b>1TiB</b>, <b>2TiB</b>, <b>4TiB</b>, <b>8TiB</b>, <b>16TiB</b>, or <b>32TiB</b>.
            </para>
            <para>
            <see cref="F:Neon.Kube.AzureStorageTypes.UltraSSD"/> based disks can be provisioned in these sizes:
            <b>4 GiB</b>,<b>8 GiB</b>,<b> GiB</b>,<b>16 GiB</b>,<b>32 GiB</b>,<b>64 GiB</b>,<b>128 GiB</b>,<b>256 GiB</b>,<b>512 GiB</b>,
            or from <b>1 TiB</b> to <b>64TiB</b> in increments of <b>1 TiB</b>.
            </para>
            <note>
            This size will be rounded up to the next valid disk size for the given storage type
            and set to the maximum allowed size, when necessary.
            </note>
            <note>
            The Azure disk sizes listed above may become out-of-date as Azure enhances their
            services.  Review the Azure documentation for more information about what is
            currently supported.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.AzureHostingOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.AzureNodeOptions">
            <summary>
            Azure specific options for cluster cluster node.  The default constructor
            initializes reasonable defaults.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureNodeOptions.VmSize">
            <summary>
            <para>
            Specifies the Azure virtual machine size.  You the available VM sizes are listed 
            <a href="https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general">here</a>.
            </para>
            <note>
            This defaults to <b>Standard_B2S</b> which should be suitable for testing purposes
            as well as relatively idle clusters.  Each <b>Standard_B2S</b> VM includes 2 virtual
            cores and 4 GiB RAM.  At the time this was written, the pay-as-you-go cost for this
            VM is listed at $0.0416/hour or about $30/month in a USA datacenter.  <b>Bs-series</b>
            VMs are available in almost all Azure datacenters.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureNodeOptions.StorageType">
            <summary>
            <para>
            Optionally specifies the storage type to use for any mounted drives.  This defaults to <see cref="F:Neon.Kube.AzureStorageTypes.Default"/>
            which indicates that <see cref="P:Neon.Kube.AzureHostingOptions.DefaultStorageType"/> will specify the storage type
            for this node.  By default, <see cref="F:Neon.Kube.AzureStorageTypes.StandardSSD"/> drives will be provisioned
            when storage type is not specified.
            </para>
            <note>
            You should really consider upgrading production clusters to one of the SSD based storage types.
            </note>
            </summary>
            <remarks>
            <note>
            All virtual machine sizes support <see cref="F:Neon.Kube.AzureStorageTypes.StandardHDD"/> which is why that
            is the default value.  Consult the consult the Azure documentation to virtual machine size specified 
            by <see cref="P:Neon.Kube.AzureNodeOptions.VmSize"/> can support <see cref="F:Neon.Kube.AzureStorageTypes.PremiumSSD"/>.
            </note>
            <para>
            <see cref="F:Neon.Kube.AzureStorageTypes.StandardHDD"/> specifies relatively slow rotating hard drives,
            <see cref="F:Neon.Kube.AzureStorageTypes.StandardSSD"/> specifies standard SSD based drives,
            <see cref="F:Neon.Kube.AzureStorageTypes.PremiumSSD"/> specifies fast SSD based drives, and finally
            <see cref="F:Neon.Kube.AzureStorageTypes.UltraSSD"/> specifies super fast SSD based drives.  Azure recommends that
            most production VMs deploy with SSDs.
            </para>
            <note>
            <see cref="F:Neon.Kube.AzureStorageTypes.UltraSSD"/> storage is still relatively new and your region may not be able to
            attach ultra drives to all VM instance types.  See this <a href="https://docs.microsoft.com/en-us/azure/virtual-machines/windows/disks-enable-ultra-ssd">note</a>
            for more information.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.AzureNodeOptions.DiskSize">
            <summary>
            Optionally specifies the size of the mounted managed Azure disk as <see cref="T:Neon.Common.ByteUnits"/>.  This
            defaults to <c>null</c> which indicates that <see cref="P:Neon.Kube.AzureHostingOptions.DefaultDiskSize"/>
            will be used instead, and that defaults to <b>128 GiB</b>.
            </summary>
            <remarks>
            <para>
            <see cref="F:Neon.Kube.AzureStorageTypes.StandardHDD"/>, <see cref="F:Neon.Kube.AzureStorageTypes.StandardSSD"/>, and
            <see cref="F:Neon.Kube.AzureStorageTypes.PremiumSSD"/> drives may be provisioned in these
            sizes: <b>4GiB</b>, <b>8GiB</b>, <b>16GiB</b>, <b>32GiB</b>, <b>64GiB</b>, <b>128GiB</b>, <b>256GiB</b>, <b>512GiB</b>,
            <b>1TiB</b>, <b>2TiB</b>, <b>4TiB</b>, <b>8TiB</b>, <b>16TiB</b>, or <b>32TiB</b>.
            </para>
            <para>
            <see cref="F:Neon.Kube.AzureStorageTypes.UltraSSD"/> based drives can be provisioned in these sizes:
            <b>4 GiB</b>,<b>8 GiB</b>,<b> GiB</b>,<b>16 GiB</b>,<b>32 GiB</b>,<b>64 GiB</b>,<b>128 GiB</b>,<b>256 GiB</b>,<b>512 GiB</b>,
            or from <b>1 TiB</b> to <b>64TiB</b> in increments of <b>1 TiB</b>.
            </para>
            <note>
            This size will be rounded up to the next valid drive size for the given storage type
            and set to the maximum allowed size, when necessary.
            </note>
            <note>
            The Azure disk sizes listed above may become out-of-date as Azure enhances their
            services.  Review the Azure documentation for more information about what is
            currently supported.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.AzureNodeOptions.VmGen">
            <summary>
            Optionally overrides the default VM generation assignment made by neonKUBE
            cluster setup for this node.  This defaults to <c>null</c> which allows
            setup to make the choice.
            </summary>
            <remarks>
            <para>
            Azure supports two generations of VM images that correspond roughly to HYPER-V
            VM generations. <b>Gen1</b> VMs are are older.  These VMs use BIOS to boot,
            IDE to access disk drives and are somewhat slower to provision and boot.
            <b>Gen2</b> images use UEFI to boot (which supports PXE), OS disk drives
            larger than 2TiB, and accelerated netwoking but Gen2 images don't support
            disk encryption.  Here's a link with additional detail:
            </para>
            <para>
            https://docs.microsoft.com/en-us/azure/virtual-machines/windows/generation-2
            </para>
            <para>
            Not all Azure VM sizes support Gen1 or Gen2 VMs.  neonKUBE attempts to deploy
            Gen2 VMs when supported for best performance.  You can override this behavior
            by setting this value to <b>1</b> or <b>2</b>.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.AzureNodeOptions.Validate(Neon.Kube.ClusterDefinition,System.String)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <param name="nodeName">The associated node name.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.AzureStorageTypes">
            <summary>
            <para>
            Enumerates the possible Azure storage account types.  Microsoft explains
            their disk types here:
            </para>
            <para>
            <a href="https://docs.microsoft.com/en-us/azure/virtual-machines/windows/disks-types">https://docs.microsoft.com/en-us/azure/virtual-machines/windows/disks-types</a>
            </para>
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureStorageTypes.Default">
            <summary>
            Indicates that the default Azure storage type will be provisioned.
            When <see cref="P:Neon.Kube.AzureNodeOptions.StorageType"/>=<see cref="F:Neon.Kube.AzureStorageTypes.Default"/>
            then <see cref="P:Neon.Kube.AzureHostingOptions.DefaultStorageType"/> will be provisioned.
            If <see cref="P:Neon.Kube.AzureHostingOptions.DefaultStorageType"/>=<see cref="F:Neon.Kube.AzureStorageTypes.Default"/>
            then <see cref="F:Neon.Kube.AzureStorageTypes.StandardSSD"/> will be provisioned.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureStorageTypes.StandardHDD">
            <summary>
            Standard managed spinning drives are quite slow but are
            also very inexpensive.  These may be suited for test or latency
            insensitive clusters.  These are available in sizes up to 32TiB.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureStorageTypes.StandardSSD">
            <summary>
            Managed SSD based drives  are a cost effect option that offers
            better latancy and reliability than <see cref="F:Neon.Kube.AzureStorageTypes.StandardHDD"/>.
            These are available in sizes up to 32TiB.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureStorageTypes.PremiumSSD">
            <summary>
            Premium managed SSD drives deliver high througput and low latency and
            are suitable for I/O intensive workloads.  These are available in sizes
            up to 32TiB.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureStorageTypes.UltraSSD">
            <summary>
            <para>
            Ultra managed SSD drives are intended for the most demanding I/O
            workloads.  These range in size up to 64TiB.
            </para>
            <note>
            These are still relatively new and your region may not be able to
            attach ultra drives to all VM instance types.  See this <a href="https://docs.microsoft.com/en-us/azure/virtual-machines/windows/disks-enable-ultra-ssd">note</a>
            for more information.
            </note>
            </summary>
        </member>
        <member name="T:Neon.Kube.CloudOptions">
            <summary>
            Describes cloud related cluster settings.
            </summary>
        </member>
        <member name="P:Neon.Kube.CloudOptions.PrefixResourceNames">
            <summary>
            Specifies that cloud resources created for the cluster have their names prefixed
            by the cluster name.  This defaults to <c>false</c>.
            </summary>
            <remarks>
            <para>
            neonKUBE cluster resources are deployed to a cluster specific resource group
            by default.  This means that there's generally no reason to prefix the cluster
            resource names because they are already scoped to the cluster's resource group.
            </para>
            <para>
            It is possible though to deploy a cluster into an existing resource group, along
            with other already existing resources (perhaps another neonKUBE cluster).  You'll need to
            take care in this situation to avoid resource name conflicts.  To handle this,
            set this property to <c>true</c> such that every cluster resource created will 
            include the cluster name in the resource name prefix.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.CloudOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.EnvironmentType">
            <summary>
            Enumerates the types of cluster operating environments.
            </summary>
        </member>
        <member name="F:Neon.Kube.EnvironmentType.Other">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:Neon.Kube.EnvironmentType.Development">
            <summary>
            Development environment.
            </summary>
        </member>
        <member name="F:Neon.Kube.EnvironmentType.Test">
            <summary>
            Test environment.
            </summary>
        </member>
        <member name="F:Neon.Kube.EnvironmentType.Staging">
            <summary>
            Staging environment.
            </summary>
        </member>
        <member name="F:Neon.Kube.EnvironmentType.Production">
            <summary>
            Production environment.
            </summary>
        </member>
        <member name="T:Neon.Kube.GoogleHostingOptions">
            <summary>
            Specifies the Google Cloud Platform hosting settings.
            </summary>
        </member>
        <member name="M:Neon.Kube.GoogleHostingOptions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.GoogleHostingOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.HostedEndpoint">
            <summary>
            Describes a network endpoint to be exposed by a neonKUBE cluster deployed to
            hosting providers such as AWS, Azure, or Google by platform load platform
            load balancers.
            </summary>
            <remarks>
            <note>
            <para>
            The <a href="https://istio.io">Istio</a> service mesh component used by
            neonKUBE clusters to route network traffic in/out of the cluster as well
            as between internal services and pods doesn't currently support UDP traffic,
            do UDP endpoints are not useful now.  UDP support is on their radar though
            and the underlying Envoy project has been making progress with UDP as well,
            so perhaps we'll be able to enable this scenario in the future.  Here's
            the tracking issue:
            </para>
            <para>
            <a href="https://github.com/istio/istio/issues/1430">https://github.com/istio/istio/issues/1430</a>
            </para>
            </note>
            <para>
            Most clusters will generally sit behind a load balancer or router that forwards
            external network traffic into the cluster based on the endpoints found in 
            the cluster definition.  The endpoints specify the network protocol (TCP/UDP),
            the external load balancer port the traffic is received on and the cluster node 
            port where the traffic will be forwarded.
            </para>
            <para>
            The load balancer will balance traffic against one or more cluster nodes.  These
            nodes will have their <c>node.ingress=true</c> label set.  Cluster setup will 
            use this to deploy Istio on these nodes and will also configure the load balancer
            (when posible) to load balance external traffic across these nodes.  Istio will
            then handle routing traffic to the cluster services and pods.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.HostedEndpoint.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.HostedEndpoint.#ctor(Neon.Kube.HostedEndpointProtocol,System.Int32,System.Int32)">
            <summary>
            Parametized constructor.
            </summary>
            <param name="protocol">Specifies the protocol.</param>
            <param name="externalPort">Specifies the external network port.</param>
            <param name="internalPort">Specifies the internal cluster network port.</param>
        </member>
        <member name="P:Neon.Kube.HostedEndpoint.Protocol">
            <summary>
            Specifies the network protocol to be supported.  This defaults to <see cref="F:Neon.Kube.HostedEndpointProtocol.Tcp"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostedEndpoint.FrontendPort">
            <summary>
            Specifies the external network port from which traffic is to be routed into the cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostedEndpoint.BackendPort">
            <summary>
            Specifies the internal cluster port where the traffic is to be routed.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostedEndpoint.IdleTimeoutMinutes">
            <summary>
            Maximum time an external connection to this endpoint will remain open
            while idle.  This defaults to <b>5</b> minutes.
            </summary>
            <remarks>
            <note>
            <para>
            Cloud providers support various ranges:
            </para>
            <list type="table">
            <item>
                <term><b>AWS</b></term>
                <description>
                $todo(jeff.lill): Figure this out.
                </description>
            </item>
            <item>
                <term><b>Azure</b></term>
                <description>
                Between 4 and 30 minutes.
                </description>
            </item>
            <item>
                <term><b>Google</b></term>
                <description>
                $todo(jeff.lill): Figure this out.
                </description>
            </item>
            </list>
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.HostedEndpoint.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.HostedEndpointProtocol">
            <summary>
            Enumerates the possible <see cref="T:Neon.Kube.HostedEndpoint"/> protocols.
            </summary>
        </member>
        <member name="F:Neon.Kube.HostedEndpointProtocol.Tcp">
            <summary>
            TCP protocol.
            </summary>
        </member>
        <member name="F:Neon.Kube.HostedEndpointProtocol.Udp">
            <summary>
            UDP protocol.
            </summary>
        </member>
        <member name="T:Neon.Kube.HostingEnvironments">
            <summary>
            Enumerates the possible cluster hosting environments.
            </summary>
        </member>
        <member name="F:Neon.Kube.HostingEnvironments.Machine">
            <summary>
            Hosted on directly on pre-provisioned bare metal or virtual machines.
            </summary>
        </member>
        <member name="F:Neon.Kube.HostingEnvironments.Aws">
            <summary>
            Amazon Web Services.
            </summary>
        </member>
        <member name="F:Neon.Kube.HostingEnvironments.Azure">
            <summary>
            Microsoft Azure.
            </summary>
        </member>
        <member name="F:Neon.Kube.HostingEnvironments.Google">
            <summary>
            Google Cloud Platform.
            </summary>
        </member>
        <member name="F:Neon.Kube.HostingEnvironments.HyperV">
            <summary>
            Microsoft Hyper-V hypervisor running on remote servers
            (typically for production purposes).
            </summary>
        </member>
        <member name="F:Neon.Kube.HostingEnvironments.HyperVLocal">
            <summary>
            Microsoft Hyper-V hypervisor running on the local workstation
            (typically for development or test purposes).
            </summary>
        </member>
        <member name="F:Neon.Kube.HostingEnvironments.XenServer">
            <summary>
            Citrix XenServer hypervisor running on remote servers (typically
            for production purposes).
            </summary>
        </member>
        <member name="F:Neon.Kube.HostingEnvironments.Unknown">
            <summary>
            Unknown or unspecified hosting environment.
            </summary>
        </member>
        <member name="T:Neon.Kube.HostingOptions">
            <summary>
            Specifies the cloud or colocation/on-premise hosting settings.
            </summary>
        </member>
        <member name="M:Neon.Kube.HostingOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.Environment">
            <summary>
            Identifies the cloud or other hosting platform.  This defaults to <see cref="F:Neon.Kube.HostingEnvironments.Machine"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.Aws">
            <summary>
            Specifies the Amazon Web Services hosting settings.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.Azure">
            <summary>
            Specifies the Microsoft Azure hosting settings.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.Google">
            <summary>
            Specifies the Google Cloud Platform hosting settings.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.HyperV">
            <summary>
            Specifies the Hyper-V settings when hosting on remote Hyper-V servers.  
            This is typically used for production.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.HyperVDev">
            <summary>
            Specifies the Hyper-V settings when hosting on the local workstation using the 
            Microsoft Hyper-V hypervisor.  This is typically used for development or
            test purposes.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.Machine">
            <summary>
            Specifies the hosting settings when hosting directly on bare metal or virtual machines.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.Cloud">
            <summary>
            Specifies cloud related options for clusters to be deployed to one of the public cloud providers.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.XenServer">
            <summary>
            Specifies the hosting settings when hosting on Citrix XenServer or the XCP-ng hypervisors.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.Vm">
            <summary>
            Specifies common hosting settings for hypervisor based environments such as Hyper-V and XenServer.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.IsCloudProvider">
            <summary>
            Returns <c>true</c> if the cluster will be hosted by a cloud provider like AWS, Azure or Google.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.IsOnPremiseProvider">
            <summary>
            Returns <c>true</c> if the cluster will be hosted by an on-premise (non-cloud) provider.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.IsRemoteHypervisorProvider">
            <summary>
            Returns <c>true</c> if the cluster will be hosted by a hypervisor provider
            that supports remote hosts.
            </summary>
        </member>
        <member name="M:Neon.Kube.HostingOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.HostingOptions.ClearSecrets">
            <summary>
            Clears all hosting provider details because they may
            include hosting related secrets.
            </summary>
        </member>
        <member name="T:Neon.Kube.HyperVHostingOptions">
            <summary>
            Specifies hosting settings for the Microsoft Hyper-V hypervisor.
            </summary>
        </member>
        <member name="M:Neon.Kube.HyperVHostingOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.HyperVHostingOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.LocalHyperVHostingOptions">
            <summary>
            Specifies hosting settings for the local Microsoft Hyper-V hypervisor.
            </summary>
        </member>
        <member name="M:Neon.Kube.LocalHyperVHostingOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.LocalHyperVHostingOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.MachineHostingOptions">
            <summary>
            Specifies hosting settings for bare metal or virtual machines.
            </summary>
        </member>
        <member name="M:Neon.Kube.MachineHostingOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.MachineHostingOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.HypervisorHost">
            <summary>
            Describes the location and credentials required to connect to
            a specific Hyper-V or XenServer hypervisor machine for cluster 
            provisioning.
            </summary>
        </member>
        <member name="P:Neon.Kube.HypervisorHost.Name">
            <summary>
            The XenServer hostname.  This is used to by <see cref="T:Neon.Kube.NodeDefinition"/> instances
            to specify where a cluster node is to be provisioned.
            </summary>
        </member>
        <member name="P:Neon.Kube.HypervisorHost.Address">
            <summary>
            The IP address or FQDN of the hypervisor machine.
            </summary>
        </member>
        <member name="P:Neon.Kube.HypervisorHost.Username">
            <summary>
            The custom username to use when connecting to the hypervisor machine.  This
            overrides <see cref="P:Neon.Kube.VmHostingOptions.HostUsername"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.HypervisorHost.Password">
            <summary>
            The custom password to use when connecting to the hypervisor machine.  This
            overrides <see cref="P:Neon.Kube.VmHostingOptions.HostPassword"/>.
            </summary>
        </member>
        <member name="M:Neon.Kube.HypervisorHost.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.VmHostingOptions">
            <summary>
            Specifies common options for on-premise hypervisor based hosting environments such as
            Hyper-V and XenServer.
            </summary>
        </member>
        <member name="M:Neon.Kube.VmHostingOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.VmHostingOptions.Hosts">
            <summary>
            Optionally identifies the target Hyper-V or XenServer hypervisor machines.
            </summary>
        </member>
        <member name="P:Neon.Kube.VmHostingOptions.HostUsername">
            <summary>
            <para>
            The default username to use for connecting the hypervisor host machines specified by <see cref="P:Neon.Kube.VmHostingOptions.Hosts"/>.
            This may be overridden for specific hypervisor machines.  This defaults to <c>null</c>.
            </para>
            <note>
            This defaults to <b>root</b> for XenServer based environments.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.VmHostingOptions.HostPassword">
            <summary>
            The default password to use for connecting the hypervisor host machines specified by <see cref="P:Neon.Kube.VmHostingOptions.Hosts"/>.
            This may be overridden for specific hypervisor machines within <see cref="P:Neon.Kube.VmHostingOptions.Hosts"/> items.  This defaults to <c>null</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.VmHostingOptions.Processors">
            <summary>
            The default number of virtual processors to assign to each cluster virtual machine.
            </summary>
        </member>
        <member name="P:Neon.Kube.VmHostingOptions.Memory">
            <summary>
            Specifies the default maximum amount of memory to allocate to each cluster virtual machine.  This is specified as a string
            that can be a byte count or a number with units like <b>512MiB</b>, <b>0.5GiB</b>, <b>2iGB</b>, or <b>1TiB</b>.  
            This defaults to <b>4GiB</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.VmHostingOptions.Disk">
            <summary>
            Specifies the maximum amount of memory to allocate to each cluster virtual machine.  This is specified as a string
            that can be a long byte count or a byte count or a number with units like <b>512MiB</b>, <b>0.5GiB</b>, <b>2GiB</b>, 
            or <b>1TiB</b>.  This defaults to <b>64GiB</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.VmHostingOptions.DriveFolder">
            <summary>
            <para>
            Path to the folder where virtual machine hard drive folders are to be persisted.
            This defaults to the local Hyper-V folder for Windows.
            </para>
            <note>
            This is recognized only when deploying on a local Hyper-V hypervisor, typically
            for development and test purposes.  This is ignored when provisioning on remote
            Hyper-V instances or for cloud or bare machine environments.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.VmHostingOptions.NamePrefix">
            <summary>
            <para>
            The prefix to be prepended to virtual machine provisioned to hypervisors for the
            <see cref="F:Neon.Kube.HostingEnvironments.HyperV"/>, <see cref="F:Neon.Kube.HostingEnvironments.HyperVLocal"/>,
            and <see cref="F:Neon.Kube.HostingEnvironments.XenServer"/> environments.
            </para>
            <para>
            When this is <c>null</c> (the default), the cluster name followed by a dash will 
            prefix the provisioned virtual machine names.  When this is a non-empty string, the
            value followed by a dash will be used.  If this is empty or whitespace, machine
            names will not be prefixed.
            </para>
            <note>
            Virtual machine name prefixes will always be converted to lowercase.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Kube.VmHostingOptions.GetVmNamePrefix(Neon.Kube.ClusterDefinition)">
            <summary>
            Returns the prefix to be used when provisioning virtual machines in hypervisor environments.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <returns>The prefix.</returns>
        </member>
        <member name="M:Neon.Kube.VmHostingOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.VmNodeOptions">
            <summary>
            Specifies common node options for on-premise hypervisor based hosting environments such as
            Hyper-V and XenServer.
            </summary>
        </member>
        <member name="M:Neon.Kube.VmNodeOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.VmNodeOptions.Host">
            <summary>
            Identifies the hypervisor instance where this node is to be provisioned for Hyper-V
            or XenServer based clusters.  This name must map to the name of one of the <see cref="P:Neon.Kube.VmHostingOptions.Hosts"/>
            when set.
            </summary>
        </member>
        <member name="P:Neon.Kube.VmNodeOptions.Processors">
            <summary>
            Specifies the number of processors to assigned to this node when provisioned on a hypervisor.  This
            defaults to the value specified by <see cref="P:Neon.Kube.VmHostingOptions.Processors"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.VmNodeOptions.Memory">
            <summary>
            Specifies the maximum amount of memory to allocate to this node when provisioned on a hypervisor.  
            This is specified as a string that can be a byte count or a number with units like <b>512MB</b>, 
            <b>0.5GB</b>, <b>2GB</b>, or <b>1TB</b>.  This defaults to the value specified by 
            <see cref="P:Neon.Kube.VmHostingOptions.Memory"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.VmNodeOptions.Disk">
            <summary>
            The amount of disk space to allocate to this node when when provisioned on a hypervisor.  This is specified as a string
            that can be a byte count or a number with units like <b>512MB</b>, <b>0.5GB</b>, <b>2GB</b>, or <b>1TB</b>.  This defaults 
            to the value specified by <see cref="P:Neon.Kube.VmHostingOptions.Disk"/>.
            </summary>
        </member>
        <member name="M:Neon.Kube.VmNodeOptions.GetProcessors(Neon.Kube.ClusterDefinition)">
            <summary>
            Returns the maximum number processors to allocate for this node when
            hosted on a hypervisor.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <returns>The number of cores.</returns>
        </member>
        <member name="M:Neon.Kube.VmNodeOptions.GetMemory(Neon.Kube.ClusterDefinition)">
            <summary>
            Returns the maximum number of bytes of memory allocate to for this node when
            hosted on a hypervisor.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <returns>The size in bytes.</returns>
        </member>
        <member name="M:Neon.Kube.VmNodeOptions.GetDisk(Neon.Kube.ClusterDefinition)">
            <summary>
            Returns the maximum number of bytes to disk allocate to for this node when
            hosted on a hypervisor.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <returns>The size in bytes.</returns>
        </member>
        <member name="M:Neon.Kube.VmNodeOptions.Validate(Neon.Kube.ClusterDefinition,System.String)">
            <summary>
            Validates the node definition.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <param name="nodeName">The node name.</param>
            <exception cref="T:System.ArgumentException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.XenServerHostingOptions">
            <summary>
            Specifies hosting settings for the Citrix XenServer hypervisor.
            </summary>
        </member>
        <member name="M:Neon.Kube.XenServerHostingOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.XenServerHostingOptions.StorageRepository">
            <summary>
            Identifies the XenServer storage repository to be used to store the XenServer
            node template as well as the cluster virtual machine images.  This defaults to
            <b>Local storage</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.XenServerHostingOptions.Snapshot">
            <summary>
            Optionally directs XenCenter to create the virtual machines using a snapshot of
            the virtual machine template rather than creating a full copy.  This defaults
            to <c>false</c>.
            </summary>
            <remarks>
            <para>
            Virtual machines created via a snapshot will be ready within seconds where as
            creation can take something like 4 minutes on a SSD or 9 minutes on a spinning
            drive.  We don't enable snapshots though by default, because some web posts
            from around 2014 indicate that operators may encounter problems when something
            like 30 virtual machines have been created as snapshots from the same template.
            </para>
            <para>
            We figure that it's best to default to safe setting for production clusters and
            then allow operators to override this when provisioning temporary test clusters 
            or when provisioning on a storage repository that doesn't have these limitations.
            </para>
            <note>
            For snapshots to work, the storage repository must support them and the virtual
            machine template must reside in the same repository where the virtual machines
            are being created.  The current <c>neon-cli</c> implementation persists the
            cluster VM templates to the local storage repository, so support for non-local
            storage repositories is not support out-of-the-box at this time.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.XenServerHostingOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.KubernetesOptions">
            <summary>
            Describes the Kubernetes options for a neonKUBE.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubernetesOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubernetesOptions.Version">
            <summary>
            The version of Kubernetes to be installed.  This defaults to <b>default</b> which
            will install the latest tested version of Kubernetes.  The minimum supported
            version is <b>1.13.0</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubernetesOptions.DashboardVersion">
            <summary>
            The version of Kubernetes dashboard to be installed.  This defaults to <b>default</b> which
            will install the latest tested version of Kubernetes.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubernetesOptions.HelmVersion">
            <summary>
            The version of Helm to be installed.  This defaults to <b>default</b> which
            will install a reasonable version for the Kubernetes release being inbstalled.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubernetesOptions.AllowPodsOnMasters">
            <summary>
            Enable pods to be scheduled on cluster master nodes.  This defaults to <c>null</c>
            which will allow pods to be scheduled on masters if the cluster consists only of
            master nodes (e.g. for a single node cluster.  This defaults to <c>false</c> for
            clusters with worker nodes.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubernetesOptions.ApiLoadBalancer">
            <summary>
            Optionally configures an external Kubernetes API server load balancer by
            specifying the load balancer endpoint as HOSTNAME:PORT or IPADDRESS:PORT.
            This defaults to <c>null</c>.  See the remarks to see what this means.
            </summary>
            <remarks>
            <para>
            Production clusters really should be deployed using an external highly
            available load balancer that distributes API server traffic across
            the API servers running on the masters.
            </para>
            <para>
            For cloud environments like AWS and Azure, neonKUBE provisions a cloud
            load balancer by default for this.  This is the ideal situation.
            </para>
            <para>
            For on-premise environments like Hyper-V and XenServer, we use the
            HAProxy based load balancer deployed to the first master node (as sorted
            by node name).  This forwards traffic to port 5000 to the Kubernetes
            API servers running on the masters.  This is not reeally HA though,
            because the loss of the first master will result in the loss of 
            API server connectivity.  This does help some though.  For example,
            stopping the API server on the first master won't take the cluster
            API server offline because HAProxy will still be able to direct 
            traffic to the remaining masters.
            </para>
            <note>
            <para>
            The HAProxy load balancer is actually deployed to all of the masters
            but the other master HAProxy instances won't see any traffic because
            Kubernetes is configured with a single balancer endpoint.
            </para>
            <para>
            In the future, it may be possible to turn the master HAProxy instances
            into an HA cluster via a virtual IP address and heartbeat mechanism.
            </para>
            <para>
            You can use the <see cref="P:Neon.Kube.KubernetesOptions.ApiLoadBalancer"/> property to specify an
            external load balancer that already exists.  Setting this will override
            the default behaviors described above.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.KubernetesOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.KubernetesOptions.ClearSecrets">
            <summary>
            Clears any sensitive properties like the Docker registry credentials.
            </summary>
        </member>
        <member name="T:Neon.Kube.ElasticsearchOptions">
            <summary>
            Specifies the options for configuring the cluster integrated Elasticsearch 
            metrics stack: <a href="https://Elastic.co/">https://Elastic.co/</a>
            </summary>
        </member>
        <member name="P:Neon.Kube.ElasticsearchOptions.Enabled">
            <summary>
            Indicates whether Elasticsearch metrics are to be enabled for the cluster.  
            This defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.ElasticsearchOptions.DiskSize">
            <summary>
            Specifies the amount of disk space to allocate to Elasticsearch.
            </summary>
        </member>
        <member name="P:Neon.Kube.ElasticsearchOptions.Resources">
            <summary>
            Compute Resources required by Elasticsearch.
            </summary>
        </member>
        <member name="P:Neon.Kube.ElasticsearchOptions.LogRetentionDays">
            <summary>
            Log retention period. Logs beyond this number of days will be purged by the ClusterManager
            </summary>
        </member>
        <member name="M:Neon.Kube.ElasticsearchOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.M3DBOptions">
            <summary>
            Specifies the options for configuring the cluster integrated M3DB 
            metrics stack: <a href="https://M3DB.io/">https://M3DB.io/</a>
            </summary>
        </member>
        <member name="P:Neon.Kube.M3DBOptions.Resources">
            <summary>
            Compute Resources required by Elasticsearch.
            </summary>
        </member>
        <member name="P:Neon.Kube.M3DBOptions.Etcd">
            <summary>
            Etcd options.
            </summary>
        </member>
        <member name="P:Neon.Kube.M3DBOptions.DiskSize">
            <summary>
            Indicates disk size for M3DB nodes.  
            This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="T:Neon.Kube.MonitorOptions">
            <summary>
            Specifies the options for configuring the cluster integrated
            Elasticsearch/Fluentd/Kibana (EFK) logging stack.
            </summary>
        </member>
        <member name="P:Neon.Kube.MonitorOptions.Enabled">
            <summary>
            Indicates whether the EFK stack is to be enabled for the cluster.  
            This defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.MonitorOptions.Elasticsearch">
            <summary>
            Elasticsearch options.
            </summary>
        </member>
        <member name="P:Neon.Kube.MonitorOptions.Prometheus">
            <summary>
            Prometheus options
            </summary>
        </member>
        <member name="M:Neon.Kube.MonitorOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.PrometheusOptions">
            <summary>
            Specifies the options for configuring the cluster integrated Prometheus 
            metrics stack: <a href="https://prometheus.io/">https://prometheus.io/</a>
            </summary>
        </member>
        <member name="P:Neon.Kube.PrometheusOptions.Enabled">
            <summary>
            Indicates whether Prometheus metrics are to be enabled for the cluster.  
            This defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.PrometheusOptions.Persistence">
            <summary>
            Indicates whether Prometheus persistence is to be enabled.  
            This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.PrometheusOptions.Resources">
            <summary>
            Compute Resources required by Elasticsearch.
            </summary>
        </member>
        <member name="P:Neon.Kube.PrometheusOptions.M3DB">
            <summary>
            M3DB specific options.
            </summary>
        </member>
        <member name="M:Neon.Kube.PrometheusOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.AddressRule">
            <summary>
            Used to whitelist or blacklist an IP address or subnet within a cluster's
            <see cref="P:Neon.Kube.NetworkOptions.IngressRules"/> or <see cref="P:Neon.Kube.NetworkOptions.EgressAddressRules"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.AddressRule.AllowAll">
            <summary>
            Returns an <see cref="T:Neon.Kube.AddressRule"/> that <b>allows</b> network traffic to/from all IP addresses.
            </summary>
        </member>
        <member name="P:Neon.Kube.AddressRule.DenyAll">
            <summary>
            Returns an <see cref="T:Neon.Kube.AddressRule"/> that <b>denies</b> network traffic to/from all IP addresses.
            </summary>
        </member>
        <member name="M:Neon.Kube.AddressRule.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.AddressRule.#ctor(System.String,Neon.Kube.AddressRuleAction)">
            <summary>
            Constructor.
            </summary>
            <param name="addressOrSubnet">
            Specifies the IP address or subnet or you may also specify <b>"any"</b>
            to specifiy all possible IP addresses.
            </param>
            <param name="action">Specifies whether network traffic is to be allowed or denied.</param>
        </member>
        <member name="P:Neon.Kube.AddressRule.IsAny">
            <summary>
            Returns <c>true</c> when the all possible IP addresses were specified.
            </summary>
        </member>
        <member name="P:Neon.Kube.AddressRule.AddressOrSubnet">
            <summary>
            Returns the specified IP address or subnet or <b>"any"</b> or <c>null</c> for all possible IP addresses.
            </summary>
        </member>
        <member name="P:Neon.Kube.AddressRule.Action">
            <summary>
            Returns the action to performed for network traffic to/from the address or subnet.
            </summary>
        </member>
        <member name="M:Neon.Kube.AddressRule.Validate(Neon.Kube.ClusterDefinition,System.String)">
            <summary>
            Validates the address rule.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <param name="context">Indicates where the address rule is specified, like: <b>ingress-rule-address</b> or <b>egress-address</b></param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown for an invalid rule.</exception>
        </member>
        <member name="T:Neon.Kube.AddressRuleAction">
            <summary>
            Enumerates the possible actions for an <see cref="T:Neon.Kube.AddressRule"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.AddressRuleAction.Allow">
            <summary>
            Allow network traffic to or from the IP address or subnet.
            </summary>
        </member>
        <member name="F:Neon.Kube.AddressRuleAction.Deny">
            <summary>
            Block network traffic to or from the IP address or subnet.
            </summary>
        </member>
        <member name="T:Neon.Kube.IngressProtocol">
            <summary>
            <para>
            Enumerates the network protocols supported by neonKUBE for ingress traffic.
            </para>
            <note>
            Kubernetes/Istio does not currently support protocols like UCP or ICMP.
            </note>
            </summary>
        </member>
        <member name="F:Neon.Kube.IngressProtocol.Http">
            <summary>
            HTTP
            </summary>
        </member>
        <member name="F:Neon.Kube.IngressProtocol.Https">
            <summary>
            HTTPS
            </summary>
        </member>
        <member name="F:Neon.Kube.IngressProtocol.Tcp">
            <summary>
            Basic TCP
            </summary>
        </member>
        <member name="T:Neon.Kube.IngressRule">
            <summary>
            Specifies a network ingress rule for the cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.IngressRule.Name">
            <summary>
            The name of the ingress rule.
            </summary>
        </member>
        <member name="P:Neon.Kube.IngressRule.Protocol">
            <summary>
            Identifies the network protocol.  This defaults to <see cref="F:Neon.Kube.IngressProtocol.Tcp"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.IngressRule.ExternalPort">
            <summary>
            The external ingress port.
            </summary>
        </member>
        <member name="P:Neon.Kube.IngressRule.NodePort">
            <summary>
            The Kubernetes NodePort. This is where the ingress gateway is listening.
            </summary>
        </member>
        <member name="P:Neon.Kube.IngressRule.AddressRules">
            <summary>
            <para>
            Optionally specifies whitelisted and/or blacklisted external addresses for
            inbound traffic.  This defaults to allowing inbound traffic from anywhere 
            when the property is <c>null</c> or empty.
            <note>
            Address rules are processed in order, from first to last so you may consider
            putting your blacklist rules before your whitelist rules.
            </note>
            </para>
            </summary>
        </member>
        <member name="P:Neon.Kube.IngressRule.TcpIdleTimeoutMinutes">
            <summary>
            <para>
            Optionally specifies the TCP idle time out for TCP related ingress protocols like
            <see cref="F:Neon.Kube.IngressProtocol.Http"/>, <see cref="F:Neon.Kube.IngressProtocol.Https"/>, and
            <see cref="F:Neon.Kube.IngressProtocol.Tcp"/>.  Inbound TCP connections that have no network
            traffic going either way will be closed by supported load balancers or routers.
            This defaults to <b>4 minutes</b>.
            </para>
            <note>
            <para>
            At this point, this property is supported only in cloud environments where we
            can easily control the cluster's external loag balancer.  This also has no
            impact for non-TCP rules.
            </para>
            <para>
            Also note that this value may be modified to ensure that it honors the range of
            values supported by the current cloud.
            </para>
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.IngressRule.TcpIdleTimeout">
            <summary>
            Returns <see cref="P:Neon.Kube.IngressRule.TcpIdleTimeoutMinutes"/> as a <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.IngressRule.IdleTcpReset">
            <summary>
            <para>
            Optionally controls whether the cluster router or load balancer sends a TCP RESET
            packet to both ends of a TCP connection that has been idle for longer than
            <see cref="P:Neon.Kube.IngressRule.TcpIdleTimeoutMinutes"/>.  This defaults to <c>false</c>.
            </para>
            <note>
            At this point, this property is supported only in cloud environments where we
            can easily control the cluster's external loag balancer.  This also has no
            impact for non-TCP rules.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Kube.IngressRule.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.NetworkCni">
            <summary>
            Enumerates the supported of cluster network providers.
            </summary>
        </member>
        <member name="F:Neon.Kube.NetworkCni.Calico">
            <summary>
            The <a href="https://projectcalico.org">Calico</a> network provider.  As of 01/2019, this is probably
            the most popular network provider.  This is currently the default provider deployed for a neonKUBE
            but we expect to change this to the <see cref="F:Neon.Kube.NetworkCni.Istio"/> integrated provider when that is ready.
            </summary>
        </member>
        <member name="F:Neon.Kube.NetworkCni.Istio">
            <summary>
            The <a href="https://istio.io">Istio</a> integrated provider.  This isn't quite ready for prime time
            yet but will eventually become the default provider.
            </summary>
        </member>
        <member name="T:Neon.Kube.NetworkOptions">
            <summary>
            Describes the network options for a cluster.
            </summary>
        </member>
        <member name="T:Neon.Kube.NetworkOptions.SubnetDefinition">
            <summary>
            Used for checking subnet conflicts below.
            </summary>
        </member>
        <member name="M:Neon.Kube.NetworkOptions.SubnetDefinition.#ctor(System.String,Neon.Net.NetworkCidr)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Subnet name.</param>
            <param name="cidr">Subnet CIDR.</param>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.SubnetDefinition.Name">
            <summary>
            Identifies the subnet.
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.SubnetDefinition.Cidr">
            <summary>
            The subnet CIDR.
            </summary>
        </member>
        <member name="M:Neon.Kube.NetworkOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.PremiseSubnet">
            <summary>
            Specifies the subnet for entire host network for on-premise environments like
            <see cref="F:Neon.Kube.HostingEnvironments.Machine"/>, <see cref="F:Neon.Kube.HostingEnvironments.HyperVLocal"/> and
            <see cref="F:Neon.Kube.HostingEnvironments.XenServer"/>.  This is required for those environments.
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.NodeSubnet">
            <summary>
            <para>
            The subnet where the cluster nodes reside.
            </para>
            <note>
            This property must be configured for the on-premise providers (<see cref="F:Neon.Kube.HostingEnvironments.Machine"/>, 
            <b>HyperV</b>, and <b>XenServer</b>,...).  This defaults to <b>10.100.0.0/16</b> for cloud deployments 
            but can be customized as required.
            </note>
            <note>
            For on-premise clusters, the statically assigned IP addresses assigned 
            to the nodes must reside within the this subnet.  The network gateway
            will be assumed to be the second address in the subnet and the broadcast
            address will assumed to be the last address.
            </note>
            <note>
            <para>
            For cloud deployments, nodes will be assigned reasolable IP addresses by default.  You may assigned specific
            IP addresses to nodes within the to nodes if necessary, with a couple reservations:
            </para>
            <list type="bullet">
                <item>
                The first 10 IP addresses of the <see cref="P:Neon.Kube.NetworkOptions.NodeSubnet"/> are reserved for use by the cloud as well
                as neonKUBE.  The default cloud <see cref="P:Neon.Kube.NetworkOptions.NodeSubnet"/> is <b>10.100.0.0/16</b> which means that
                addresses from <b>10.100.0.0 - 10.100.0.9</b> are reserved, so the first available node IP will be
                <b>10.100.0.10</b>.  Cloud platforms typically use IPs in the range for as the default gateway and
                also for DNS request forwarding.  neonKUBE reserves the remaining addresses for potential future
                features like integrated VPN and cluster management VMs.
                </item>
                <item>
                The last IP address of the <see cref="P:Neon.Kube.NetworkOptions.NodeSubnet"/> is also reserved.  Clouds typically use this
                as the UDP broadcast address for the network.  This will be <b>10.100.255.255</b> for the default
                cloud subnet.
                </item>
            </list>
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.PodSubnet">
            <summary>
            <para>
            Specifies the pod subnet to be used for the cluster.  This subnet will be
            split so that each node will be allocated its own subnet.  This defaults
            to <b>10.254.0.0/16</b>.
            </para>
            <note>
            <b>WARNING:</b> This subnet must not conflict with any other subnets
            provisioned within the premise network.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.ServiceSubnet">
            <summary>
            Specifies the subnet subnet to be used for the allocating service addresses
            within the cluster.  This defaults to <b>10.253.0.0/16</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.Nameservers">
            <summary>
            The IP addresses of the upstream DNS nameservers to be used by the cluster.  This defaults to the 
            Google Public DNS servers: <b>[ "8.8.8.8", "8.8.4.4" ]</b> when the property is <c>null</c> or empty.
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.Gateway">
            <summary>
            Specifies the default network gateway address to be configured for hosts.  This defaults to the 
            first usable address in the <see cref="P:Neon.Kube.NetworkOptions.PremiseSubnet"/>.  For example, for the <b>10.0.0.0/24</b> 
            subnet, this will be set to <b>10.0.0.1</b>.  This is ignored for cloud hosting 
            environments.
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.MutualPodTLS">
            <summary>
            Optionally enable Istio mutual TLS support for cross pod communication.
            This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.IngressRules">
            <summary>
            Optionally sets the ingress routing rules external traffic received by nodes
            with <see cref="P:Neon.Kube.NodeDefinition.Ingress"/> enabled into one or more Istio ingress
            gateway services which are then responsible for routing to the target Kubernetes 
            services.
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.EgressAddressRules">
            <summary>
            <para>
            Optionally specifies whitelisted and/or blacklisted external addresses for
            outbound traffic.  This defaults to allowing outbound traffic to anywhere 
            when the property is <c>null</c> or empty.
            </para>
            <note>
            Address rules are processed in order, from first to last so you may consider
            putting your blacklist rules before your whitelist rules.
            </note>
            <note>
            This currently applies to all network ports.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.SshAddressRules">
            <summary>
            <para>
            Optionally specifies whitelisted and/or blacklisted external addresses for
            node management via SSH NAT rules.  This defaults to allowing inbound traffic 
            from anywhere when the property is <c>null</c> or empty.
            </para>
            <note>
            Address rules are processed in order, from first to last so you may consider
            putting your blacklist rules before your whitelist rules.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.ReservedIngressStartPort">
            <summary>
            <para>
            Specifies the start of a range of ingress load balancer ports reserved by
            neonKUBE.  These are reserved for temporarily exposing SSH from individual 
            cluster nodes to the Internet during cluster setup as well as afterwards so 
            that a cluster node can be accessed remotely by a cluster operator as well
            as for other purposes and for potential future features such as an integrated
            VPN.
            </para>
            <note>
            The number ports between <see cref="P:Neon.Kube.NetworkOptions.ReservedIngressStartPort"/> and <see cref="P:Neon.Kube.NetworkOptions.ReservedIngressEndPort"/>
            must include at least as many ports as there will be nodes deployed to the cluster
            for the temporary SSH NAT rules plus another 100 ports reserved for other purposes.
            This range defaults to <b>64000-64999</b> which will support a cluster with up to
            900 nodes.  This default range is unlikely to conflict with ports a cluster is likely
            to need expose to the Internet like HTTP/HTTPS (80/443).  You can change this range 
            for your cluster to resolve any conflicts when necessary.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.ReservedIngressEndPort">
            <summary>
            <para>
            Specifies the end of a range of ingress load balancer ports reserved by
            neonKUBE.  These are reserved for temporarily exposing SSH from individual 
            cluster nodes to the Internet during cluster setup as well as afterwards so 
            that a cluster node can be accessed remotely by a cluster operator as well
            as for other purposes and for potential future features such as an integrated
            </para>
            <note>
            The number ports between <see cref="P:Neon.Kube.NetworkOptions.ReservedIngressStartPort"/> and <see cref="P:Neon.Kube.NetworkOptions.ReservedIngressEndPort"/>
            must include at least as many ports as there will be nodes deployed to the cluster
            for the temporary SSH NAT rules plus another 100 ports reserved for other purposes.
            This range defaults to <b>64000-64999</b> which will support a cluster with up to
            900 nodes.  This default range is unlikely to conflict with ports a cluster is likely
            to need expose to the Internet like HTTP/HTTPS (80/443).  You can change this range 
            for your cluster to resolve any conflicts when necessary.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.FirstSshManagementPort">
            <summary>
            Returns the port number for the reserved management SSH ingress NAT rule.
            </summary>
        </member>
        <member name="M:Neon.Kube.NetworkOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.NetworkOptions.ValidateCloudNodeAddress(Neon.Kube.ClusterDefinition,Neon.Kube.NodeDefinition)">
            <summary>
            Ensures that for cloud deployments, an explicit node address assignment does not conflict 
            with any VNET addresses reserved by the cloud provider or neonKUBE.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <param name="nodeDefinition">The node definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown for cloud deployments where the node specifies an explicit IP address that conflicts with a reserved VNET address.</exception>
        </member>
        <member name="T:Neon.Kube.NodeDefinition">
            <summary>
            Describes a cluster node.
            </summary>
        </member>
        <member name="M:Neon.Kube.NodeDefinition.ParseFromLabels(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Parses a <see cref="T:Neon.Kube.NodeDefinition"/> from Kubernetes node labels.
            </summary>
            <param name="labels">The node labels.</param>
            <returns>The parsed <see cref="T:Neon.Kube.NodeDefinition"/>.</returns>
        </member>
        <member name="M:Neon.Kube.NodeDefinition.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.Name">
            <summary>
            Uniquely identifies the node within the cluster.
            </summary>
            <remarks>
            <note>
            The name may include only letters, numbers, periods, dashes, and underscores and
            also that all names will be converted to lower case.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.Address">
            <summary>
            The node's IP address or <c>null</c> if one has not been assigned yet.
            Note that an node's IP address cannot be changed once the node has
            been added to the cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.PublicSshEndpoint">
            <summary>
            <b>INTERNAL USE ONLY:</b> Holds the IP endpoint that can be used to connect to
            the node via SSH from outside the cluster, particularily for cloud deployments.
            This references the cluster's public IP address and an allocated load balancer
            NAT port that routes to the node.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.IsMaster">
            <summary>
            Indicates that the node will act as a master node (defaults to <c>false</c>).
            </summary>
            <remarks>
            <para>
            Master nodes are reponsible for managing service discovery and coordinating 
            pod deployment across the cluster.
            </para>
            <para>
            An odd number of master nodes must be deployed in a cluster (to help prevent
            split-brain).  One master node may be deployed for non-production environments,
            but to enable high-availability, three or five master nodes may be deployed.
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.IsWorker">
            <summary>
            Returns <c>true</c> for worker nodes.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.Role">
            <summary>
            Returns the node's <see cref="T:Neon.Kube.NodeRole"/>.  This defaults to <see cref="F:Neon.Kube.NodeRole.Worker"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.Ingress">
            <summary>
            <para>
            Indicates whether this node should be configured to accept external network traffic
            on node ports and route that into the cluster.
            </para>
            <note>
            If all nodes have <see cref="P:Neon.Kube.NodeDefinition.Ingress"/> set to <c>false</c> and the cluster defines
            one or more <see cref="P:Neon.Kube.NetworkOptions.IngressRules"/> then neonKUBE will choose a
            reasonable set of nodes to accept ibound traffic.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.Labels">
            <summary>
            Specifies the labels to be assigned to the cluster node.  These can provide
            detailed information such as the host CPU, RAM, storage, etc.  <see cref="T:Neon.Kube.NodeLabels"/>
            for more information.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.Taints">
            <summary>
            Specifies the taints to be assigned to the cluster node.  
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.Vm">
            <summary>
            Hypervisor hosting related options for environments like Hyper-V and XenServer.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.Azure">
            <summary>
            Azure provisioning options for this node, or <c>null</c> to use reasonable defaults.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.StepDelay">
            <summary>
            <b>HACK:</b> This used by <see cref="T:Neon.Kube.SetupController`1"/> to introduce a delay for this
            node when executing the next setup step.
            </summary>
        </member>
        <member name="M:Neon.Kube.NodeDefinition.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the node definition.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:System.ArgumentException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.NodeLabels">
            <summary>
            Describes the standard cluster and custom labels to be assigned to 
            a cluster node.
            </summary>
            <remarks>
            <para>
            Labels are name/value properties that can be assigned to the cluster
            nodes for pod scheduling and other purposes.
            </para>
            <para>
            By convention, label names should use a reverse domain name prefix using a
            DNS domain you control.  For example, neonCLUSTER cluster related labels 
            are prefixed with <b>"io.neonkube/..."</b>.  You should follow this convention 
            for any custom labels you define.
            </para>
            <note>
            You may specify labels without a domain prefix if you're not concerned
            about potential conflicts.
            </note>
            <para>
            Label names must begin and end with a letter or digit and may include
            letters, digits, dashes and dots within.  Dots or dashes must not appear
            consecutively.
            </para>
            <note>
            Whitespace is not allowed in label values.
            </note>
            <para>
            This class exposes several built-in cluster properties.  You can use
            the <see cref="P:Neon.Kube.NodeLabels.Custom"/> dictionary to add your own labels.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.NodeLabels.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.NodeLabels.#ctor(Neon.Kube.NodeDefinition)">
            <summary>
            Constructor.
            </summary>
            <param name="node">The node definition.</param>
        </member>
        <member name="P:Neon.Kube.NodeLabels.Node">
            <summary>
            The parent node definition.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelDatacenter">
            <summary>
            Reserved label name that identifies the datacenter.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelEnvironment">
            <summary>
            Reserved label name that identifies the cluster environment.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelAddress">
            <summary>
            Reserved label name that identifies the node's private IP address.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelRole">
            <summary>
            Reserved label name that identifies the node role.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelIngress">
            <summary>
            Reserved label name used to indicate that a node should route external traffic into the cluster.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelAzureVmSize">
            <summary>
            Reserved label name that identifies the node's Azure VM size.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelAzureStorageType">
            <summary>
            Reserved label name that identifies the node's Azure attached storage type.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelAzureDriveSize">
            <summary>
            Reserved label name that identifies the node's Azure attached drive size.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelStorageSize">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.StorageSize"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelStorageLocal">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.StorageLocal"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelStorageHDD">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.StorageHDD"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelStorageRedundant">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.StorageRedundant"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelStorageEphemeral">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.StorageEphemeral"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.StorageSize">
            <summary>
            <b>io.neonkube/storage.size</b> [<c>string</c>]: Specifies the node primary drive 
            storage capacity in bytes (<see cref="T:Neon.Common.ByteUnits"/>).
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.StorageLocal">
            <summary>
            <b>io.neonkube/storage.local</b> [<c>bool</c>]: Specifies whether the node storage is hosted
            on the node itself or is mounted as a remote file system or block device.  This defaults
            to <c>true</c> for on-premise clusters and is computed for cloud deployments.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.StorageHDD">
            <summary>
            <b>io.neonkube/storage.hdd</b> [<c>bool</c>]: Indicates that the storage is backed
            by a spinning drive as opposed to a SSD.  This defaults to <c>false</c> for 
            on-premise clusters and is computed for cloud deployments.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.StorageRedundant">
            <summary>
            <b>io.neonkube/storage.redundant</b> [<c>bool</c>]: Indicates that the storage is redundant.  This
            may be implemented locally using RAID1+ or remotely using network or cloud-based file systems.
            This defaults to <c>false</c> for on-premise clusters and is computed for cloud deployments.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.StorageEphemeral">
            <summary>
            <b>io.neonkube/storage.redundant</b> [<c>bool</c>]: Indicates that the storage is ephemeral.
            All data will be lost when the host is restarted.  This defaults to <c>false</c> for 
            on-premise clusters and is computed for cloud deployments.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelComputeCores">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.ComputeCores"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelComputeRamMiB">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.ComputeRam"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.ComputeCores">
            <summary>
            <b>io.neonkube/compute.cores</b> [<c>int</c>]: Specifies the number of CPU cores.
            This defaults to <b>0</b> for <see cref="F:Neon.Kube.HostingEnvironments.Machine"/>
            and is initialized for cloud and Hypervisor based hosting environments.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.ComputeRam">
            <summary>
            <b>io.neonkube/compute.ram_mb</b> [<c>int</c>]: Specifies the available RAM in
            megabytes.  This defaults to <b>0</b> for <see cref="F:Neon.Kube.HostingEnvironments.Machine"/>
            and is initialized for cloud and Hypervisor based hosting environments.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelPhysicalLocation">
            <summary>
            Reserved label name for <see cref="F:Neon.Kube.NodeLabels.LabelPhysicalPower"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelPhysicalMachine">
            <summary>
            Reserved label name for <see cref="F:Neon.Kube.NodeLabels.LabelPhysicalMachine"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelPhysicalAvailabilitytSet">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.PhysicalAvailabilitySet"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelPhysicalPower">
            <summary>
            Reserved label name for <see cref="F:Neon.Kube.NodeLabels.LabelPhysicalPower"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.PhysicalLocation">
            <summary>
            <b>io.neonkube/physical.location</b> [<c>string</c>]: A free format string describing the
            physical location of the server.  This defaults to the 
            <b>empty string</b>.
            </summary>
            <remarks>
            <para>
            You should use a consistent convention to describe a physical machine location.
            Here are some examples:
            </para>
            <list type="bullet">
            <item><i>rack-slot</i></item>
            <item><i>rack-number</i>/<i>rack-slot</i></item>
            <item><i>row</i>/<i>rack-number</i>/<i>rack-slot</i></item>
            <item><i>floor</i>/<i>row</i>/<i>rack-number</i>/<i>rack-slot</i></item>
            <item><i>building</i>/<i>floor</i>/<i>row</i>/<i>rack-number</i>/<i>rack-slot</i></item>
            </list>
            </remarks>
        </member>
        <member name="P:Neon.Kube.NodeLabels.PhysicalMachine">
            <summary>
            <b>io.neonkube/physical.model</b> [<c>string</c>]: A free format string describing the
            physical server computer model (e.g. <b>Dell-PowerEdge-R220</b>).  This defaults to the <b>empty string</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.PhysicalAvailabilitySet">
            <summary>
            <para>
            <b>io.neonkube/physical.availability-set</b> [<c>string</c>]: Indicates that 
            the hosting environment will try to ensure that cluster VMs with the same
            availability set are deployed in a manner that reduces the possibility that
            more than one VM at a time will be taken offline for maintenance.
            </para>
            <para>
            This defaults to <b>master</b> for cluster master nodes and <b>worker</b>
            for worker nodes.
            </para>
            <note>
            <b>IMPORTANT:</b> Master nodes should generally be located within their
            own availability set.
            </note>
            </summary>
            <remarks>
            <para>
            This is typcally used for distributing pods across cluster nodes to 
            protect against more than one of them going down at once due to
            scheduled maintenance.
            </para>
            <para>
            On premise deployments don't currently support automatic provisioning by
            availability sets but that may happen in the future (e.g. by managing 
            clusters of XenServer host machines).  You'll need to manually specify 
            these labels to match your deployment and maintenance policies.
            </para>
            <para>
            Cloud deployments generally implement the concept of availability sets.
            These are used to group VMs together such that only one will be down
            for scheduled maintenance at any given moment and also that after a
            reboot, there will be a reasonable delay (like 30 minutes) to allow
            the VMs to collectively recover before rebooting the next VM.  neonKUBE
            will provision node VMs that have the same <see cref="P:Neon.Kube.NodeLabels.PhysicalAvailabilitySet"/> 
            into the same cloud availability set (for clouds that support this).
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Kube.NodeLabels.PhysicalPower">
            <summary>
            <b>io.neonkube/physical.power</b> [<c>string</c>]: Describes the physical power
            to the server may be controlled.  This defaults to the <b>empty string</b>.
            </summary>
            <remarks>
            <note>
            The format for this property is not currently defined.
            </note>
            <para>
            This field includes the information required to remotely control the power to
            the physical host machine via a Power Distribution Unit (PDU).
            </para>
            </remarks>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelIstio">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.Istio"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.Istio">
            <summary>
            <b>io.neonkube.istio.enabled</b> [<c>bool</c>]: Indicates that Istio 
            will be deployed to this node.  This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelElasticsearch">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.Elasticsearch"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelM3DB">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.M3DB"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.Elasticsearch">
            <summary>
            <b>io.neonkube.monitor.elasticsearch</b> [<c>bool</c>]: Indicates that Elasticsearch 
            will be deployed to this node if <see cref="P:Neon.Kube.ElasticsearchOptions.Enabled"/> is <c>true</c>.  
            This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.M3DB">
            <summary>
            <b>io.neonkube.monitor.m3db</b> [<c>bool</c>]: Indicates that M3DB 
            will be deployed to this node if <see cref="P:Neon.Kube.PrometheusOptions.Enabled"/> is <c>true</c>.  
            This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.Custom">
            <summary>
            Custom node labels.
            </summary>
            <remarks>
            <para>
            Use this property to define custom cluster node labels.
            </para>
            <note>
            The <b>io.neonkube/</b> label prefix is reserved.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.NodeLabels.Standard">
            <summary>
            Enumerates the standard neonKUBE node labels.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.All">
            <summary>
            Enumerates all node labels.
            </summary>
        </member>
        <member name="M:Neon.Kube.NodeLabels.ParseCheck(System.Collections.Generic.KeyValuePair{System.String,System.String},System.Action)">
            <summary>
            Logs a warning if a label field parse action fails.
            </summary>
            <param name="label">The label being parsed.</param>
            <param name="parseAction">The parse action.</param>
        </member>
        <member name="M:Neon.Kube.NodeLabels.Parse(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Parses a dictionary of name/value labels by setting the appropriate
            properties of the parent node.
            </summary>
            <param name="labels">The label dictionary.</param>
        </member>
        <member name="M:Neon.Kube.NodeLabels.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the node labels.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:System.ArgumentException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.NodeOptions">
            <summary>
            Describes cluster node options.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeOptions.Upgrade">
            <summary>
            Specifies whether the cluster node operating system should be upgraded
            during cluster preparation.  This defaults to <see cref="F:Neon.Kube.OsUpgrade.Full"/>
            to pick up most criticial updates.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeOptions.AllowPackageManagerIPv6">
            <summary>
            Allow the Linux package manager to use IPv6 when communicating with
            package mirrors.  This defaults to <c>false</c> to restrict access
            to IPv4.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeOptions.PackageManagerRetries">
            <summary>
            Specifies the number of times the host package manager should retry
            failed index or package downloads.  This defaults to <b>5</b>.
            </summary>
        </member>
        <member name="M:Neon.Kube.NodeOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.NodeRole">
            <summary>
            Enumerates the roles a cluster node can assume.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeRole.Master">
            <summary>
            The node is a a cluster master.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeRole.Worker">
            <summary>
            The node is a cluster worker.
            </summary>
        </member>
        <member name="T:Neon.Kube.OsUpgrade">
            <summary>
            Enumerates the possible cluster node operating system upgrade options.
            </summary>
        </member>
        <member name="F:Neon.Kube.OsUpgrade.None">
            <summary>
            Perform no operating system upgrade.
            </summary>
        </member>
        <member name="F:Neon.Kube.OsUpgrade.Partial">
            <summary>
            Upgrades many but not all components.  This is equivalent to performing: <b>apt-get upgrade</b>
            </summary>
        </member>
        <member name="F:Neon.Kube.OsUpgrade.Full">
            <summary>
            Upgrades all components.  This is equivalent to performing: <b>apt-get dist-upgrade</b>
            </summary>
        </member>
        <member name="T:Neon.Kube.SecurityOptions">
            <summary>
            Specifies cluster security options.
            </summary>
        </member>
        <member name="P:Neon.Kube.SecurityOptions.PasswordLength">
            <summary>
            cluster hosts are configured with a random root account password.
            This defaults to <b>20</b> characters.  The minumum length is <b>8</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.SecurityOptions.KeepNodePassword">
            <summary>
            <para>
            Normally cluster nodes are configured such that the <b>sysadmin</b> user account 
            password is set to cryptographically random password with <see cref="P:Neon.Kube.SecurityOptions.PasswordLength"/>
            characters.  This happens during cluster provisioning.
            </para>
            <para>
            You can disable these secure passwords by setting <see cref="P:Neon.Kube.SecurityOptions.KeepNodePassword"/> to 
            <c>true</c>.  In general, this means that the <b>sysadmin</b> password will generally
            remain as the insecure <b>sysadmin0000</b> password.
            </para>
            <note>
            <b>WARNING:</b> Be very careful about enabling this for production clusters!
            </note>
            </summary>
            <remarks>
            <para>
            There are really only two scnerios where you'd want to enable this:
            </para>
            <list type="number">
            <item>
            <b>Cluster development and debugging:</b> Sometimes neonKUBE developers may wish to enable
            this while developing and debugging cluster deployment and other operations to make it easy
            to SSH into cluster nodes to poke around.
            </item>
            <item>
            <b>Bare metal (machine) deployments:</b> Cluster operators may wish to configure a secure
            <b>sysadmin</b> password when they manually configure the target node machines and/or 
            virtual machines.  Setting this to <c>true</c> will have the <see cref="F:Neon.Kube.HostingEnvironments.Machine"/>
            cluster provisioner to retain this secure password rather than setting a new one. 
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SecurityOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.SetupOptions">
            <summary>
            Specifies setup related options.
            </summary>
        </member>
        <member name="P:Neon.Kube.SetupOptions.Debug">
            <summary>
            <para>
            Indicates that cluster prepare and setup should be run in <b>debug mode</b>.
            This is intended to help debugging cluster setup issues by having scripts
            uploaded multiple times at different stages of setup so that setup can
            be restarted with new scripts without having to restart setup from the
            beginning.  This defaults to <c>false</c>.
            </para>
            <note>
            This is intended for use by cluster developers.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.SetupOptions.StepStaggerSeconds">
            <summary>
            <para>
            Specifies the maximum delay to be added between steps at strategic points 
            during cluster preparation and setup to help mitigate potential problems 
            when mutiple cluster nodes are trying to access the same Internet resources,
            potentially getting throttled by the remote endpoint.
            </para>
            <para>
            This defaults to <b>5 seconds</b> between these steps  Set this to 0 to disable
            the delay.
            </para>
            </summary>
        </member>
        <member name="M:Neon.Kube.SetupOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.NamespaceDoc">
            <summary>
            This namespace includes neonKUBE Kubernetes distribution related types.
            </summary>
        </member>
        <member name="T:Neon.Kube.NodeProxyCreator">
            <summary>
            Creates a <see cref="T:Neon.Kube.SshProxy`1"/> for the specified host and server name,
            configuring logging and the credentials as specified by the global command
            line options.
            </summary>
            <param name="name">The node name.</param>
            <param name="address">The node's private IP address.</param>
            <param name="appendToLog">
            Pass <c>true</c> to append to an existing log file (or create one if necessary)
            or <c>false</c> to replace any existing log file with a new one.
            </param>
            <returns>The <see cref="T:Neon.Kube.SshProxy`1"/>.</returns>
        </member>
        <member name="T:Neon.Kube.ClusterProxy">
            <summary>
            Used to remotely manage a cluster via SSH/SCP.
            </summary>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.#ctor(Neon.Kube.KubeConfigContext,Neon.Kube.NodeProxyCreator,System.Boolean,Neon.Kube.RunOptions)">
            <summary>
            Constructs a cluster proxy from a cluster login.
            </summary>
            <param name="kubeContext">The cluster context.</param>
            <param name="nodeProxyCreator">
            The optional application supplied function that creates a node proxy
            given the node name, public address or FQDN, private address, and
            the node definition.
            </param>
            <param name="appendToLog">Optionally have logs appended to an existing log file rather than creating a new one.</param>
            <param name="defaultRunOptions">
            Optionally specifies the <see cref="T:Neon.Kube.RunOptions"/> to be assigned to the 
            <see cref="P:Neon.Kube.SshProxy`1.DefaultRunOptions"/> property for the
            nodes managed by the cluster proxy.  This defaults to <see cref="F:Neon.Kube.RunOptions.None"/>.
            </param>
            <remarks>
            The <paramref name="nodeProxyCreator"/> function will be called for each node in
            the cluster definition giving the application the chance to create the management
            proxy using the node's SSH credentials and also to specify logging.  A default
            creator that doesn't initialize SSH credentials and logging is used if <c>null</c>
            is passed.
            </remarks>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.#ctor(Neon.Kube.ClusterDefinition,Neon.Kube.NodeProxyCreator,System.Boolean,Neon.Kube.RunOptions)">
            <summary>
            Constructs a cluster proxy from a cluster definition.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <param name="nodeProxyCreator">
            The application supplied function that creates a management proxy
            given the node name, public address or FQDN, private address, and
            the node definition.
            </param>
            <param name="appendToLog">Optionally have logs appended to an existing log file rather than creating a new one.</param>
            <param name="defaultRunOptions">
            Optionally specifies the <see cref="T:Neon.Kube.RunOptions"/> to be assigned to the 
            <see cref="P:Neon.Kube.SshProxy`1.DefaultRunOptions"/> property for the
            nodes managed by the cluster proxy.  This defaults to <see cref="F:Neon.Kube.RunOptions.None"/>.
            </param>
            <remarks>
            The <paramref name="nodeProxyCreator"/> function will be called for each node in
            the cluster definition giving the application the chance to create the node
            proxy using the node's SSH credentials and also to specify logging.  A default
            creator that doesn't initialize SSH credentials and logging is used if <c>null</c>
            is passed.
            </remarks>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.Dispose">
            <summary>
            Releases all resources associated with the instance.
            </summary>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.Dispose(System.Boolean)">
            <summary>
            Releases all associated resources.
            </summary>
            <param name="disposing">Pass <c>true</c> if we're disposing, <c>false</c> if we're finalizing.</param>
        </member>
        <member name="P:Neon.Kube.ClusterProxy.Name">
            <summary>
            Returns the cluster name.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterProxy.HostingManager">
            <summary>
            The associated <see cref="T:Neon.Kube.IHostingManager"/> or <c>null</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterProxy.KubeContext">
            <summary>
            Returns the cluster context.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterProxy.Definition">
            <summary>
            Returns the cluster definition.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterProxy.Nodes">
            <summary>
            Returns the read-only list of cluster node proxies.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterProxy.FirstMaster">
            <summary>
            Returns the first cluster master node as sorted by name.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterProxy.SecureRunOptions">
            <summary>
            Specifies the <see cref="T:Neon.Kube.RunOptions"/> to use when executing commands that 
            include secrets.  This defaults to <see cref="F:Neon.Kube.RunOptions.Redact"/> for best 
            security but may be changed to just <see cref="F:Neon.Kube.RunOptions.None"/> when debugging
            cluster setup.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterProxy.Masters">
            <summary>
            Enumerates the cluster master node proxies sorted in ascending order by name.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterProxy.Workers">
            <summary>
            Enumerates the cluster worker node proxies sorted in ascending order by name.
            </summary>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.CreateNodes">
            <summary>
            Initializes or reinitializes the <see cref="P:Neon.Kube.ClusterProxy.Nodes"/> list.  This is called during
            construction and also in rare situations where the node proxies need to be 
            recreated (e.g. after configuring node static IP addresses).
            </summary>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.GetNode(System.String)">
            <summary>
            Returns the <see cref="T:Neon.Kube.SshProxy`1"/> instance for a named node.
            </summary>
            <param name="nodeName">The node name.</param>
            <returns>The node definition.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the name node is not present in the cluster.</exception>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.FindNode(System.String)">
            <summary>
            Looks for the <see cref="T:Neon.Kube.SshProxy`1"/> instance for a named node.
            </summary>
            <param name="nodeName">The node name.</param>
            <returns>The node proxy instance or <c>null</c> if the named node does not exist.</returns>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.GetReachableMaster(Neon.Net.ReachableHostMode)">
            <summary>
            Returns a master node that is reachable via the network because it answers a ping.
            </summary>
            <param name="failureMode">Specifies what should happen when there are no reachable masters.</param>
            <returns>The reachable master node or <c>null</c>.</returns>
            <exception cref="T:Neon.Kube.KubeException">
            Thrown if no masters are reachable and <paramref name="failureMode"/> 
            is passed as <see cref="F:Neon.Net.ReachableHostMode.Throw"/>.
            </exception>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.GetReachableNode(System.Func{Neon.Kube.SshProxy{Neon.Kube.NodeDefinition},System.Boolean},Neon.Net.ReachableHostMode)">
            <summary>
            Selects a cluster node from the set of nodes that match a predicate that is 
            reachable via the network because it answers a ping.
            </summary>
            <param name="predicate">Predicate used to select the candidate nodes.</param>
            <param name="failureMode">Specifies what should happen when there are no reachable nodes.</param>
            <returns>The reachable node or <c>null</c>.</returns>
            <exception cref="T:Neon.Kube.KubeException">
            Thrown if no nodes matching the predicate are reachable and <paramref name="failureMode"/> 
            is passed as <see cref="F:Neon.Net.ReachableHostMode.Throw"/>.
            </exception>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.Configure(Neon.Kube.ConfigStepList)">
            <summary>
            Performs cluster configuration steps.
            </summary>
            <param name="steps">The configuration steps.</param>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.GetFileUploadSteps(System.Collections.Generic.IEnumerable{Neon.Kube.SshProxy{Neon.Kube.NodeDefinition}},System.String,System.String,System.Int32,System.Text.Encoding,System.String)">
            <summary>
            Returns steps that upload a text file to a set of cluster nodes.
            </summary>
            <param name="nodes">The cluster nodes to receive the upload.</param>
            <param name="path">The target path on the Linux node.</param>
            <param name="text">The input text.</param>
            <param name="tabStop">Optionally expands TABs into spaces when non-zero.</param>
            <param name="outputEncoding">Optionally specifies the output text encoding (defaults to UTF-8).</param>
            <param name="permissions">Optionally specifies target file permissions (must be <c>chmod</c> compatible).</param>
            <returns>The steps.</returns>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.GetFileUploadSteps(Neon.Kube.SshProxy{Neon.Kube.NodeDefinition},System.String,System.String,System.Int32,System.Text.Encoding,System.String)">
            <summary>
            Returns steps that upload a text file to a cluster node.
            </summary>
            <param name="node">The cluster node to receive the upload.</param>
            <param name="path">The target path on the Linux node.</param>
            <param name="text">The input text.</param>
            <param name="tabStop">Optionally expands TABs into spaces when non-zero.</param>
            <param name="outputEncoding">Optionally specifies the output text encoding (defaults to UTF-8).</param>
            <param name="permissions">Optionally specifies target file permissions (must be <c>chmod</c> compatible).</param>
            <returns>The steps.</returns>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.LogLine(System.String)">
            <summary>
            Writes a message to the logs associated with all cluster nodes.
            </summary>
            <param name="message">Optionally specifies the log message.</param>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.GetTimeUtc">
            <summary>
            Returns the current time (UTC) for the cluster by fetching the 
            time from one of the cluster masters.
            </summary>
            <returns>The cluster's current <see cref="T:System.DateTime"/> (UTC).</returns>
        </member>
        <member name="T:Neon.Kube.CommandBundle">
            <summary>
            Describes a collection of files to be uploaded to a Linux server along with the command to be executed 
            after the files have been unpacked.
            </summary>
            <remarks>
            <para>
            This class is intended for use with the <see cref="M:Neon.Kube.SshProxy`1.RunCommand(Neon.Kube.CommandBundle,Neon.Kube.RunOptions)"/>
            and  <see cref="M:Neon.Kube.SshProxy`1.SudoCommand(Neon.Kube.CommandBundle,Neon.Kube.RunOptions)"/> methods for situations where
            one or more files need to be uploaded to a cluster node and be used when a command is executed.
            </para>
            <para>
            To use this class, construct an instance passing the command and arguments to be executed.  The command be 
            an absolute reference to an executable in folders such as <b>/bin</b> or <b>/usr/local/bin</b>, an executable
            somewhere on the current PATH, or relative to the files unpacked from the bundle.  The current working directory
            will be set to the folder where the bundle was unpacked, so you can reference local executables like
            <b>./MyExecutable</b>.
            </para>
            <para>
            Once a bundle is constructed, you will add <see cref="T:Neon.Kube.CommandFile"/> instances specifying the
            file data you want to include.  These include the relative path to the file to be uploaded as well
            as its text or binary data.  You may also indicate whether each file is to be marked as executable.
            </para>
            </remarks>
        </member>
        <member name="F:Neon.Kube.CommandBundle.ArgBreak">
            <summary>
            <para>
            This is a meta command line argument that can be added to a command
            to indicate that the following non-command line option is not to be
            considered to be the value for the previous command line option.
            </para>
            <para>
            This is entirely optional but can make <see cref="M:Neon.Kube.CommandBundle.ToBash(System.String)"/> 
            formatting a bit nicer.
            </para>
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandBundle.NormalizeArgs(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Normalizes the bundle command arguments into a single list of strings
            by expanding any arguments that can enumerate strings, normalizing common
            value types like booleans, and adding surrounding quotes if necessary.
            </summary>
            <param name="args">The arguments to be normalized.</param>
            <param name="keepArgBreaks">
            Optionally specifies that any <see cref="F:Neon.Kube.CommandBundle.ArgBreak"/> arguments are 
            included in the output.
            </param>
            <returns>List of normalized arguments.</returns>
        </member>
        <member name="M:Neon.Kube.CommandBundle.SafeArg(System.String)">
            <summary>
            Ensures that a Bash command argument is escaped as necessary.
            </summary>
            <param name="arg">The argument string.</param>
            <returns>The safe argument.</returns>
        </member>
        <member name="M:Neon.Kube.CommandBundle.FromScript(System.String)">
            <summary>
            Creates a bundle that simply uploads and runs a (<c>string</c>) script.
            </summary>
            <param name="script">The script text.</param>
            <returns>The <see cref="T:Neon.Kube.CommandBundle"/>.</returns>
        </member>
        <member name="M:Neon.Kube.CommandBundle.FromScript(System.Text.StringBuilder)">
            <summary>
            Creates a bundle that simply uploads and runs a (<see cref="T:System.Text.StringBuilder"/>) script.
            </summary>
            <param name="script">The script text.</param>
            <returns>The <see cref="T:Neon.Kube.CommandBundle"/>.</returns>
        </member>
        <member name="M:Neon.Kube.CommandBundle.#ctor(System.String,System.Object[])">
            <summary>
            Constructor.
            </summary>
            <param name="command">The command.</param>
            <param name="args">The command arguments or <c>null</c>.</param>
            <remarks>
            <para>
            The <paramref name="args"/> parameter optionally specifies an array of
            command argument objects.  With a few exceptions, these arguments will 
            be passed to the command by rendering the object into a <c>string</c>
            by calling its <see cref="M:System.Object.ToString"/> method.  <c>null</c>
            and empty string arguments will be ignored and <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            arguments will be expanded.
            </para>
            <para>
            <c>bool</c> and <c>double</c> arguments get special treatment.  <c>bool</c>
            values will be rendered as <c>true</c> or <c>false</c> and <c>double</c>
            arguments will be rendered using <c>double.ToString("#.0")</c>.  If you
            need something different, you can convert your arguments to strings first.
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Kube.CommandBundle.Command">
            <summary>
            Returns the command to be executed after the bundle has been unpacked.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandBundle.Args">
            <summary>
            Returns the command arguments.
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandBundle.AddFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a text file to be uploaded before executing the command.
            </summary>
            <param name="path">The file path relative to the directory where the command will be executed.</param>
            <param name="text">The file text.</param>
            <param name="isExecutable">Optionally specifies that the file is to be marked as executable.</param>
            <param name="linuxCompatible">
            Optionally controls whether the text is made Linux compatible by removing carriage returns
            and expanding TABs into spaces.  This defaults to <c>true</c>.
            </param>
        </member>
        <member name="M:Neon.Kube.CommandBundle.AddFile(System.String,System.Byte[],System.Boolean)">
            <summary>
            Adds a binary file to be uploaded before executing the command.
            </summary>
            <param name="path">The file path relative to the directory where the command will be executed.</param>
            <param name="data">The file data.</param>
            <param name="isExecutable">Optionally specifies that the file is to be marked as executable.</param>
        </member>
        <member name="M:Neon.Kube.CommandBundle.Validate">
            <summary>
            Verifies that the bundle is valid.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the bundle is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.CommandBundle.ToString">
            <summary>
            Renders the command and arguments as a Bash compatible command line.
            </summary>
            <returns>The command line.</returns>
        </member>
        <member name="M:Neon.Kube.CommandBundle.ToBash(System.String)">
            <summary>
            <para>
            Formats the command such that it could be added to a Bash script.
            </para>
            <note>
            This doesn't work if the command has attached files.
            </note>
            </summary>
            <param name="comment">Optional comment text (without a leading <b>#</b>).</param>
            <returns>The command formatted for Bash.</returns>
            <exception cref="T:System.NotSupportedException">
            Thrown because <see cref="M:Neon.Kube.CommandBundle.ToBash(System.String)"/> does not support commands with attached files.
            </exception>
            <remarks>
            This can be useful for making copies of cluster configuration commands
            on the server as scripts for situations where system operators need
            to manually tweak things.
            </remarks>
        </member>
        <member name="T:Neon.Kube.CommandFile">
            <summary>
            Describes a file to be included in a <see cref="T:Neon.Kube.CommandBundle"/>.
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandFile.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandFile.Path">
            <summary>
            The relative path of the file within the bundle.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandFile.Text">
            <summary>
            The file text.  This will be uploaded encoded as UTF-8.
            </summary>
            <remarks>
            <note>
            No transformations will be performed on the text.  Specifically, Windows style line endings
            <b>will not</b> be converted to Linux standard TAB characters will not be expanded into
            spaces.  You'll need perform these yourself if necessary.
            </note>
            <note>
            Only one of <see cref="P:Neon.Kube.CommandFile.Text"/> or <see cref="P:Neon.Kube.CommandFile.Data"/> may be specified.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.CommandFile.Data">
            <summary>
            The file binary data.
            </summary>
            <remarks>
            <note>
            Only one of <see cref="P:Neon.Kube.CommandFile.Text"/> or <see cref="P:Neon.Kube.CommandFile.Data"/> may be specified.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.CommandFile.IsExecutable">
            <summary>
            Indicates whether the file should be marked as executable after being
            unpacked on the Linux machine.
            </summary>
        </member>
        <member name="T:Neon.Kube.CommandResponse">
            <summary>
            Describes the results of a command executed on the remote server using
            <see cref="M:Neon.Kube.SshProxy`1.RunCommand(Neon.Kube.CommandBundle,Neon.Kube.RunOptions)"/> 
            or <see cref="M:Neon.Kube.SshProxy`1.SudoCommand(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandResponse.Command">
            <summary>
            Returns the original command line.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandResponse.BashCommand">
            <summary>
            Returns the command nicely formatted across multiple lines of text
            that is suitable for including in a Bash script.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandResponse.ExitCode">
            <summary>
            Returns the command exit code.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandResponse.Success">
            <summary>
            Returns <c>true</c> if the command exit code was zero, 
            <b>false</b> otherwise.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandResponse.ProxyIsFaulted">
            <summary>
            Indicates whether the command failed because the proxy is faulted due to a previous error.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandResponse.OutputText">
            <summary>
            Returns the command standard output as a string when <see cref="F:Neon.Kube.RunOptions.BinaryOutput"/> 
            is not specified.
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandResponse.OpenOutputTextReader">
            <summary>
            Creates a <see cref="T:System.IO.TextReader"/> over the command's standard output result.
            </summary>
            <returns>The <see cref="T:System.IO.TextReader"/>.</returns>
        </member>
        <member name="P:Neon.Kube.CommandResponse.ErrorText">
            <summary>
            Returns the command standard error as a string.
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandResponse.OpenErrorTextReader">
            <summary>
            Creates a <see cref="T:System.IO.TextReader"/> over the command's standard error result.
            </summary>
            <returns>The <see cref="T:System.IO.TextReader"/>.</returns>
        </member>
        <member name="P:Neon.Kube.CommandResponse.AllText">
            <summary>
            Returns the command standard output and error as a string.
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandResponse.OpenAllTextReader">
            <summary>
            Creates a <see cref="T:System.IO.TextReader"/> over the command's standard output and standard error results.
            </summary>
            <returns>The <see cref="T:System.IO.TextReader"/>.</returns>
        </member>
        <member name="P:Neon.Kube.CommandResponse.OutputBinary">
            <summary>
            Returns the command standard output as a byte array when <see cref="F:Neon.Kube.RunOptions.BinaryOutput"/> 
            is specified.
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandResponse.OpenOutputBinaryStream">
            <summary>
            Creates a <see cref="T:System.IO.Stream"/> that can be used to read the standard output as binary when 
            <see cref="F:Neon.Kube.RunOptions.BinaryOutput"/> is specified.
            </summary>
            <returns>The <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="P:Neon.Kube.CommandResponse.ErrorSummary">
            <summary>
            Returns an error message suitable for including in a related exception message.
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandResponse.ToBash(System.String)">
            <summary>
            Converts the original command into a Bash command.
            </summary>
            <param name="comment">Optionall specifies a comment string to be included.</param>
            <returns>The Bash command string.</returns>
        </member>
        <member name="M:Neon.Kube.CommandResponse.EnsureSuccess">
            <summary>
            Ensures that the response has a zero exit code.
            </summary>
            <exception cref="T:Neon.Common.ExecuteException">Thrown if when <see cref="P:Neon.Kube.CommandResponse.ExitCode"/> is non-zero.</exception>
        </member>
        <member name="T:Neon.Kube.IBashCommandFormatter">
            <summary>
            Describes a type implementation that can render a nicely formatted Bash command.
            </summary>
        </member>
        <member name="M:Neon.Kube.IBashCommandFormatter.ToBash(System.String)">
            <summary>
            Renders a nicely formatted Bash command.  Note that the string returned may
            include multipe lines with continuation characters.
            </summary>
            <param name="comment">The optional comment to be included in the output.</param>
            <returns>The formatted Bash command.</returns>
        </member>
        <member name="T:Neon.Kube.RemoteCommandException">
            <summary>
            Indicates that a remote command execution failed.
            </summary>
        </member>
        <member name="M:Neon.Kube.RemoteCommandException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The optional inner exception.</param>
        </member>
        <member name="T:Neon.Kube.RunOptions">
            <summary>
            Enumerates the possible options to use when executing a remote
            command on a <see cref="T:Neon.Kube.SshProxy`1"/>.  These options may be 
            combined using the bitwise OR operator.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.None">
            <summary>
            No options are set.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.Defaults">
            <summary>
            Bitwise ORs any specific option flags with those specified by <see cref="P:Neon.Kube.SshProxy`1.DefaultRunOptions"/>.
            This is handy for setting or resetting flags like <see cref="F:Neon.Kube.RunOptions.FaultOnError"/> on a global 
            basis for a node proxy instance.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.FaultOnError">
            <summary>
            Puts the <see cref="T:Neon.Kube.SshProxy`1"/> into the faulted state when the command
            returns a non-zero exit code.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.RunWhenFaulted">
            <summary>
            Runs the command even if the <see cref="T:Neon.Kube.SshProxy`1"/> is in the faulted state.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.IgnoreRemotePath">
            <summary>
            Ignore the <see cref="P:Neon.Kube.SshProxy`1.RemotePath"/> property.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.BinaryOutput">
            <summary>
            Return the standard output from remote command as binary data rather
            than intrepreting it as text.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.Redact">
            <summary>
            Use for commands that may include sensitive secrets as command arguments
            and/or results.  Only limited information about commands run with this
            flag will be logged.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.LogOnErrorOnly">
            <summary>
            Logs command output only if the command returns a non-zero exit code.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.LogOutput">
            <summary>
            Logs the command standard output (standard error output is logged by default).
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.LogBundle">
            <summary>
            Used internally to prevent logging of the command "START: *" line at 
            lower levels because this has already been logged.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.Audit">
            <summary>
            Used to mark commands whose execution should be logged for auditing.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.Shutdown">
            <summary>
            <para>
            Indicates that the command will shutdown or restart or reboot
            the target server.  Commands with this flag will not be retried
            on the server.
            </para>
            <note>
            IMPORTANT: You must specify this flag if your command shutdown
            down the machine to prevent causing an infinite reboot loop.
            </note>
            </summary>
        </member>
        <member name="T:Neon.Kube.SshCredentials">
            <summary>
            Provides credentials suitable for connecting to a server machine via SSH.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshCredentials.FromUserPassword(System.String,System.String)">
            <summary>
            Returns credentials based on a user name and password.
            </summary>
            <param name="username">The user name.</param>
            <param name="password">The password.</param>
            <returns>The <see cref="T:Neon.Kube.SshCredentials"/>.</returns>
        </member>
        <member name="M:Neon.Kube.SshCredentials.FromPrivateKey(System.String,System.String)">
            <summary>
            Returns credentials based on a user name and password.
            </summary>
            <param name="username">The user name.</param>
            <param name="privateKey">The unencrypted PEM-encoded private key.</param>
            <returns>The <see cref="T:Neon.Kube.SshCredentials"/>.</returns>
        </member>
        <member name="P:Neon.Kube.SshCredentials.None">
            <summary>
            Returns an instance indicating that there are no available credentials.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Neon.Kube.SshCredentials.Username">
            <summary>
            Returns the user name.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshCredentials.AuthenticationMethod">
            <summary>
            Returns the authentication method to be used to establish an SSH.NET session.
            </summary>
            <exception cref="T:Neon.Kube.KubeException">Thrown if the SSH credentials are not available.</exception>
        </member>
        <member name="T:Neon.Kube.SshProxy`1">
            <summary>
            <para>
            Uses an SSH/SCP connection to provide access to Linux machines to access
            files, run commands, etc.
            </para>
            <note>
            This is class is <b>not intended</b> to be a <b>general purpose SSH wrapper</b> 
            at this time.  It currently assumes that the remote side is running some variant
            of Linux and it makes some global changes including overwriting the 
            <b>/etc/sudoers.d/nopasswd</b> file to disable password prompts for all
            users and creating some global directories.
            </note>
            </summary>
            <typeparam name="TMetadata">
            Defines the metadata type the application wishes to associate with the server.
            You may specify <c>object</c> when no additional metadata is required.
            </typeparam>
            <remarks>
            <para>
            Construct an instance to connect to a specific cluster node.  You may specify
            <typeparamref name="TMetadata"/> to associate application specific information
            or state with the instance.
            </para>
            <para>
            This class includes methods to invoke Linux commands on the node,
            </para>
            <para>
            Call <see cref="M:Neon.Kube.SshProxy`1.Dispose"/> or <see cref="M:Neon.Kube.SshProxy`1.Disconnect"/> to close the connection.
            </para>
            <note>
            You can use <see cref="M:Neon.Kube.SshProxy`1.Clone"/> to make a copy of a proxy that can be
            used to perform parallel operations against the same machine.
            </note>
            </remarks>
            <threadsafety instance="false"/>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.GetConnectLock(System.String)">
            <summary>
            Returns the object to be used to when establishing connections to
            a target server.
            </summary>
            <param name="host">The target server hostname or IP address.</param>
            <returns>The lock object.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.#ctor(System.String,System.Net.IPAddress,Neon.Kube.SshCredentials,System.IO.TextWriter)">
            <summary>
            Constructs a <see cref="T:Neon.Kube.SshProxy`1"/>.
            </summary>
            <param name="name">The display name for the server.</param>
            <param name="address">The private cluster IP address for the server.</param>
            <param name="credentials">The credentials to be used for establishing SSH connections.</param>
            <param name="logWriter">The optional <see cref="T:System.IO.TextWriter"/> where operation logs will be written.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="name"/> or if <paramref name="credentials"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Dispose">
            <summary>
            Releases all associated resources (e.g. any open server connections).
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Dispose(System.Boolean)">
            <summary>
            Releases all associated resources (e.g. any open server connections).
            </summary>
            <param name="disposing">Pass <c>true</c> if we're disposing, <c>false</c> if we're finalizing.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Clone">
            <summary>
            Returns a clone of the SSH proxy.  This can be useful for situations where you
            need to be able to perform multiple SSH/SCP operations against the same
            machine in parallel.
            </summary>
            <returns>The cloned <see cref="T:Neon.Kube.SshProxy`1"/>.</returns>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.OsName">
            <summary>
            <para>
            Returns the name of the remote operating system (e.g. "Ubuntu").
            </para>
            <note>
            This is only valid after a connection has been established.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.OsVersion">
            <summary>
            <para>
            Returns the version of the remote operating system (e.g. "18.04.1").
            </para>
            <note>
            This is only valid after a connection has been established.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.DeadlockBreaker(System.String,System.Action,System.TimeSpan)">
            <summary>
            Performs an action on a new thread, killing the thread if it hasn't
            terminated within the specified timeout.
            </summary>
            <param name="actionName">Idenfies the action for logging purposes.</param>
            <param name="action">The action to be performed.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Disconnect">
            <summary>
            Closes any open connections to the Linux server but leaves open the
            opportunity to reconnect later.
            </summary>
            <remarks>
            <note>
            This is similar to what dispose does <see cref="M:Neon.Kube.SshProxy`1.Dispose"/> but dispose does
            not allow reconnection.
            </note>
            <para>
            This command is useful situations where the client application may temporarily
            lose contact with the server if for example, when it is rebooted or the network
            configuration changes.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.InternalSshDisconnect">
            <summary>
            Disconnects the SSH client.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.InternalScpDisconnect">
            <summary>
            Disconnects the SCP client.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.Cluster">
            <summary>
            The associated <see cref="T:Neon.Kube.ClusterProxy"/> or <c>null</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.Name">
            <summary>
            Returns the display name for the server.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.Address">
            <summary>
            Returns the cluster private IP address to used for connecting to the server.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.SshPort">
            <summary>
            The SSH port.  This defaults to <b>22</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.ConnectTimeout">
            <summary>
            The connection attempt timeout.  This defaults to <b>5</b> seconds.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.FileTimeout">
            <summary>
            The file operation timeout.  This defaults to <b>30</b> seconds.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.RetryCount">
            <summary>
            The number of times to retry a failed remote command.  
            This defaults to <b>5</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.DefaultRunOptions">
            <summary>
            Specifies the default options to be bitwise ORed with any specific
            options passed to a run or sudo execution command when the <see cref="F:Neon.Kube.RunOptions.Defaults"/> 
            flag is specified.  This defaults to <see cref="F:Neon.Kube.RunOptions.None"/>.
            </summary>
            <remarks>
            Setting this is a good way to specify a global default for flags like <see cref="F:Neon.Kube.RunOptions.FaultOnError"/>.
            </remarks>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.RemotePath">
            <summary>
            The PATH to use on the remote server when executing commands in the
            session or <c>null</c>/empty to run commands without a path.  This
            defaults to the standard Linux path and <see cref="F:Neon.Kube.KubeHostFolders.Bin"/>.
            </summary>
            <remarks>
            <note>
            When you modify this, be sure to use a colon (<b>:</b>) to separate 
            multiple directories as required.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.Username">
            <summary>
            Returns the username used to log into the remote node.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.UpdateCredentials(Neon.Kube.SshCredentials)">
            <summary>
            Updates the proxy credentials.  Call this whenever you change the
            password or SSH certificate for the user account we're using for the
            current proxy connection.  This ensures that the proxy will be able
            to reconnect to the service when required.
            </summary>
            <param name="newCredentials">The new credentials.</param>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.Status">
            <summary>
            The current server status.
            </summary>
            <remarks>
            <para>
            This property is intended to be used by management tools to indicate the state
            of the server for UX purposes.  This property will be set by some methods such
            as <see cref="M:Neon.Kube.SshProxy`1.WaitForBoot(System.Nullable{System.TimeSpan})"/> but can also be set explicitly by tools when they
            have an operation in progress on the server.
            </para>
            <note>
            This will return <b>*** FAULTED ***</b> if the <see cref="P:Neon.Kube.SshProxy`1.IsFaulted"/>=<c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.IsReady">
            <summary>
            Indicates that the server has completed or has failed the current set of operations.
            </summary>
            <remarks>
            <note>
            This will always return <c>false</c> if the server has faulted (<see cref="P:Neon.Kube.SshProxy`1.IsFaulted"/>=<c>true</c>).
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.IsFaulted">
            <summary>
            Indicates that the server is in a faulted state because one or more operations
            have failed.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.Metadata">
            <summary>
            Applications may use this to associate metadata with the instance.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.DisableSudoPrompt(System.String)">
            <summary>
            <para>
            Prevents <b>sudo</b> from prompting for passwords and also ensures that
            the <b>/home/root</b> directory exists and has the appropriate permissions.
            </para>
            <note>
            The connected user must already be a member of the <b>root</b> group.
            </note>
            <note>
            You do not need to call <see cref="M:Neon.Kube.SshProxy`1.Connect(System.TimeSpan)"/> or <see cref="M:Neon.Kube.SshProxy`1.WaitForBoot(System.Nullable{System.TimeSpan})"/>
            before calling this method (in fact, calling those methods will probably fail).
            </note>
            </summary>
            <param name="password">The current user's password.</param>
            <remarks>
            <para>
            This method uses the existance of a <b>/etc/neon-sshproxy-init</b> file to
            ensure that it only executes once per machine.  This file will be
            created the first time this method is called on the machine.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Shutdown">
            <summary>
            Shutdown the server.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Reboot(System.Boolean)">
            <summary>
            Reboot the server.
            </summary>
            <param name="wait">Optionally wait for the server to reboot (defaults to <c>true</c>).</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Log(System.String)">
            <summary>
            Writes text to the operation log.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.LogLine(System.String)">
            <summary>
            Writes a line of text to the operation log.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.LogFlush">
            <summary>
            Flushes the log.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.LogException(System.Exception)">
            <summary>
            Writes exception information to the operation log.
            </summary>
            <param name="e">The exception.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.LogException(System.String,System.Exception)">
            <summary>
            Writes exception information to the operation log.
            </summary>
            <param name="message">The operation details.</param>
            <param name="e">The exception.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Fault(System.String)">
            <summary>
            Puts the node proxy into the faulted state.
            </summary>
            <param name="message">The optional message to be logged.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.GetConnectionInfo">
            <summary>
            Returns the connection information for SSH.NET.
            </summary>
            <returns>The connection information.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Connect(System.TimeSpan)">
            <summary>
            Establishes a connection to the server, disconnecting first if the proxy is already connected.
            </summary>
            <param name="timeout">Maximum amount of time to wait for a connection (defaults to <see cref="P:Neon.Kube.SshProxy`1.ConnectTimeout"/>).</param>
            <exception cref="T:Neon.Kube.SshProxyException">
            Thrown if the host hasn't been prepared yet and the SSH connection credentials are not username/password
            or if there's problem with low-level host configuration.
            </exception>
            <remarks>
            <note>
            The first time a connection is established is called on a particular host, password credentials 
            must be used so that low-level <b>sudo</b> configuration cxan be performed.  Subsequent connections
            can use TLS certificates.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.WaitForBoot(System.Nullable{System.TimeSpan})">
            <summary>
            Waits for the server to boot by continuously attempting to establish an SSH session.
            </summary>
            <param name="timeout">The operation timeout (defaults to <b>10 minutes</b>).</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Neon.Kube.SshProxyException">
            Thrown if the host hasn't been prepared yet and the SSH connection credentials are not username/password
            or if there's problem with low-level host configuration.
            </exception>
            <remarks>
            <note>
            The first time a connection is established is called on a particular host, password credentials 
            must be used so that low-level <b>sudo</b> configuration cxan be performed.  Subsequent connections
            can use TLS certificates.
            </note>
            <para>
            The method will attempt to connect to the server every 10 seconds up to the specified
            timeout.  If it is unable to connect during this time, the exception thrown by the
            SSH client will be rethrown.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.OpenSshConnection">
            <summary>
            Opens a new <see cref="T:Renci.SshNet.SshClient"/> connection.
            </summary>
            <returns>The new connection.</returns>
            <exception cref="T:Renci.SshNet.Common.SshConnectionException">Thrown if a connection could not be established.</exception>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.EnsureSshConnection">
            <summary>
            Ensures that an SSH connection has been established.
            </summary>
            <exception cref="T:Renci.SshNet.Common.SshConnectionException">Thrown if a connection could not be established.</exception>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.OpenScpConnection">
            <summary>
            Opens a new <see cref="T:Renci.SshNet.ScpClient"/> connection.
            </summary>
            <returns>The new connection.</returns>
            <exception cref="T:Renci.SshNet.Common.SshConnectionException">Thrown if a connection could not be established.</exception>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.EnsureScpConnection">
            <summary>
            Ensures that an SCP connection has been established.
            </summary>
            <exception cref="T:Renci.SshNet.Common.SshConnectionException">Thrown if a connection could not be established.</exception>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.HomeFolderPath">
            <summary>
            Returns the path to the user's home folder on the server.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.DownloadFolderPath">
            <summary>
            Returns the path to the user's download folder on the server.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.UploadFolderPath">
            <summary>
            Returns the path to the user's upload folder on the server.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.CloneSshClient">
            <summary>
            <para>
            Creates and returns a clone of a low-level <see cref="T:Renci.SshNet.SshClient"/> to 
            the remote endpoint.
            </para>
            <note>
            The caller is responsible for disposing the returned instance.
            </note>
            </summary>
            <returns>The cloned client.</returns>
            <exception cref="T:Renci.SshNet.Common.SshConnectionException">Thrown if a connection could not be established.</exception>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.CloneScpClient">
            <summary>
            <para>
            Creates and returns a clone of a low-level <see cref="T:Renci.SshNet.ScpClient"/> to 
            the remote endpoint.
            </para>
            <note>
            The caller is responsible for disposing the returned instance.
            </note>
            </summary>
            <returns>The cloned client.</returns>
            <exception cref="T:Renci.SshNet.Common.SshConnectionException">Thrown if a connection could not be established.</exception>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.PrepareHostAndUser">
            <summary>
            <para>
            Ensures that the node is configured such that <see cref="T:Neon.Kube.SshProxy`1"/> can function properly.
            This includes disabling <b>requiretty</b> as well as restricting <b>sudo</b> from requiring passwords
            as well as creating the minimum user home folders required by the proxy for executing scripts as well
            as uploading and downloading files.
            </para>
            <para>
            This method creates the <b>/etc/neon-sshproxy-init</b> file such that these operations will only
            be performed once.
            </para>
            </summary>
            <exception cref="T:Neon.Kube.SshProxyException">
            Thrown if the host hasn't been prepared yet and the SSH connection credentials are not username/password
            or if there's problem with low-level host configuration.
            </exception>
            <remarks>
            <note>
            The first time this method is called on a particular host, password credentials must be used so
            that low-level <b>sudo</b> configuration can be performed.  Subsequent connections can use
            TLS certificates.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.RemoveFile(System.String)">
            <summary>
            Removes a file on the server if it exists.
            </summary>
            <param name="target">The path to the target file.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Download(System.String,System.IO.Stream)">
            <summary>
            Downloads a file from the Linux server and writes it out a stream.
            </summary>
            <param name="source">The source path of the file on the Linux server.</param>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.DownloadBytes(System.String)">
            <summary>
            Downloads a file as bytes from the Linux server .
            </summary>
            <param name="source">The source path of the file on the Linux server.</param>
            <returns>The file contents as UTF8 text.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.DownloadText(System.String)">
            <summary>
            Downloads a file as text from the Linux server.
            </summary>
            <param name="source">The source path of the file on the Linux server.</param>
            <returns>The file contents as UTF8 text.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.DirectoryExists(System.String)">
            <summary>
            Determines whether a directory exists on the remote server.
            </summary>
            <param name="path">The directory path.</param>
            <returns><c>true</c> if the directory exists.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.FileExists(System.String)">
            <summary>
            Determines whether a file exists on the remote server.
            </summary>
            <param name="path">The file path.</param>
            <returns><c>true</c> if the file exists.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Upload(System.String,System.IO.Stream,System.String,System.String,System.Boolean)">
            <summary>
            Uploads a binary stream to the Linux server and then writes it to the file system.
            </summary>
            <param name="target">The target path on the Linux server.</param>
            <param name="input">The input stream.</param>
            <param name="permissions">Optionally specifies the file permissions (must be <c>chmod</c> compatible).</param>
            <param name="owner">Optionally specifies the file owner (must be <c>chown</c> compatible).</param>
            <param name="userPermissions">
            Optionally indicates that the operation should be performed with user-level permissions
            rather than <b>sudo</b>, which is the default.
            </param>
            <remarks>
            <note>
            <para>
            <b>Implementation Note:</b> The SSH.NET library we're using does not allow for
            files to be uploaded directly to arbitrary file system locations, even if the
            logged-in user has admin permissions.  The problem is that SSH.NET does not
            provide a way to use <b>sudo</b> to claim these higher permissions.
            </para>
            <para>
            The workaround is to create an upload folder in the user's home directory
            called <b>~/upload</b> and upload the file there first and then use SSH
            to move the file to its target location under sudo.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.UploadBytes(System.String,System.Byte[])">
            <summary>
            Uploads a byte array to a Linux server file.
            </summary>
            <param name="target">The target path of the file on the Linux server.</param>
            <param name="bytes">The bytes to be uploaded.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.UploadText(System.String,System.IO.Stream,System.Int32,System.Text.Encoding,System.Text.Encoding,System.String,System.String)">
            <summary>
            Uploads a text stream to the Linux server and then writes it to the file system,
            converting any CR-LF line endings to the Unix-style LF.
            </summary>
            <param name="target">The target path on the Linux server.</param>
            <param name="textStream">The input stream.</param>
            <param name="tabStop">
            Optionally expands TABs into spaces when greater than zero or converts 
            a series of leading spaces into tabs if less than zero.
            </param>
            <param name="inputEncoding">Optionally specifies the input text encoding (defaults to UTF-8).</param>
            <param name="outputEncoding">Optionally specifies the output text encoding (defaults to UTF-8).</param>
            <param name="permissions">Optionally specifies the file permissions (must be <c>chmod</c> compatible).</param>
            <param name="owner">Optionally specifies the file owner (must be <c>chown</c> compatible).</param>
            <remarks>
            <note>
            Any Unicode Byte Order Marker (BOM) at start of the input stream will be removed.
            </note>
            <note>
            <para>
            <b>Implementation Note:</b> The SSH.NET library we're using does not allow for
            files to be uploaded directly to arbitrary file system locations, even if the
            logged-in user has admin permissions.  The problem is that SSH.NET does not
            provide a way to use <b>sudo</b> to claim these higher permissions.
            </para>
            <para>
            The workaround is to create an upload folder in the user's home directory
            called <b>~/upload</b> and upload the file there first and then use SSH
            to move the file to its target location under sudo.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.UploadText(System.String,System.String,System.Int32,System.Text.Encoding,System.String,System.String)">
            <summary>
            Uploads a text string to the Linux server and then writes it to the file system,
            converting any CR-LF line endings to the Unix-style LF.
            </summary>
            <param name="target">The target path on the Linux server.</param>
            <param name="text">The input text.</param>
            <param name="tabStop">
            Optionally expands TABs into spaces when greater than zero or converts 
            a series of leading spaces into tabs if less than zero.
            </param>
            <param name="outputEncoding">Optionally specifies the output text encoding (defaults to UTF-8).</param>
            <param name="permissions">Optionally specifies the file permissions (must be <c>chmod</c> compatible).</param>
            <param name="owner">Optionally specifies the file owner (must be <c>chown</c> compatible).</param>
            <remarks>
            <note>
            <para>
            <b>Implementation Note:</b> The SSH.NET library we're using does not allow for
            files to be uploaded directly to arbitrary file system locations, even if the
            logged-in user has admin permissions.  The problem is that SSH.NET does not
            provide a way to use <b>sudo</b> to claim these higher permissions.
            </para>
            <para>
            The workaround is to create an upload folder in the user's home directory
            called <b>~/upload</b> and upload the file there first and then use SSH
            to move the file to its target location under sudo.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.UploadText(System.String,System.Text.StringBuilder,System.Int32,System.Text.Encoding,System.String,System.String)">
            <summary>
            Uploads text from a <see cref="T:System.Text.StringBuilder"/> to the Linux server and then writes it to the file system,
            converting any CR-LF line endings to the Unix-style LF.
            </summary>
            <param name="target">The target path on the Linux server.</param>
            <param name="text">The input text.</param>
            <param name="tabStop">
            Optionally expands TABs into spaces when greater than zero or converts 
            a series of leading spaces into tabs if less than zero.
            </param>
            <param name="outputEncoding">Optionally specifies the output text encoding (defaults to UTF-8).</param>
            <param name="permissions">Optionally specifies the file permissions (must be <c>chmod</c> compatible).</param>
            <param name="owner">Optionally specifies the file owner (must be <c>chown</c> compatible).</param>
            <remarks>
            <note>
            <para>
            <b>Implementation Note:</b> The SSH.NET library we're using does not allow for
            files to be uploaded directly to arbitrary file system locations, even if the
            logged-in user has admin permissions.  The problem is that SSH.NET does not
            provide a way to use <b>sudo</b> to claim these higher permissions.
            </para>
            <para>
            The workaround is to create an upload folder in the user's home directory
            called <b>~/upload</b> and upload the file there first and then use SSH
            to move the file to its target location under sudo.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Download(System.String,System.String)">
            <summary>
            Downloads a file from the remote node to the local file computer, creating
            parent folders as necessary.
            </summary>
            <param name="source">The source path on the Linux server.</param>
            <param name="target">The target path on the local computer.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.FormatCommand(System.String,System.Object[])">
            <summary>
            Formats a Linux command and argument objects into a form suitable for passing
            to the <see cref="M:Neon.Kube.SshProxy`1.RunCommand(System.String,System.Object[])"/> or <see cref="M:Neon.Kube.SshProxy`1.SudoCommand(System.String,System.Object[])"/>
            methods.
            </summary>
            <param name="command">The command.</param>
            <param name="args">The arguments.</param>
            <returns>The formatted command string.</returns>
            <remarks>
            This method quote arguments with embedded spaces and ignore <c>null</c> arguments.
            The method also converts arguments with types like <c>bool</c> into a Bash compatible
            form.
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.UploadBundle(Neon.Kube.CommandBundle,Neon.Kube.RunOptions)">
            <summary>
            Uploads a command bundle to the server and unpacks it to a temporary folder
            in the user's home folder.
            </summary>
            <param name="bundle">The bundle.</param>
            <param name="runOptions">The command execution options.</param>
            <returns>The path to the folder where the bundle was unpacked.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.RunCommand(System.String,System.Object[])">
            <summary>
            Runs a shell command on the Linux server.
            </summary>
            <param name="command">The command.</param>
            <param name="args">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
            <remarks>
            <para>
            This method uses <see cref="P:Neon.Kube.SshProxy`1.DefaultRunOptions"/> when executing the command.
            </para>
            <para>
            You can override this behavior by passing an <see cref="T:Neon.Kube.RunOptions"/> to
            the <see cref="M:Neon.Kube.SshProxy`1.RunCommand(System.String,Neon.Kube.RunOptions,System.Object[])"/> override.
            </para>
            <note>
            Any <c>null</c> arguments will be ignored.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SafeScpOperation(System.String,System.Action)">
            <summary>
            Attempts to perform a safe SCP operation up to
            [<see cref="P:Neon.Kube.SshProxy`1.RetryCount"/> + 1] times in the face of
            connection failures.
            </summary>
            <param name="name">The operation name (for logging).</param>
            <param name="action">The operation action.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SafeUpload(System.IO.Stream,System.String)">
            <summary>
            Uploads a file while attempting to deal with transient connection issues.
            </summary>
            <param name="input">The source stream.</param>
            <param name="path">The target path.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SafeDownload(System.String,System.IO.Stream)">
            <summary>
            Downloads a file while attempting to deal with transient connection issues.
            </summary>
            <param name="path">The source path.</param>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SafeSshOperation(System.String,System.Action)">
            <summary>
            Attempts to perform a safe SSH command operation up to
            [<see cref="P:Neon.Kube.SshProxy`1.RetryCount"/> + 1] times in the face of
            connection failures.
            </summary>
            <param name="name">The operation name (for logging).</param>
            <param name="action">The operation action.</param>
        </member>
        <member name="T:Neon.Kube.SshProxy`1.SafeSshCommand">
            <summary>
            Holds the result of a <see cref="M:Neon.Kube.SshProxy`1.SafeRunCommand(System.String,System.Boolean)"/> command execution.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SafeRunCommand(System.String,System.Boolean)">
            <summary>
            Runs the command passed on the server to proactively deal with 
            transient connection issues.
            </summary>
            <param name="command">The command.</param>
            <param name="binaryOutput">Optionally indicates that the standard output should be treated as bunary.</param>
            <returns>The <see cref="T:Renci.SshNet.SshCommand"/> response.</returns>
            <remarks>
            <note>
            The command may not specify file redirection (this is verified by
            <see cref="M:Neon.Kube.SshProxy`1.RunCommand(System.String,Neon.Kube.RunOptions,System.Object[])"/>).
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.ToBash(System.String,System.Object[])">
            <summary>
            Returns the command and arguments as a nicely formatted Bash command.
            </summary>
            <param name="command">The command.</param>
            <param name="args">The arguments.</param>
            <returns>The Bash command string.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.RunCommand(System.String,Neon.Kube.RunOptions,System.Object[])">
            <summary>
            Runs a shell command on the Linux server with <see cref="T:Neon.Kube.RunOptions"/>.
            </summary>
            <param name="command">The command.</param>
            <param name="runOptions">The execution options.</param>
            <param name="args">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
            <exception cref="T:Neon.Kube.RemoteCommandException">
            Thrown if the command returned a non-zero exit code and 
            <see cref="F:Neon.Kube.RunOptions.FaultOnError"/> was passed.
            </exception>
            <remarks>
            <note>
            <paramref name="command"/> may not include single quotes or redirect
            angle brackets such as <b>&lt;</b> or <b>>&gt;</b>.  For more complex
            command, try uploading and executing a <see cref="T:Neon.Kube.CommandBundle"/> instead.
            </note>
            <note>
            Any <c>null</c> arguments will be ignored.
            </note>
            <para>
            The <paramref name="runOptions"/> flags control how this command functions.
            If <see cref="F:Neon.Kube.RunOptions.FaultOnError"/> is set, then commands that return
            a non-zero exit code will put the server into the faulted state by setting
            <see cref="P:Neon.Kube.SshProxy`1.IsFaulted"/>=<c>true</c> and throwing a <see cref="T:Neon.Kube.RemoteCommandException"/>.
            This means that <see cref="P:Neon.Kube.SshProxy`1.IsReady"/> will  always return <c>false</c> 
            afterwards and subsequent calls to <see cref="M:Neon.Kube.SshProxy`1.RunCommand(System.String,System.Object[])"/>
            and <see cref="M:Neon.Kube.SshProxy`1.SudoCommand(System.String,System.Object[])"/> will be ignored unless 
            <see cref="F:Neon.Kube.RunOptions.RunWhenFaulted"/> is passed with the future command. 
            <see cref="F:Neon.Kube.RunOptions.LogOnErrorOnly"/> indicates that command output should
            be logged only for non-zero exit codes.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.RunCommand(Neon.Kube.CommandBundle,Neon.Kube.RunOptions)">
            <summary>
            Runs a <see cref="T:Neon.Kube.CommandBundle"/> with user permissions on the remote machine.
            </summary>
            <param name="bundle">The bundle.</param>
            <param name="runOptions">The execution options (defaults to <see cref="F:Neon.Kube.RunOptions.Defaults"/>).</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
            <remarks>
            <note>
            <paramref name="bundle"/> may not include single quotes or redirect
            angle brackets such as <b>&lt;</b> or <b>>&gt;</b>.  For more complex
            command, try uploading and executing a <see cref="T:Neon.Kube.CommandBundle"/> instead.
            </note>
            <para>
            This method is intended for situations where one or more files need to be uploaded to a cluster node 
            and then be used when a command is executed.
            </para>
            <para>
            To use this class, construct an instance passing the command and arguments to be executed.  The command be 
            an absolute reference to an executable in folders such as <b>/bin</b> or <b>/usr/local/bin</b>, an executable
            somewhere on the current PATH, or relative to the files unpacked from the bundle.  The current working directory
            will be set to the folder where the bundle was unpacked, so you can reference local executables like
            <b>./MyExecutable</b>.
            </para>
            <para>
            Once a bundle is constructed, you will add <see cref="T:Neon.Kube.CommandFile"/> instances specifying the
            file data you want to include.  These include the relative path to the file to be uploaded as well
            as its text or binary data.  You may also indicate whether each file is to be marked as executable.
            </para>
            <note>
            <paramref name="runOptions"/> is set to <see cref="F:Neon.Kube.RunOptions.Defaults"/> by default.  This means
            that the flags specified by <see cref="P:Neon.Kube.SshProxy`1.DefaultRunOptions"/> will be be used.  This is a 
            good way to specify a global default for flags like <see cref="F:Neon.Kube.RunOptions.FaultOnError"/>.
            </note>
            <note>
            This command requires that the <b>unzip</b> package be installed on the host.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SudoCommand(System.String,System.Object[])">
            <summary>
            Runs a shell command on the Linux server under <b>sudo</b>.
            </summary>
            <param name="command">The command.</param>
            <param name="args">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
            <remarks>
            <note>
            <paramref name="command"/> may not include single quotes or redirect
            angle brackets such as <b>&lt;</b> or <b>>&gt;</b>.  For more complex
            command, try uploading and executing a <see cref="T:Neon.Kube.CommandBundle"/> instead.
            </note>
            <para>
            This method uses the <see cref="P:Neon.Kube.SshProxy`1.DefaultRunOptions"/> when executing the command.
            </para>
            <para>
            You can override this behavior by passing an <see cref="T:Neon.Kube.RunOptions"/> to
            the <see cref="M:Neon.Kube.SshProxy`1.RunCommand(System.String,Neon.Kube.RunOptions,System.Object[])"/> override.
            </para>
            <note>
            Any <c>null</c> arguments will be ignored.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SudoCommand(System.String,Neon.Kube.RunOptions,System.Object[])">
            <summary>
            Runs a shell command on the Linux server under <b>sudo</b> with <see cref="T:Neon.Kube.RunOptions"/>.
            </summary>
            <param name="command">The command.</param>
            <param name="runOptions">The execution options.</param>
            <param name="args">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
            <remarks>
            <note>
            <paramref name="command"/> may not include single quotes or redirect
            angle brackets such as <b>&lt;</b> or <b>>&gt;</b>.  For more complex
            command, try uploading and executing a <see cref="T:Neon.Kube.CommandBundle"/> instead.
            </note>
            <para>
            The <paramref name="runOptions"/> flags control how this command functions.
            If <see cref="F:Neon.Kube.RunOptions.FaultOnError"/> is set, then commands that return
            a non-zero exit code will put the server into the faulted state by setting
            <see cref="P:Neon.Kube.SshProxy`1.IsFaulted"/>=<c>true</c>.  This means that <see cref="P:Neon.Kube.SshProxy`1.IsReady"/> will 
            always return <c>false</c> afterwards and subsequent command executions will be 
            ignored unless  <see cref="F:Neon.Kube.RunOptions.RunWhenFaulted"/> is specified for the 
            future command.
            </para>
            <para>
            <see cref="F:Neon.Kube.RunOptions.LogOnErrorOnly"/> indicates that command output should
            be logged only for non-zero exit codes.
            </para>
            <note>
            Any <c>null</c> arguments will be ignored.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SudoCommandAsUser(System.String,System.String,System.Object[])">
            <summary>
            Runs a shell command on the Linux server under <b>sudo</b> as a specific user.
            </summary>
            <param name="user">The username.</param>
            <param name="command">The command.</param>
            <param name="args">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
            <remarks>
            <note>
            <paramref name="command"/> may not include single quotes or redirect
            angle brackets such as <b>&lt;</b> or <b>>&gt;</b>.  For more complex
            command, try uploading and executing a <see cref="T:Neon.Kube.CommandBundle"/> instead.
            </note>
            <para>
            This method uses the <see cref="P:Neon.Kube.SshProxy`1.DefaultRunOptions"/> when executing the command.
            </para>
            <para>
            You can override this behavior by passing an <see cref="T:Neon.Kube.RunOptions"/> to
            the <see cref="M:Neon.Kube.SshProxy`1.RunCommand(System.String,Neon.Kube.RunOptions,System.Object[])"/> override.
            </para>
            <note>
            Any <c>null</c> arguments will be ignored.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SudoCommandAsUser(System.String,System.String,Neon.Kube.RunOptions,System.Object[])">
            <summary>
            Runs a shell command on the Linux server under <b>sudo</b> as a specific user
            and with <see cref="T:Neon.Kube.RunOptions"/>.
            </summary>
            <param name="user">The username.</param>
            <param name="command">The command.</param>
            <param name="runOptions">The execution options.</param>
            <param name="args">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
            <remarks>
            <note>
            <paramref name="command"/> may not include single quotes or redirect
            angle brackets such as <b>&lt;</b> or <b>>&gt;</b>.  For more complex
            command, try uploading and executing a <see cref="T:Neon.Kube.CommandBundle"/> instead.
            </note>
            <para>
            The <paramref name="runOptions"/> flags control how this command functions.
            If <see cref="F:Neon.Kube.RunOptions.FaultOnError"/> is set, then commands that return
            a non-zero exit code will put the server into the faulted state by setting
            <see cref="P:Neon.Kube.SshProxy`1.IsFaulted"/>=<c>true</c>.  This means that <see cref="P:Neon.Kube.SshProxy`1.IsReady"/> will 
            always return <c>false</c> afterwards and subsequent command executions will be 
            ignored unless  <see cref="F:Neon.Kube.RunOptions.RunWhenFaulted"/> is specified for the 
            future command.
            </para>
            <para>
            <see cref="F:Neon.Kube.RunOptions.LogOnErrorOnly"/> indicates that command output should
            be logged only for non-zero exit codes.
            </para>
            <note>
            Any <c>null</c> arguments will be ignored.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SudoCommand(Neon.Kube.CommandBundle,Neon.Kube.RunOptions)">
            <summary>
            Runs a <see cref="T:Neon.Kube.CommandBundle"/> under <b>sudo</b> on the remote machine.
            </summary>
            <param name="bundle">The bundle.</param>
            <param name="runOptions">The execution options (defaults to <see cref="F:Neon.Kube.RunOptions.Defaults"/>).</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
            <remarks>
            <para>
            This method is intended for situations where one or more files need to be uploaded to a cluster node 
            and then be used when a command is executed.
            </para>
            <para>
            To use this class, construct an instance passing the command and arguments to be executed.  The command be 
            an absolute reference to an executable in folders such as <b>/bin</b> or <b>/usr/local/bin</b>, an executable
            somewhere on the current PATH, or relative to the files unpacked from the bundle.  The current working directory
            will be set to the folder where the bundle was unpacked, so you can reference local executables like
            <b>./MyExecutable</b>.
            </para>
            <para>
            Once a bundle is constructed, you will add <see cref="T:Neon.Kube.CommandFile"/> instances specifying the
            file data you want to include.  These include the relative path to the file to be uploaded as well
            as its text or binary data.  You may also indicate whether each file is to be marked as executable.
            </para>
            <note>
            <paramref name="runOptions"/> is set to <see cref="F:Neon.Kube.RunOptions.Defaults"/> by default.  This means
            that the flags specified by <see cref="P:Neon.Kube.SshProxy`1.DefaultRunOptions"/> will be be used.  This is a 
            good way to specify a global default for flags like <see cref="F:Neon.Kube.RunOptions.FaultOnError"/>.
            </note>
            <note>
            This command requires that the <b>unzip</b> package be installed on the host.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.InvokeIdempotentAction(System.String,System.Action)">
            <summary>
            Invokes a named action on the node if it has never been been performed
            on the node before.
            </summary>
            <param name="actionId">The node-unique action ID.</param>
            <param name="action">Tbe action to be performed.</param>
            <returns><c>true</c> if the action was invoked.</returns>
            <remarks>
            <para>
            <paramref name="actionId"/> must uniquely identify the action on the node.
            This may include letters, digits, dashes and periods as well as one or
            more forward slashes that can be used to organize idempotent status files
            into folders.
            </para>
            <para>
            This method tracks successful action completion by creating a file
            on the node at <see cref="F:Neon.Kube.KubeHostFolders.State"/><b>/ACTION-ID</b>.
            To ensure idempotency, this method first checks for the existance of
            this file and returns immediately without invoking the action if it is 
            present.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.VerifyCertificate(System.String,Neon.Cryptography.TlsCertificate,System.String)">
            <summary>
            Verifies a TLS/SSL certificate.
            </summary>
            <param name="name">The certificate name (included in errors).</param>
            <param name="certificate">The certificate being tested or <c>null</c>.</param>
            <param name="hostname">The hostname to be secured by the certificate.</param>
            <returns>The command response.</returns>
            <remarks>
            You may pass <paramref name="certificate"/> as <c>null</c> to indicate that no 
            checking is to be performed as a convienence.
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.CreateShell">
            <summary>
            Creates an interactive shell.
            </summary>
            <returns>A <see cref="T:Renci.SshNet.ShellStream"/>.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.CreateSudoShell">
            <summary>
            Creates an interactive shell for running with <b>sudo</b> permissions. 
            </summary>
            <returns>A <see cref="T:Renci.SshNet.ShellStream"/>.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.GetNetworkInterface(System.Net.IPAddress)">
            <summary>
            Returns the name of the network interface assigned to a specific IP address.
            </summary>
            <param name="address">The target IP address.</param>
            <returns>The network interface name.</returns>
            <exception cref="T:Neon.Kube.SshProxyException">Thrown if the interface was not found.</exception>
            <remarks>
            <para>
            In the olden days, network devices were assigned names like <b>eth0</b>,
            <b>eth1</b>,... during boot somewhat randomly and there was no guarantee
            that the same assignments would be made on subsequent server restarts.
            </para>
            <para>
            Modern Linux systems generate predictable network interfaces names during
            boot by enumerating the physical devices installed and generating device
            names based on the topology of the system (e.g. slots, channels,...).
            This is discussed <a href="https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/">here</a>.
            </para>
            <note>
            Cloud environments as well as environments where nodes hosted on hypervisors 
            like Hyper-V or XenServer will still assign interface names like <b>eth0</b>...
            This method will still work for these environments.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.GetTimeUtc">
            <summary>
            Returns the current time (UTC) on the remote machine.
            </summary>
            <returns>The machine's current <see cref="T:System.DateTime"/> (UTC).</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.ListUnpartitionedDisks">
            <summary>
            Returns the names of the node's unpartitioned disk block devices.  This can
            be useful for identifying newly attached data disks during cluster setup.
            </summary>
            <returns>The list of unpartitioned Linux disk names.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.KubectlApply(System.String,Neon.Kube.RunOptions)">
            <summary>
            Uses <c>kubectl apply -f</c> to apply a YAML file.
            </summary>
            <param name="yaml">The YAML file contents.</param>
            <param name="runOptions">Optional <see cref="T:Neon.Kube.RunOptions"/>.</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.KubeCtlApply(System.Text.StringBuilder,Neon.Kube.RunOptions)">
            <summary>
            Uses <c>kubectl apply -f</c> to apply a YAML file.
            </summary>
            <param name="sbYaml">The YAML file contents.</param>
            <param name="runOptions">Optional <see cref="T:Neon.Kube.RunOptions"/>.</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Kube.SshProxyException">
            <summary>
            Thrown for <see cref="T:Neon.Kube.SshProxy`1"/> errors.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Neon.Kube.ActionStep">
            <summary>
            Runs an <see cref="T:System.Action`1"/> as a cluster setup step.
            </summary>
        </member>
        <member name="M:Neon.Kube.ActionStep.Create(System.String,System.String,System.Action{Neon.Kube.SshProxy{Neon.Kube.NodeDefinition}})">
            <summary>
            Creates a configuration step that executes an potentially idempotent <see cref="T:System.Action"/>
            on a specific cluster node.
            </summary>
            <param name="nodeName">The node name.</param>
            <param name="operationName">The idempotent operation name or <c>null</c> if the operation is not idempotent.</param>
            <param name="action">The action to be invoked.</param>
            <returns>The <see cref="T:Neon.Kube.ActionStep"/>.</returns>
        </member>
        <member name="M:Neon.Kube.ActionStep.#ctor(System.String,System.String,System.Action{Neon.Kube.SshProxy{Neon.Kube.NodeDefinition}})">
            <summary>
            Private constructor.
            </summary>
            <param name="nodeName">The node name.</param>
            <param name="operationName">The idempotent operation name or <c>null</c> if the operation is not idempotent.</param>
            <param name="action">The action to be invoked.</param>
        </member>
        <member name="M:Neon.Kube.ActionStep.Run(Neon.Kube.ClusterProxy)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Kube.CommandStep">
            <summary>
            Runs a Linux command on a node, optionally uploading some command related files first.
            Commands are executed with root privileges.
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandStep.CreateSudo(System.String,System.String,System.Object[])">
            <summary>
            Creates a configuration step that executes a command under <b>sudo</b>
            on a specific node.
            </summary>
            <param name="nodeName">The node name.</param>
            <param name="command">The Linux command.</param>
            <param name="args">The command arguments.</param>
            <returns>The <see cref="T:Neon.Kube.CommandStep"/>.</returns>
        </member>
        <member name="M:Neon.Kube.CommandStep.CreateIdempotentSudo(System.String,System.String,System.String,System.Object[])">
            <summary>
            Creates an idempotent configuration step that executes a command under <b>sudo</b>
            on a specific node.
            </summary>
            <param name="nodeName">The node name.</param>
            <param name="operationName">The idempotent operation name.</param>
            <param name="command">The Linux command.</param>
            <param name="args">The command arguments.</param>
            <returns>The <see cref="T:Neon.Kube.CommandStep"/>.</returns>
        </member>
        <member name="M:Neon.Kube.CommandStep.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Constructs a configuration step that executes a command under <b>sudo</b>
            on a specific cluster node.
            </summary>
            <param name="nodeName">The node name.</param>
            <param name="command">The Linux command.</param>
            <param name="args">The command arguments.</param>
            <remarks>
            <note>
            You can add <see cref="F:Neon.Kube.CommandBundle.ArgBreak"/> as one of the arguments.  This is
            a meta argument that indicates that the following non-command line option
            is not to be considered to be the value for the previous command line option.
            This is a formatting hint for <see cref="M:Neon.Kube.CommandStep.ToBash(System.String)"/> and will
            not be included in the command itself.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.CommandStep.Sudo">
            <summary>
            Indicates whether the command is to be executed with <b>sudo</b> privileges.
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandStep.AddFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a text file to be uploaded before executing the command.
            </summary>
            <param name="path">The file path relative to the directory where the command will be executed.</param>
            <param name="text">The file text.</param>
            <param name="isExecutable">Optionally specifies that the file is to be marked as executable.</param>
            <param name="linuxCompatible">
            Optionally controls whether the text is made Linux compatible by removing carriage returns
            and expanding TABs into spaces.  This defaults to <c>true</c>.
            </param>
        </member>
        <member name="M:Neon.Kube.CommandStep.AddFile(System.String,System.Byte[],System.Boolean)">
            <summary>
            Adds a binary file to be uploaded before executing the command.
            </summary>
            <param name="path">The file path relative to the directory where the command will be executed.</param>
            <param name="data">The file data.</param>
            <param name="isExecutable">Optionally specifies that the file is to be marked as executable.</param>
        </member>
        <member name="M:Neon.Kube.CommandStep.Run(Neon.Kube.ClusterProxy)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.CommandStep.Execute(Neon.Kube.SshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Actually executes the command on the node.
            </summary>
            <param name="node">The target node.</param>
        </member>
        <member name="M:Neon.Kube.CommandStep.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.CommandStep.ToBash(System.String)">
            <summary>
            <para>
            Formats the command such that it could be added to a Bash script.
            </para>
            <note>
            This doesn't work if the command has attached files.
            </note>
            </summary>
            <param name="comment">Optional comment text (without a leading <b>#</b>).</param>
            <returns>The Bash command string.</returns>
            <exception cref="T:System.NotSupportedException">
            <see cref="M:Neon.Kube.CommandStep.ToBash(System.String)"/> does not support commands with attached files.
            </exception>
            <remarks>
            This can be useful for making copies of cluster configuration commands
            on the server as scripts for situations where system operators need
            to manually tweak things.
            </remarks>
        </member>
        <member name="T:Neon.Kube.ConfigStep">
            <summary>
            The <c>abstract</c> base class for node configuration step implementations.
            </summary>
        </member>
        <member name="M:Neon.Kube.ConfigStep.Run(Neon.Kube.ClusterProxy)">
            <summary>
            Implements the configuration step.
            </summary>
            <param name="cluster">The cluster proxy instance.</param>
        </member>
        <member name="M:Neon.Kube.ConfigStep.StatusPause">
            <summary>
            Pause briefly to allow the configuration UI a chance to display
            step information.
            </summary>
        </member>
        <member name="T:Neon.Kube.ConfigStepList">
            <summary>
            Implements a list of <see cref="T:Neon.Kube.ConfigStep"/>s to be performed
            on a cluster.
            </summary>
        </member>
        <member name="M:Neon.Kube.ConfigStepList.Add(System.Collections.Generic.IEnumerable{Neon.Kube.ConfigStep})">
            <summary>
            Adds a set of configuration steps to the list.
            </summary>
            <param name="steps">The steps.</param>
        </member>
        <member name="T:Neon.Kube.IXenClient">
            <summary>
            <b>INTERNAL USE ONLY:</b> Used internally by cluster as a potentially temporary
            hack required by <see cref="T:Neon.Kube.SetupController`1"/> to display XenServer
            provisioning status.  This may be removed at some point in the future.
            </summary>
        </member>
        <member name="P:Neon.Kube.IXenClient.Name">
            <summary>
            Returns the name of the connected XenServer.
            </summary>
        </member>
        <member name="T:Neon.Kube.PauseStep">
            <summary>
            Pauses cluster configuration for a period of time.
            </summary>
        </member>
        <member name="M:Neon.Kube.PauseStep.#ctor(System.TimeSpan)">
            <summary>
            Constructs a configuration step that pauses setup for a period of time.
            </summary>
            <param name="delay">The amount of time to pause.</param>
        </member>
        <member name="M:Neon.Kube.PauseStep.Run(Neon.Kube.ClusterProxy)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.PauseStep.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Kube.SetupController`1">
            <summary>
            Manages a cluster setup operation consisting of a series of  setup operations
            steps, while displaying status to the <see cref="T:System.Console"/>.
            </summary>
            <typeparam name="NodeMetadata">Specifies the node metadata type.</typeparam>
        </member>
        <member name="M:Neon.Kube.SetupController`1.#ctor(System.String,System.Collections.Generic.IEnumerable{Neon.Kube.SshProxy{`0}})">
            <summary>
            Constructor.
            </summary>
            <param name="operationTitle">Summarizes the high-level operation being performed.</param>
            <param name="nodes">The node proxies for the cluster nodes being manipulated.</param>
        </member>
        <member name="M:Neon.Kube.SetupController`1.#ctor(System.String[],System.Collections.Generic.IEnumerable{Neon.Kube.SshProxy{`0}})">
            <summary>
            Constructor.
            </summary>
            <param name="operationTitle">Summarizes the high-level operation being performed.</param>
            <param name="nodes">The node proxies for the cluster nodes being manipulated.</param>
        </member>
        <member name="P:Neon.Kube.SetupController`1.ShowStatus">
            <summary>
            Specifies whether the class should print setup status to the console.
            This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.SetupController`1.ShowNodeStatus">
             <summary>
             Specifies whether that node status will be displayed.  This
             defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.SetupController`1.MaxDisplayedSteps">
            <summary>
            Specifies the maximum number of setup steps to be displayed.
            This defaults to <b>5</b>.  You can set <b>0</b> to allow an 
            unlimited number of steps may be displayed.
            </summary>
        </member>
        <member name="P:Neon.Kube.SetupController`1.MaxParallel">
            <summary>
            The maximum number of nodes that will execute setup steps in parallel.  This
            defaults to essentially unconstrained.
            </summary>
        </member>
        <member name="P:Neon.Kube.SetupController`1.StepCount">
            <summary>
            Returns the number of setup steps.
            </summary>
        </member>
        <member name="M:Neon.Kube.SetupController`1.SetDefaultRunOptions(Neon.Kube.RunOptions)">
            <summary>
            Sets the <see cref="P:Neon.Kube.SshProxy`1.DefaultRunOptions"/> property for
            all nodes managed by the controller.
            </summary>
            <param name="options">The options to be set.</param>
        </member>
        <member name="M:Neon.Kube.SetupController`1.AddStep(System.String,System.Action{Neon.Kube.SshProxy{`0},System.TimeSpan},System.Func{Neon.Kube.SshProxy{`0},System.Boolean},System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Appends a configuration step.
            </summary>
            <param name="stepLabel">Brief step summary.</param>
            <param name="nodeAction">
            The action to be performed on each node.  Two parameters will be passed
            to this action: the node's <see cref="T:Neon.Kube.SshProxy`1"/> and a <see cref="T:System.TimeSpan"/>
            indicating the amount of time the action should wait before performing
            the operation, if the operation hasn't already been performed.
            </param>
            <param name="nodePredicate">
            Optional predicate used to select the nodes that participate in the step
            or <c>null</c> to select all nodes.
            </param>
            <param name="quiet">Optionally specifies that the step is not to be reported in the progress.</param>
            <param name="noParallelLimit">
            Optionally ignores the global <see cref="P:Neon.Kube.SetupController`1.MaxParallel"/> 
            limit for the new step when greater.
            </param>
            <param name="stepStaggerSeconds">
            Optionally specifies the time delay used to stagger execution
            of the nodes executing this step.  Setting a non-zero value of
            perhaps 5 seconds will help mitigate problems with multiple
            accessing nodes trying to download the same files from
            the Internet at the same time, potentially causing the remote
            endpoint to start throttling access.
            </param>
            <param name="position">
            Optionally specifies the zero-based index of the position where the step is
            to be inserted into the step list.
            </param>
            <param name="parallelLimit">
            Optionally specifies the maximum number of operations to be performed
            in parallel for this step, overriding the controller default.
            </param>
        </member>
        <member name="M:Neon.Kube.SetupController`1.AddGlobalStep(System.String,System.Action,System.Boolean,System.Int32)">
            <summary>
            Adds a global cluster configuration step.
            </summary>
            <param name="stepLabel">Brief step summary.</param>
            <param name="action">The global action to be performed.</param>
            <param name="quiet">Optionally specifies that the step is not to be reported in the progress.</param>
            <param name="position">
            The optional zero-based index of the position where the step is
            to be inserted into the step list.
            </param>
        </member>
        <member name="M:Neon.Kube.SetupController`1.AddWaitUntilOnlineStep(System.String,System.String,System.Func{Neon.Kube.SshProxy{`0},System.Boolean},System.Boolean,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Adds a step that waits for nodes to be online.
            </summary>
            <param name="stepLabel">Brief step summary.</param>
            <param name="status">The optional node status.</param>
            <param name="nodePredicate">
            Optional predicate used to select the nodes that participate in the step
            or <c>null</c> to select all nodes.
            </param>
            <param name="quiet">Optionally specifies that the step is not to be reported in the progress.</param>
            <param name="timeout">Optionally specifies the maximum time to wait (defaults to <b>10 minutes</b>).</param>
            <param name="position">
            The optional zero-based index of the position where the step is
            to be inserted into the step list.
            </param>
        </member>
        <member name="M:Neon.Kube.SetupController`1.AddDelayStep(System.String,System.TimeSpan,System.String,System.Func{Neon.Kube.SshProxy{`0},System.Boolean},System.Boolean,System.Int32)">
            <summary>
            Adds a step that waits for a specified period of time.
            </summary>
            <param name="stepLabel">Brief step summary.</param>
            <param name="delay">The amount of time to wait.</param>
            <param name="status">The optional node status.</param>
            <param name="nodePredicate">
            Optional predicate used to select the nodes that participate in the step
            or <c>null</c> to select all nodes.
            </param>
            <param name="quiet">Optionally specifies that the step is not to be reported in the progress.</param>
            <param name="position">
            The optional zero-based index of the position where the step is
            to be inserted into the step list.
            </param>
        </member>
        <member name="M:Neon.Kube.SetupController`1.Run(System.Boolean)">
            <summary>
            Performs the operation steps in the order they were added.
            </summary>
            <param name="leaveNodesConnected">Pass <c>true</c> leave the node proxies connected.</param>
            <returns><c>true</c> if all steps completed successfully.</returns>
        </member>
        <member name="M:Neon.Kube.SetupController`1.SetOperationStatus(System.String)">
            <summary>
            Sets the optation status text.
            </summary>
            <param name="status">The optional operation status text.</param>
        </member>
        <member name="M:Neon.Kube.SetupController`1.PerformStep(Neon.Kube.SetupController{`0}.Step)">
            <summary>
            Performs an operation step on the selected nodes.
            </summary>
            <param name="step">A step being performed.</param>
            <returns><c>true</c> if the step succeeded.</returns>
            <remarks>
            <para>
            This method begins by setting the <see cref="P:Neon.Kube.SshProxy`1.IsReady"/>
            state of each selected node to <c>false</c> and then it starts a new thread for
            each node and performs the action on these servnodeer threads.
            </para>
            <para>
            In parallel, the method spins on the current thread, displaying status while
            waiting for each of the nodes to transition to the <see cref="P:Neon.Kube.SshProxy`1.IsReady"/>=<c>true</c>
            state.
            </para>
            <para>
            The method returns <c>true</c> after all of the node actions have completed
            and none of the nodes have <see cref="P:Neon.Kube.SshProxy`1.IsFaulted"/>=<c>true</c>.
            </para>
            <note>
            This method does nothing if a previous step failed.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SetupController`1.GetStatus(System.Collections.Generic.HashSet{System.String},Neon.Kube.SshProxy{`0})">
            <summary>
            Returns the current status for a node.
            </summary>
            <param name="stepNodeNamesSet">The set of node names participating in the current step.</param>
            <param name="node">The node being queried.</param>
            <returns>The status prefix.</returns>
        </member>
        <member name="M:Neon.Kube.SetupController`1.FormatStepNumber(System.Int32)">
            <summary>
            Formats a step index into a form suitable for display.
            </summary>
            <param name="stepNumber">The step index.</param>
            <returns>The formatted step number.</returns>
        </member>
        <member name="M:Neon.Kube.SetupController`1.DisplayStatus(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Displays the current operation status on the <see cref="T:System.Console"/>.
            </summary>
            <param name="stepNodeNamesSet">
            The set of node names that participating in the current step or
            <c>null</c> if all nodes are included.
            </param>
        </member>
        <member name="M:Neon.Kube.SetupController`1.ThrowOnError">
            <summary>
            Throws an exception if any of the operation steps did not complete successfully.
            </summary>
        </member>
        <member name="T:Neon.Kube.UploadStep">
            <summary>
            Uploads a file.
            </summary>
        </member>
        <member name="M:Neon.Kube.UploadStep.Text(System.String,System.String,System.String,System.Int32,System.Text.Encoding,System.String)">
            <summary>
            Uploads text to a file.
            </summary>
            <param name="nodeName">The node name.</param>
            <param name="path">The path on the node for uploaded file.</param>
            <param name="text">The text to be uploaded.</param>
            <param name="tabStop">Optionally expands TABs into spaces when non-zero.</param>
            <param name="outputEncoding">Optionally specifies the output text encoding (defaults to UTF-8).</param>
            <param name="permissions">Optionally specifies target file permissions (compatible with the <c>chmod</c> command).</param>
            <returns>The <see cref="T:Neon.Kube.UploadStep"/>.</returns>
        </member>
        <member name="M:Neon.Kube.UploadStep.#ctor(System.String,System.String,System.String,System.Int32,System.Text.Encoding,System.String)">
            <summary>
            Constructs a configuration step that executes a command under <b>sudo</b>
            on a specific cluster node.
            </summary>
            <param name="nodeName">The node name.</param>
            <param name="path">The path on the node for uploaded file.</param>
            <param name="text">The text to be uploaded.</param>
            <param name="tabStop">Optionally expands TABs into spaces when non-zero.</param>
            <param name="outputEncoding">Optionally specifies the output text encoding (defaults to UTF-8).</param>
            <param name="permissions">Optionally specifies target file permissions (compatible with the <c>chmod</c> command).</param>
        </member>
        <member name="M:Neon.Kube.UploadStep.Run(Neon.Kube.ClusterProxy)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.UploadStep.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Net.NeonDnsClient">
            <summary>
            Extends <see cref="T:DNS.Client.DnsClient"/> to support resolution against 
            multiple nameservers.
            </summary>
        </member>
        <member name="T:Neon.Net.NeonDnsClient.Answer">
            <summary>
            Used to cache a DNS response.
            </summary>
        </member>
        <member name="P:Neon.Net.NeonDnsClient.Answer.Addresses">
            <summary>
            The host addresses.
            </summary>
        </member>
        <member name="P:Neon.Net.NeonDnsClient.Answer.TTD">
            <summary>
            The scheduled time (SYS) for this cached entry to expire.
            </summary>
        </member>
        <member name="M:Neon.Net.NeonDnsClient.CreateWithCaching(System.Net.IPAddress[])">
            <summary>
            Creates a DNS client that caches responses.
            </summary>
            <param name="nameservers">The nameservers specified as <see cref="T:System.Net.IPAddress"/> instances.</param>
            <returns>The <see cref="T:Neon.Net.NeonDnsClient"/>.</returns>
        </member>
        <member name="M:Neon.Net.NeonDnsClient.CreateWithCaching(System.String[])">
            <summary>
            Creates a DNS client that caches responses.
            </summary>
            <param name="nameservers">The nameservers specified as IP address strings.</param>
            <returns>The <see cref="T:Neon.Net.NeonDnsClient"/>.</returns>
        </member>
        <member name="M:Neon.Net.NeonDnsClient.Create(System.Net.IPAddress[])">
            <summary>
            Creates a DNS client that <b>does not</b> cache responses.
            </summary>
            <param name="nameservers">The nameservers specified as <see cref="T:System.Net.IPAddress"/> instances.</param>
            <returns>The <see cref="T:Neon.Net.NeonDnsClient"/>.</returns>
        </member>
        <member name="M:Neon.Net.NeonDnsClient.Create(System.String[])">
            <summary>
            Creates a DNS client that <b>does not</b> cache responses.
            </summary>
            <param name="nameservers">The nameservers specified as IP address strings.</param>
            <returns>The <see cref="T:Neon.Net.NeonDnsClient"/>.</returns>
        </member>
        <member name="M:Neon.Net.NeonDnsClient.#ctor(System.Net.IPAddress[])">
            <summary>
            Constructs an instance to query one or more nameserver IP addresses.
            </summary>
            <param name="nameservers">The name server IP addresses (at least one must be passed).</param>
        </member>
        <member name="M:Neon.Net.NeonDnsClient.#ctor(System.String[])">
            <summary>
            Constructs an instance to query one or more nameserver IP address strings.
            </summary>
            <param name="nameservers">The name server IP addresses (at least one must be passed).</param>
        </member>
        <member name="M:Neon.Net.NeonDnsClient.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Neon.Net.NeonDnsClient.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Net.NeonDnsClient.Dispose(System.Boolean)">
            <summary>
            Releases any important resources associated with the instance.
            </summary>
            <param name="disposing">Pass <c>true</c> if the instance is being disposed as opposed to being finalized.</param>
        </member>
        <member name="M:Neon.Net.NeonDnsClient.EnableCaching">
            <summary>
            Specifies that responses are to be cached until the TTL expires.
            </summary>
        </member>
        <member name="M:Neon.Net.NeonDnsClient.PurgeExpired(System.Object)">
            <summary>
            Removes any expired answers from the cache.
            </summary>
            <param name="state">Not used.</param>
        </member>
        <member name="M:Neon.Net.NeonDnsClient.ClearCache">
            <summary>
            Clears any cached cached answers.
            </summary>
        </member>
        <member name="M:Neon.Net.NeonDnsClient.LookupAsync(System.String,System.Boolean)">
            <summary>
            Attempts to resolve an IP address or fully qualified domain name
            into host IP addresses.
            </summary>
            <param name="addressOrFQDN">The IP address or FQDN.</param>
            <param name="noCache">
            Optionally specify that the method is not to answer from the cache, 
            even if the cache is enabled.
            </param>
            <returns>An empty result set if the lookup failed.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.StaticBytesDataSource">
            <summary>
            Implements a <see cref="T:ICSharpCode.SharpZipLib.Zip.IStaticDataSource"/> that wraps an in-memory byte array
            into a form suitable for adding to a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.StaticBytesDataSource.#ctor(System.Byte[])">
            <summary>
            Constructs a source from raw bytes.
            </summary>
            <param name="data">The data array or <c>null</c>.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.StaticBytesDataSource.#ctor(System.String)">
            <summary>
            Constructs a source from a UTG-8 encopded string.
            </summary>
            <param name="data">The data string</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.StaticBytesDataSource.GetSource">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.StaticStringDataSource">
            <summary>
            Implements a <see cref="T:ICSharpCode.SharpZipLib.Zip.IStaticDataSource"/> that wraps a string to be
            returned as URF-8 encoded bytes into a form suitable for adding to a 
            <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.StaticStringDataSource.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="text">The text or <c>null</c>.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.StaticStringDataSource.GetSource">
            <inheritdoc/>
        </member>
        <member name="T:ThisAssembly">
            <summary>Provides access to the current assembly information.</summary>
        </member>
        <member name="T:ThisAssembly.Git">
            <summary>Provides access to the git information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirty">
            <summary>IsDirty: true</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirtyString">
            <summary>IsDirtyString: true</summary>
        </member>
        <member name="F:ThisAssembly.Git.RepositoryUrl">
            <summary>Repository URL: https://github.com/nforgeio/neonKUBE</summary>
        </member>
        <member name="F:ThisAssembly.Git.Branch">
            <summary>Branch: master</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commit">
            <summary>Commit: ac42eccbc</summary>
        </member>
        <member name="F:ThisAssembly.Git.Sha">
            <summary>Sha: ac42eccbca496c70b56972385aac75b739a24bdb</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commits">
            <summary>Commits on top of base version: 2</summary>
        </member>
        <member name="F:ThisAssembly.Git.Tag">
            <summary>Tag: neonLIBRARY-v2.2.0-2-gac42eccbc</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseTag">
            <summary>Base tag: neonLIBRARY-v2.2.0</summary>
        </member>
        <member name="T:ThisAssembly.Git.BaseVersion">
            <summary>Provides access to the base version information used to determine the <see cref="T:ThisAssembly.Git.SemVer" />.</summary>      
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Major">
            <summary>Major: 2</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Minor">
            <summary>Minor: 2</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Patch">
            <summary>Patch: 0</summary>
        </member>
        <member name="T:ThisAssembly.Git.SemVer">
            <summary>Provides access to SemVer information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Major">
            <summary>Major: 2</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Minor">
            <summary>Minor: 2</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Patch">
            <summary>Patch: 2</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Label">
            <summary>Label: neonLIBRARY</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.DashLabel">
            <summary>Label with dash prefix: -neonLIBRARY</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Source">
            <summary>Source: Tag</summary>
        </member>
    </members>
</doc>
