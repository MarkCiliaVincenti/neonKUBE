
-- Create a user for the neon-identity-service

CREATE USER ${sts_user};
GO
ALTER USER ${sts_user} PASSWORD '${sts_password}';
GO

-------------------------------------------------------------------------------
-- Create the IdentityServer4 related tables.

CREATE TABLE ApiClaims (
    Id						integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
    ApiResourceId			integer NOT NULL,
    Type					varchar(200) NOT NULL
);
GO

CREATE TABLE ApiResources (
    Id						integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
    Description				varchar(1000) NOT NULL,
    DisplayName				varchar(200) NULL,
    Enabled					boolean NOT NULL,
    Name					varchar(200) NOT NULL
);
GO

CREATE TABLE ApiScopeClaims (
    Id						integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
    ApiScopeId				integer NOT NULL,
    Type					varchar(200) NOT NULL
);
GO

CREATE TABLE ApiScopes (
    Id						integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
    ApiResourceId			integer NOT NULL,
    Description				varchar(1000) NULL,
    DisplayName				varchar(200) NULL,
    Emphasize				boolean NOT NULL,
    Name					varchar(200) NOT NULL,
    Required				boolean NOT NULL,
    ShowInDiscoveryDocument	boolean NOT NULL
);
GO

CREATE TABLE ApiSecrets (
    Id						integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
    ApiResourceId			integer NOT NULL,
    Description				varchar(1000) NULL,
    Expiration				timestamp NOT NULL,
    Type					varchar(250) NULL,
    Value					varchar(2000) NULL
);
GO

CREATE TABLE ClientClaims (
    Id						integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
    ClientId				integer NOT NULL,
    Type					varchar(250) NOT NULL,
    Value					varchar(250) NOT NULL
);
GO

CREATE TABLE ClientCorsOrigins (
    Id						integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
    ClientId				integer NOT NULL,
    Origin					varchar(150) NOT NULL
);
GO

CREATE TABLE ClientGrantTypes (
    Id						integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
    ClientId				integer NOT NULL,
    GrantType				varchar(250) NOT NULL
);
GO

CREATE TABLE ClientIdPRestrictions (
    Id						integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
    ClientId				integer NOT NULL,
    Provider				varchar(200) NOT NULL
);
GO

CREATE TABLE ClientPostLogoutRedirectUris (
    Id						integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
    ClientId				integer NOT NULL,
    PostLogoutRedirectUri	varchar(2000) NOT NULL
);
GO

CREATE TABLE ClientRedirectUris (
    Id						integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
    ClientId				integer NOT NULL,
    RedirectUri	    		varchar(2000) NOT NULL
);
GO

CREATE TABLE Clients (
    ClientId                varchar(200) PRIMARY KEY NOT NULL,
    ClientJson		        jsonb NOT NULL,
);
GO
CREATE UNIQUE INDEX IX_Clients_ClientId ON Clients(ClientId ASC) WITH (FILLFACTOR = 90);
GO

CREATE TABLE IdentityClaims (
    Id						integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
    IdentityResourceId		integer NOT NULL,
    Type					varchar(200) NOT NULL
);
GO

CREATE TABLE IdentityResources (
    Id						integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
    Description				varchar(1000) NULL,
    DisplayName				varchar(200) NULL,
    Emphasize				boolean NOT NULL,
    Enabled					boolean NOT NULL,
    Name					varchar(200) NOT NULL,
    Required				boolean NOT NULL,
    ShowInDiscoveryDocument boolean NOT NULL
);
GO

CREATE TABLE PersistedGrants (
    Key						varchar(200) PRIMARY KEY NOT NULL,
    ClientId				varchar(200) NOT NULL,
    CreationTime			timestamp NOT NULL,
    Data					text NOT NULL,
    Expiration				timestamp NULL,
    SubjectId				varchar(200) NULL,
    Type					varchar(50) NOT NULL
);
GO

CREATE TABLE DeviceFlows (
    DeviceCode              varchar(200) PRIMARY KEY NOT NULL,
    UserCode                varchar(200) NOT NULL,
    CreationTime            timestamp NOT NULL,
    LifeTime                integer NOT NULL,
    ClientId                varchar(200) NOT NULL,
    Description             varchar(2000) NULL,
    IsOpenId                boolean NOT NULL,
    IsAuthorized            boolean NOT NULL,
    RequestedScopes         integer[] NOT NULL,
    AuthorizedScopes        integer[] NOT NULL,
    Subject                 bytea NOT NULL,     -- ClaimsPrincipal as bytes
    SessionId               varchar(200) NOT NULL
);
GO
CREATE UNIQUE INDEX IX_DeviceFlows_UserCode ON DeviceFlows(UserCode ASC) WITH (FILLFACTOR = 70);
GO

-- Configure the foreign key references.

ALTER TABLE ApiClaims ADD
    CONSTRAINT FK_ApiClaims_ApiResources_ApiResourceId
        FOREIGN KEY(ApiResourceId) REFERENCES ApiResources (Id) ON DELETE CASCADE;

ALTER TABLE ApiScopeClaims ADD
    CONSTRAINT FK_ApiScopeClaims_ApiScopes_ApiScopeId
        FOREIGN KEY(ApiScopeId) REFERENCES ApiScopes (Id) ON DELETE CASCADE;

ALTER TABLE ApiScopes ADD
    CONSTRAINT FK_ApiScopes_ApiResources_ApiResourceId
        FOREIGN KEY(ApiResourceId) REFERENCES ApiResources (Id) ON DELETE CASCADE;

ALTER TABLE ApiSecrets ADD
    CONSTRAINT FK_ApiSecrets_ApiResources_ApiResourceId
        FOREIGN KEY(ApiResourceId) REFERENCES ApiResources (Id) ON DELETE CASCADE;

ALTER TABLE IdentityClaims ADD
    CONSTRAINT FK_IdentityClaims_IdentityResources_IdentityResourceId
        FOREIGN KEY(IdentityResourceId) REFERENCES IdentityResources (Id) ON DELETE CASCADE;
GO

-- Grant appropriate table access to ${sts_user}

GRANT SELECT ON ApiClaims TO ${sts_user};
GRANT SELECT ON ApiResources TO ${sts_user};
GRANT SELECT ON ApiScopeClaims TO ${sts_user};
GRANT SELECT ON ApiScopes TO ${sts_user};
GRANT SELECT ON ApiSecrets TO ${sts_user};
GRANT SELECT ON Clients TO ${sts_user};
GRANT SELECT ON IdentityClaims TO ${sts_user};
GRANT SELECT ON IdentityResources TO ${sts_user};
GRANT SELECT, INSERT, DELETE ON PersistedGrants TO ${sts_user};
GRANT SELECT, INSERT, DELETE ON DeviceFlows TO ${sts_user};
GO

-------------------------------------------------------------------------------
-- Create the User database tables.  These have been adapted from the ASP.NET 
-- IdentityDB generated for a new .NET 5 WebApplication.

CREATE TABLE RoleClaims (
    Id                      integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
    RoleId                  varchar(450) NOT NULL,
    ClaimType               text NULL,
    ClaimValue              text NULL
);
GO

CREATE TABLE Roles (
    Id                      varchar(450) PRIMARY KEY NOT NULL,
    Name                    varchar(256) NULL,
    NormalizedName          varchar(256) NULL,
    ConcurrencyStamp        text NULL
);
GO

CREATE UNIQUE INDEX IX_Roles_Name
    ON Roles (NormalizedName ASC) WHERE (NormalizedName IS NOT NULL);
GO

CREATE TABLE UserClaims (
    Id                      integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
    UserId                  varchar(450) NOT NULL,
    ClaimType               text NULL,
    ClaimValue              text NULL
);
GO

CREATE INDEX IX_UserClaims_UserId
    ON UserClaims (UserId ASC);
GO

CREATE TABLE UserLogins (
    LoginProvider           varchar(128) PRIMARY KEY NOT NULL,
    ProviderKey             varchar(128) NOT NULL,
    ProviderDisplayName     text NULL,
    UserId                  varchar(450) NOT NULL
);
GO

CREATE INDEX IX_UserLogins_UserId
    ON UserLogins (UserId ASC);
GO

CREATE TABLE UserRoles (
    UserId                  varchar(450) PRIMARY KEY NOT NULL,
    RoleId                  varchar(450) NOT NULL
);
GO

CREATE INDEX IX_UserRoles_RoleId
    ON UserRoles (RoleId ASC);
GO

CREATE TABLE Users (
    Id                      varchar(450) PRIMARY KEY NOT NULL,
    UserName                varchar(256) NULL,
    NormalizedUserName      varchar(256) NULL,
    Email                   varchar(256) NULL,
    NormalizedEmail         varchar(256) NULL,
    EmailConfirmed          boolean NOT NULL,
    PasswordHash            text NULL,
    SecurityStamp           text NULL,
    ConcurrencyStamp        text NULL,
    PhoneNumber             text NULL,
    PhoneNumberConfirmed    boolean NOT NULL,
    TwoFactorEnabled        boolean NOT NULL,
    LockoutEnd              interval NULL,
    LockoutEnabled          boolean NOT NULL,
    AccessFailedCount       integer NOT NULL
);
GO

CREATE INDEX IX_Users_Email
    ON Users (NormalizedEmail ASC);
GO

CREATE UNIQUE INDEX IX_Users_NormalizedUserName
    ON Users (NormalizedUserName ASC) WHERE (NormalizedUserName IS NOT NULL);
GO

CREATE TABLE UserTokens (
    UserId                  varchar(450) PRIMARY KEY NOT NULL,
    LoginProvider           varchar(128) NOT NULL,
    Name                    varchar(128) NOT NULL,
    Value                   text NULL
);
GO
    
-- Configure the foreign key references.

ALTER TABLE RoleClaims ADD
    CONSTRAINT FK_RoleClaims_Roles_Id
        FOREIGN KEY (RoleId) REFERENCES Roles (Id) ON DELETE CASCADE;
GO

ALTER TABLE UserClaims ADD
    CONSTRAINT FK_UserClaims_Users_UserId
        FOREIGN KEY (UserId) REFERENCES Users (Id) ON DELETE CASCADE;
GO

ALTER TABLE UserLogins ADD
    CONSTRAINT FK_UserLogins_Users_UserId
        FOREIGN KEY (UserId) REFERENCES Users (Id) ON DELETE CASCADE;
GO

ALTER TABLE UserRoles ADD
    CONSTRAINT FK_UserRoles_UserRoles_Id
        FOREIGN KEY (RoleId) REFERENCES Roles (Id) ON DELETE CASCADE;

ALTER TABLE UserRoles ADD
    CONSTRAINT FK_UserRoles_Users_Id
        FOREIGN KEY (UserId) REFERENCES Users (Id) ON DELETE CASCADE;
GO

ALTER TABLE UserTokens ADD
    CONSTRAINT FK_UserTokens_Users_UserId
        FOREIGN KEY (UserId) REFERENCES Users (Id) ON DELETE CASCADE;
GO

-- Grant appropriate user related table access to ${sts_user}

GRANT SELECT, INSERT, UPDATE, DELETE ON RoleClaims TO ${sts_user};
GRANT SELECT, INSERT, UPDATE, DELETE ON Roles TO ${sts_user};
GRANT SELECT, INSERT, UPDATE, DELETE ON UserClaims TO ${sts_user};
GRANT SELECT, INSERT, UPDATE, DELETE ON UserLogins TO ${sts_user};
GRANT SELECT, INSERT, UPDATE, DELETE ON UserRoles TO ${sts_user};
GRANT SELECT, INSERT, UPDATE, DELETE ON Users TO ${sts_user};
GRANT SELECT, INSERT, UPDATE, DELETE ON UserTokens TO ${sts_user};
GO
