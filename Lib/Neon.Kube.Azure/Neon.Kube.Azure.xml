<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.Kube.Azure</name>
    </assembly>
    <members>
        <member name="T:Neon.Kube.AzureHostingManager">
            <summary>
            Manages cluster provisioning on the Google Cloud Platform.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Neon.Kube.AzureHostingManager.AzureVm">
            <summary>
            Relates cluster node information to an Azure VM.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.AzureVm.#ctor(Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition},Neon.Kube.AzureHostingManager)">
            <summary>
            Constructor.
            </summary>
            <param name="node">The associated node proxy.</param>
            <param name="hostingManager">The parent hosting manager.</param>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.AzureVm.Node">
            <summary>
            Returns the associated node proxy.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.AzureVm.Metadata">
            <summary>
            Returns the node metadata (AKA its definition).
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.AzureVm.Name">
            <summary>
            Returns the name of the node as defined in the cluster definition.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.AzureVm.VmName">
            <summary>
            Returns the name of the Azure VM for this node.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.AzureVm.Address">
            <summary>
            Returns the IP address of the node.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.AzureVm.Vm">
            <summary>
            The associated Azure VM.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.AzureVm.Nic">
            <summary>
            The node's network interface.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.AzureVm.IsMaster">
            <summary>
            Returns <c>true</c> if the node is a master.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.AzureVm.IsWorker">
            <summary>
            Returns <c>true</c> if the node is a worker.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.AzureVm.AvailabilitySetName">
            <summary>
            The Azure availability set hosting this node.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.AzureVm.ExternalSshPort">
            <summary>
            The external SSH port assigned to the VM.  This port is
            allocated from the range of external SSH ports configured for
            the cluster and is persisted as tag for each Azure VM.
            </summary>
        </member>
        <member name="T:Neon.Kube.AzureHostingManager.NetworkOperations">
            <summary>
            Flags used to control how the cluster network is updated.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.NetworkOperations.InternetRouting">
            <summary>
            Update the cluster's ingress/egress rules.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.NetworkOperations.EnableSsh">
            <summary>
            Enable external SSH to the cluster nodes.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.NetworkOperations.DisableSsh">
            <summary>
            Disable external SSH to the cluster nodes.
            </summary>
        </member>
        <member name="T:Neon.Kube.AzureHostingManager.AzureUbuntuImage">
            <summary>
            Describes an Ubuntu image from the Azure marketplace.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.AzureUbuntuImage.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean,Microsoft.Azure.Management.Compute.Fluent.Models.ImageReference)">
            <summary>
            Constructor.
            </summary>
            <param name="clusterVersion">Specifies the neonKUBE cluster version.</param>
            <param name="ubuntuVersion">Specifies the Ubuntu image version.</param>
            <param name="ubuntuBuild">Specifies the Ubuntu build.</param>
            <param name="vmGen">Specifies the Azure image generation (1 or 2).</param>
            <param name="isPrepared">
            Pass <c>true</c> for Ubuntu images that have already seen basic
            preparation for inclusion into a neonKUBE cluster, or <c>false</c>
            for unmodified base Ubuntu images.
            <param name="imageRef">Specifies the Azure VM image reference.</param>
            </param>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.AzureUbuntuImage.ClusterVersion">
            <summary>
            Returns the neonKUBE cluster version.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.AzureUbuntuImage.UbuntuVersion">
            <summary>
            Returns the Ubuntu version deployed by the image.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.AzureUbuntuImage.UbuntuBuild">
            <summary>
            Returns the Ubuntu build version.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.AzureUbuntuImage.VmGen">
            <summary>
            <para>
            Returns the Azure VM image type.  Gen1 images use the older BIOS boot
            mechanism and use IDE to access the disks.  Gen2 images use UEFI
            to boot and use SCSI to access the disks.  Gen2 images allow OS
            disks creater than 2TiB but do not support disk encryption.  Gen2
            VMs will likely run faster as well because they support accelerated
            networking.
            </para>
            <note>
            Most VM sizes can deploy using Gen1 or Gen2 images but this is
            not always the case.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.AzureUbuntuImage.IsPrepared">
            <summary>
            Returns <c>true</c> for Ubuntu images that have already seen basic
            preparation for inclusion into a neonKUBE cluster.  This will be
            <c>false</c> for unmodified base Ubuntu images.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.AzureUbuntuImage.ImageRef">
            <summary>
            Returns the Azure image reference.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.firstIngressNsgRulePriority">
            <summary>
            The first NSG rule priority to use for ingress rules.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.firstEgressNsgRulePriority">
            <summary>
            The first NSG rule priority to use for egress rules.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.firstSshNsgRulePriority">
            <summary>
            The first NSG rule priority to use for temporary SSH rules.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.ingressRulePrefix">
            <summary>
            The name prefix for user related defined ingress rules (from the cluster configuration).
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.publicSshRulePrefix">
            <summary>
            The name prefix for public cluster ingress and NSG rules used for configuring
            or managing nodes public SSH access.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.neonTagKeyPrefix">
            <summary>
            The (namespace) prefix used for neonKUBE related Azure resource tags.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.neonClusterTagKey">
            <summary>
            Used to tag resources with the cluster name.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.neonEnvironmentTagKey">
            <summary>
            Used to tag resources with the cluster environment.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.neonNodeNameTagKey">
            <summary>
            Used to tag VM resources with the cluster node name.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.neonNodeSshPortTagKey">
            <summary>
            Used to tag instances resources with the external SSH port to be used to 
            establish a SSH connection to the instance.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.ubuntuImages">
            <summary>
            Returns the list of supported Ubuntu images from the Azure Marketplace.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.gen1VmSizeNotAllowedRegex">
            <summary>
            Returns the list of Azure VM size name <see cref="T:System.Text.RegularExpressions.Regex"/> patterns
            that match VMs that are known to be <b>incompatible</b> with Gen1 VM images.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.gen2VmSizeAllowedRegex">
            <summary>
            Returns the list of Azure VM size name <see cref="T:System.Text.RegularExpressions.Regex"/> patterns
            for VMs that are known to be <b>compatible</b> with Gen2 VM images.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.bootDiskLun">
            <summary>
            Logical unit number for a node's boot disk.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.dataDiskLun">
            <summary>
            Logical unit number for a node's data disk.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHostingManager.openEBSDiskLun">
            <summary>
            Logical unit number for a node's optional OpenEBS cStor disk.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.Load">
            <summary>
            Ensures that the assembly hosting this hosting manager is loaded.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.GetBaseUbuntuImage(System.String,System.Int32)">
            <summary>
            Returns the base Azure Ubuntu image to use for the specified neonKUBE cluster version.
            </summary>
            <param name="clusterVersion">The neonKUBE cluster version.</param>
            <param name="vmGen">The Azure VM generation (1 or 2).</param>
            <returns>The Azure base image reference.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no base image can be located.</exception>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.ToSecurityRuleProtocol(Neon.Kube.IngressProtocol)">
            <summary>
            Converts a <see cref="T:Neon.Kube.IngressProtocol"/> to the corresponding <see cref="T:Microsoft.Azure.Management.Network.Fluent.Models.SecurityRuleProtocol"/>.
            </summary>
            <param name="protocol">The input protocol.</param>
            <returns>The output protocol.</returns>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.ToTransportProtocol(Neon.Kube.IngressProtocol)">
            <summary>
            Converts a <see cref="T:Neon.Kube.IngressProtocol"/> to the corresponding <see cref="T:Microsoft.Azure.Management.Network.Fluent.Models.TransportProtocol"/>.
            </summary>
            <param name="protocol">The input protocol.</param>
            <returns>The output protocol.</returns>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.ToAzureStorageType(Neon.Kube.AzureStorageType)">
            <summary>
            Converts a <see cref="T:Neon.Kube.AzureStorageType"/> to the underlying Azure storage type.
            </summary>
            <param name="azureStorageType">The input storage type.</param>
            <returns>The underlying Azure storage type.</returns>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.#ctor">
            <summary>
            Creates an instance that is only capable of validating the hosting
            related options in the cluster definition.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.#ctor(Neon.Kube.ClusterProxy,System.String)">
            <summary>
            Creates an instance that is capable of provisioning a cluster on Azure.
            </summary>
            <param name="cluster">The cluster being managed.</param>
            <param name="logFolder">
            The folder where log files are to be written, otherwise or <c>null</c> or 
            empty if logging is disabled.
            </param>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.Nodes">
            <summary>
            Enumerates the cluster nodes in no particular order.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.SortedNodes">
            <summary>
            Enumerates the cluster nodes in ascending order by name.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.MasterNodes">
            <summary>
            Enumerates the cluster master nodes in no particular order.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.SortedMasterNodes">
            <summary>
            Enumerates the cluster master nodes in ascending order by name.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.WorkerNodes">
            <summary>
            Enumerates the cluster worker nodes in no particular order.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.SorteWorkerNodes">
            <summary>
            Enumerates the cluster worker nodes in ascending order by name.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.SortedMasterThenWorkerNodes">
            <summary>
            Enumerates the cluster worker nodes in ascending order by name followed by the sorted worker nodes.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.GetResourceName(System.String,System.String,System.Boolean)">
            <summary>
            <para>
            Returns the name to use for a cluster related resource based on the standard Azure resource type
            prefix, the cluster name (if enabled) and the base resource name.  This is based on Azure naming
            conventions:
            </para>
            <para>
            <a href="https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/naming-and-tagging">Recommended naming and tagging conventions</a>
            </para>
            </summary>
            <param name="resourceTypePrefix">The Azure resource type prefix (like "pip" for public IP address).</param>
            <param name="resourceName">The base resource name.</param>
            <param name="omitResourceNameWhenPrefixed">Optionally omit <paramref name="resourceName"/> when resource names include the cluster name.</param>
            <returns>The fully qualified resource name.</returns>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.IsClusterResource(Microsoft.Azure.Management.ResourceManager.Fluent.Core.IResource)">
            <summary>
            Determines whether a resource belongs to the cluster by comparing its NEON cluster
            tag value to the cluster name.
            </summary>
            <param name="resource">The resource being checked.</param>
            <returns><c>true</c> if the resource belongs to the cluster.</returns>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.GetTags(Neon.Kube.ResourceTag[])">
            <summary>
            Creates the tags for a resource including cluster details, any custom
            user resource tags, as well as any optional tags passed.
            </summary>
            <param name="tags">Any optional tags.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.HostingEnvironment">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.RequiresNodeAddressCheck">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.Validate(Neon.Kube.ClusterDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.AddProvisioningSteps(Neon.Kube.SetupController{Neon.Kube.NodeDefinition})">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.AddPostProvisioningSteps(Neon.Kube.SetupController{Neon.Kube.NodeDefinition})">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.AddDeprovisoningSteps(Neon.Kube.SetupController{Neon.Kube.NodeDefinition})">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Kube.AzureHostingManager.CanManageRouter">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.UpdateInternetRoutingAsync">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.EnableInternetSshAsync">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.DisableInternetSshAsync">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.GetSshEndpoint(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.GetDataDisk(Neon.SSH.LinuxSshProxy)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.ConnectAzure">
            <summary>
            <para>
            Connects to Azure if we're not already connected.
            </para>
            <note>
            The current state of the deployed resources will always be loaded by this method,
            even if an connection has already been established.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.GetResources">
            <summary>
            Retrieves references to any cluster resources.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.VerifyRegionAndVmSizes">
            <summary>
            <para>
            Verifies that the requested Azure region exists, supports the requested VM sizes,
            and that VMs for nodes that specify UltraSSD actually support UltraSSD.  We'll also
            verify that the requested VMs have the minimum required number or cores and RAM.
            </para>
            <para>
            This also updates the node labels to match the capabilities of their VMs.
            </para>
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.CreateResourceGroup">
            <summary>
            Creates the cluster's resource group if it doesn't already exist.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.CreateAvailabilitySets">
            <summary>
            Creates an avilablity set for the master VMs and a separate one for the worker VMs
            as well as the cluster's proximity placement group.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.CreateNetworkSecurityGroups">
            <summary>
            Creates the network security groups.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.CreateVirtualNetwork">
            <summary>
            Creates the cluster's virtual network.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.CreatePublicAddress">
            <summary>
            Creates the public IP address for the cluster's load balancer.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.AssignExternalSshPorts(Neon.Kube.ISetupController)">
            <summary>
            Assigns external SSH ports to Azure VM records that don't already have one.  Note
            that we're not actually going to write the VM tags here; we'll do that when we
            actually create any new VMs.
            </summary>
            <param name="controller">The setup controller.</param>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.CreateLoadBalancer">
            <summary>
            Create the cluster's external load balancer.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.CreateVm(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Creates the NIC and VM for a cluster node.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="node">The target node.</param>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.ConfigureNode(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Performs some basic node initialization.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="node">The target node.</param>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.UpdateNetwork(Neon.Kube.AzureHostingManager.NetworkOperations)">
            <summary>
            Updates the load balancer and related security rules based on the operation flags passed.
            </summary>
            <param name="operations">Flags that control how the load balancer and related security rules are updated.</param>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.UpdateIngressEgressRules">
            <summary>
            Updates the load balancer and network security rules to match the current cluster definition.
            This also ensures that some nodes are marked for ingress when the cluster has one or more
            ingress rules and that nodes marked for ingress are in the load balancer's backend pool.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.AddSshRules">
            <summary>
            Adds public SSH NAT and security rules for every node in the cluster.
            These are used by neonKUBE tools for provisioning, setting up, and
            managing cluster nodes.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHostingManager.RemoveSshRules">
            <summary>
            Removes public SSH NAT and security rules for every node in the cluster.
            These are used by neonKUBE related tools for provisioning, setting up, and
            managing cluster nodes. 
            </summary>
        </member>
    </members>
</doc>
