apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  annotations:
    meta.helm.sh/release-name: neon-ingress
    meta.helm.sh/release-namespace: neon-ingress
  creationTimestamp: "2021-07-30T21:19:10Z"
  finalizers:
  - istio-finalizer.install.istio.io
  generation: 1
  labels:
    app.kubernetes.io/managed-by: Helm
  managedFields:
  - apiVersion: install.istio.io/v1alpha1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:meta.helm.sh/release-name: {}
          f:meta.helm.sh/release-namespace: {}
        f:labels:
          .: {}
          f:app.kubernetes.io/managed-by: {}
      f:spec:
        .: {}
        f:components:
          .: {}
          f:cni:
            .: {}
            f:enabled: {}
            f:namespace: {}
          f:ingressGateways: {}
        f:hub: {}
        f:meshConfig:
          .: {}
          f:enablePrometheusMerge: {}
          f:rootNamespace: {}
        f:namespace: {}
        f:tag: {}
        f:values:
          .: {}
          f:cni:
            .: {}
            f:excludeNamespaces: {}
            f:logLevel: {}
          f:gateways:
            .: {}
            f:istio-ingressgateway:
              .: {}
              f:externalTrafficPolicy: {}
              f:type: {}
          f:global:
            .: {}
            f:defaultNodeSelector:
              .: {}
              f:neonkube.io/istio: {}
            f:imagePullPolicy: {}
            f:istioNamespace: {}
            f:jwtPolicy: {}
            f:logAsJson: {}
            f:logging:
              .: {}
              f:level: {}
            f:proxy:
              .: {}
              f:holdApplicationUntilProxyStarts: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
            f:tracer:
              .: {}
              f:zipkin:
                .: {}
                f:address: {}
          f:meshConfig:
            .: {}
            f:accessLogEncoding: {}
            f:accessLogFile: {}
            f:accessLogFormat: {}
          f:pilot:
            .: {}
            f:traceSampling: {}
    manager: Go-http-client
    operation: Update
    time: "2021-07-30T21:19:10Z"
  - apiVersion: install.istio.io/v1alpha1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:finalizers:
          .: {}
          v:"istio-finalizer.install.istio.io": {}
      f:status:
        .: {}
        f:componentStatus:
          .: {}
          f:Base:
            .: {}
            f:status: {}
          f:Cni:
            .: {}
            f:status: {}
          f:IngressGateways:
            .: {}
            f:status: {}
          f:Pilot:
            .: {}
            f:status: {}
        f:status: {}
    manager: operator
    operation: Update
    time: "2021-07-30T21:21:01Z"
  name: neon-ingress-istio
  namespace: neon-ingress
  resourceVersion: "5027"
  uid: 152a4f43-8862-4b0b-ab44-7092c9e925a6
spec:
  components:
    cni:
      enabled: true
      namespace: kube-system
    ingressGateways:
    - enabled: true
      k8s:
        overlays:
        - apiVersion: apps/v1
          kind: Deployment
          name: istio-ingressgateway
          patches:
          - path: kind
            value: DaemonSet
          - path: spec.strategy
        resources:
          limits:
            cpu: "2"
            memory: 1Gi
          requests:
            cpu: 10m
            memory: 64Mi
        hpaSpec: {}
        service:
          ports:
          - name: http2
            nodePort: 30080
            port: 80
            protocol: TCP
            targetPort: 8080
          - name: https
            nodePort: 30443
            port: 443
            protocol: TCP
            targetPort: 8443
      name: istio-ingressgateway
  hub: docker.io/istio
  meshConfig:
    enablePrometheusMerge: false
    rootNamespace: neon-ingress
  namespace: neon-ingress
  tag: 1.10.3-distroless
  values:
    cni:
      excludeNamespaces:
      - neon-ingress
      - kube-system
      - kube-node-lease
      - kube-public
      logLevel: info
    gateways:
      istio-ingressgateway:
        externalTrafficPolicy: Local
        type: NodePort
    global:
      defaultNodeSelector:
        neonkube.io/istio: true
      imagePullPolicy: IfNotPresent
      istioNamespace: neon-ingress
      jwtPolicy: third-party-jwt
      logAsJson: true
      logging:
        level: default:info
      proxy:
        holdApplicationUntilProxyStarts: true
        resources:
          limits:
            cpu: "2"
            memory: 1Gi
          requests:
            cpu: 10m
            memory: 64Mi
      tracer:
        zipkin:
          address: jaeger-collector.monitoring.svc.cluster.local:9411
    meshConfig:
      accessLogEncoding: JSON
      accessLogFile: ""
      accessLogFormat: '{{   "authority": "%REQ(:AUTHORITY)%",   "mode": "%PROTOCOL%",   "upstream_service_time":
        "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%",   "upstream_local_address": "%UPSTREAM_LOCAL_ADDRESS%",   "duration":
        "%DURATION%",   "request_duration": "%REQUEST_DURATION%",   "response_duration":
        "%RESPONSE_DURATION%",   "response_tx_duration": "%RESPONSE_TX_DURATION%",   "downstream_local_address":
        "%DOWNSTREAM_LOCAL_ADDRESS%",   "upstream_transport_failure_reason": "%UPSTREAM_TRANSPORT_FAILURE_REASON%",   "route_name":
        "%ROUTE_NAME%",   "response_code": "%RESPONSE_CODE%",   "response_code_details":
        "%RESPONSE_CODE_DETAILS%",   "user_agent": "%REQ(USER-AGENT)%",   "response_flags":
        "%RESPONSE_FLAGS%",   "start_time": "%START_TIME(%s.%6f)%",   "method": "%REQ(:METHOD)%",   "host":
        "%REQ(:Host)%",   "referer": "%REQ(:Referer)%",   "request_id": "%REQ(X-REQUEST-ID)%",   "forwarded_host":
        "%REQ(X-FORWARDED-HOST)%",   "forwarded_proto": "%REQ(X-FORWARDED-PROTO)%",   "upstream_host":
        "%UPSTREAM_HOST%",   "downstream_local_uri_san": "%DOWNSTREAM_LOCAL_URI_SAN%",   "downstream_peer_uri_san":
        "%DOWNSTREAM_PEER_URI_SAN%",   "downstream_local_subject": "%DOWNSTREAM_LOCAL_SUBJECT%",   "downstream_peer_subject":
        "%DOWNSTREAM_PEER_SUBJECT%",   "downstream_peer_issuer": "%DOWNSTREAM_PEER_ISSUER%",   "downstream_tls_session_id":
        "%DOWNSTREAM_TLS_SESSION_ID%",   "downstream_tls_cipher": "%DOWNSTREAM_TLS_CIPHER%",   "downstream_tls_version":
        "%DOWNSTREAM_TLS_VERSION%",   "downstream_peer_serial": "%DOWNSTREAM_PEER_SERIAL%",   "downstream_peer_cert":
        "%DOWNSTREAM_PEER_CERT%",   "client_ip": "%REQ(X-FORWARDED-FOR)%",   "requested_server_name":
        "%REQUESTED_SERVER_NAME%",   "bytes_received": "%BYTES_RECEIVED%",   "bytes_sent":
        "%BYTES_SENT%",   "upstream_cluster": "%UPSTREAM_CLUSTER%",   "downstream_remote_address":
        "%DOWNSTREAM_REMOTE_ADDRESS%",   "path": "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
        }}'
    pilot:
      traceSampling: 100
status:
  componentStatus:
    Base:
      status: HEALTHY
    Cni:
      status: HEALTHY
    IngressGateways:
      status: HEALTHY
    Pilot:
      status: HEALTHY
  status: HEALTHY
