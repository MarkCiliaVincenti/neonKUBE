//-----------------------------------------------------------------------------
// FILE:	    KubernetesWithRetry.cs
// CONTRIBUTOR: Auto-generated by [prebuilder] tool during pre-build event
// COPYRIGHT:	Copyright (c) 2005-2021 by neonFORGE LLC.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: This file is automatically generated during the build.
//          Do not edit this manually.

#pragma warning disable CS1591  // Missing XML comment

using System;
using System.IO;
using System.Linq;
using System.Text;

using k8s;

using Neon.Common;
using Neon.Retry;

namespace Neon.Kube
{
    /// <summary>
    /// Wraps the standard <see cref="Kubernetes"/> class by adding support for an
    /// <see cref="IRetryPolicy"/> for all instance method calls.
    /// </summary>
    /// <remarks>
    /// <para>
    /// This is intended to be a drop-in replacement for the <see cref="Kubernetes"/> class,
    /// adding support for an optional <see cref="IRetryPolicy"/> for all instance method calls.
    /// </para>
    /// <para>
    /// To use, simply instantiate an instance and assign your custom <see cref="IRetryPolicy"/>
    /// to the <see cref="RetryPolicy"/> property.  This property defaults to <see cref="NoRetryPolicy"/>
    /// which means this class will work exactly like the standard <see cref="Kubernetes"/> class.
    /// You may change the retry policy at any time. 
    /// </para>
    /// <note>
    /// Static methods don't honor the retry policy.
    /// </note>
    /// </remarks>
    public sealed partial class KubernetesWithRetry : IKubernetes
    {
        private Kubernetes      k8s;

        public KubernetesWithRetry(global::k8s.KubernetesClientConfiguration config, global::System.Net.Http.HttpClient httpClient)
        {
            k8s = new Kubernetes(config, httpClient);
        }

        public KubernetesWithRetry(global::k8s.KubernetesClientConfiguration config, global::System.Net.Http.HttpClient httpClient, bool disposeHttpClient)
        {
            k8s = new Kubernetes(config, httpClient, disposeHttpClient);
        }

        public KubernetesWithRetry(global::k8s.KubernetesClientConfiguration config, params global::System.Net.Http.DelegatingHandler[] handlers)
        {
            k8s = new Kubernetes(config, handlers);
        }

        public KubernetesWithRetry(global::Microsoft.Rest.ServiceClientCredentials credentials, params global::System.Net.Http.DelegatingHandler[] handlers)
        {
            k8s = new Kubernetes(credentials, handlers);
        }

        public KubernetesWithRetry(global::Microsoft.Rest.ServiceClientCredentials credentials, global::System.Net.Http.HttpClient httpClient, bool disposeHttpClient)
        {
            k8s = new Kubernetes(credentials, httpClient, disposeHttpClient);
        }

        public KubernetesWithRetry(global::Microsoft.Rest.ServiceClientCredentials credentials, global::System.Net.Http.HttpClientHandler rootHandler, params global::System.Net.Http.DelegatingHandler[] handlers)
        {
            k8s = new Kubernetes(credentials, rootHandler, handlers);
        }

        public KubernetesWithRetry(global::System.Uri baseUri, global::Microsoft.Rest.ServiceClientCredentials credentials, params global::System.Net.Http.DelegatingHandler[] handlers)
        {
            k8s = new Kubernetes(baseUri, credentials, handlers);
        }

        public KubernetesWithRetry(global::System.Uri baseUri, global::Microsoft.Rest.ServiceClientCredentials credentials, global::System.Net.Http.HttpClientHandler rootHandler, params global::System.Net.Http.DelegatingHandler[] handlers)
        {
            k8s = new Kubernetes(baseUri, credentials, rootHandler, handlers);
        }

        /// <summary>
        /// <para>
        /// The retry policy to be applied public instance method calls.  This may
        /// be modified at anytime and defaults to <see cref="NoRetryPolicy"/>.
        /// </para>
        /// <note>
        /// You may also set this to <c>null</c> which is equivalant to <see cref="NoRetryPolicy"/>.
        /// </note>
        /// </summary>
        public IRetryPolicy RetryPolicy { get; set; } = NoRetryPolicy.Instance;

        /// <summary>
        /// Returns the <see cref="RetryPolicy"/> or <see cref="NoRetryPolicy.Instance"/> when the current policy is <c>null</c>.
        /// </summary>
        private IRetryPolicy NormalizedRetryPolicy => RetryPolicy ?? NoRetryPolicy.Instance;

        /// <inheritdoc/>
        public void Dispose()
        {
             k8s.Dispose();
        }

         /// <inheritdoc/>
        public global::System.Uri BaseUri { get; set; }

         /// <inheritdoc/>
        public global::Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; }

         /// <inheritdoc/>
        public global::Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; }

         /// <inheritdoc/>
        public global::Microsoft.Rest.ServiceClientCredentials Credentials { get; }

         /// <inheritdoc/>
        public global::System.Func<global::k8s.WebSocketBuilder> CreateWebSocketBuilder { get; set; }

         /// <inheritdoc/>
        public global::System.Net.Http.HttpClient HttpClient { get; }

         /// <inheritdoc/>
        public global::System.Net.Http.Headers.HttpHeaderValueCollection<global::System.Net.Http.Headers.ProductInfoHeaderValue> UserAgent { get; }

         /// <inheritdoc/>
        public global::System.Collections.Generic.IEnumerable<global::System.Net.Http.HttpMessageHandler> HttpMessageHandlers { get; }

        /// <inheritdoc/>
        public static bool CertificateValidationCallBack(global::System.Object sender, global::System.Security.Cryptography.X509Certificates.X509Certificate2Collection caCerts, global::System.Security.Cryptography.X509Certificates.X509Certificate certificate, global::System.Security.Cryptography.X509Certificates.X509Chain chain, global::System.Net.Security.SslPolicyErrors sslPolicyErrors)
        {
            return global::k8s.Kubernetes.CertificateValidationCallBack(sender, caCerts, certificate, chain, sslPolicyErrors);
        }

        /// <inheritdoc/>
        public static global::Microsoft.Rest.ServiceClientCredentials CreateCredentials(global::k8s.KubernetesClientConfiguration config)
        {
            return global::k8s.Kubernetes.CreateCredentials(config);
        }

        /// <inheritdoc/>
        public static int GetExitCodeOrThrow(global::k8s.Models.V1Status status)
        {
            return global::k8s.Kubernetes.GetExitCodeOrThrow(status);
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Net.WebSockets.WebSocket> WebSocketNamespacedPodAttachAsync(string name, string @namespace, string container, bool stderr, bool stdin, bool stdout, bool tty, string webSocketSubProtol, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WebSocketNamespacedPodAttachAsync(name, @namespace, container, stderr, stdin, stdout, tty, webSocketSubProtol, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> GetNamespacedCustomObjectWithHttpMessagesAsync(string group, string version, string namespaceParameter, string plural, string name, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetNamespacedCustomObjectWithHttpMessagesAsync(group, version, namespaceParameter, plural, name, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> ReplaceNamespacedCustomObjectScaleWithHttpMessagesAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedCustomObjectScaleWithHttpMessagesAsync(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> PatchNamespacedCustomObjectScaleWithHttpMessagesAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedCustomObjectScaleWithHttpMessagesAsync(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, force, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> GetNamespacedCustomObjectScaleWithHttpMessagesAsync(string group, string version, string namespaceParameter, string plural, string name, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetNamespacedCustomObjectScaleWithHttpMessagesAsync(group, version, namespaceParameter, plural, name, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> ReplaceClusterCustomObjectScaleWithHttpMessagesAsync(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceClusterCustomObjectScaleWithHttpMessagesAsync(body, group, version, plural, name, dryRun, fieldManager, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> PatchClusterCustomObjectScaleWithHttpMessagesAsync(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchClusterCustomObjectScaleWithHttpMessagesAsync(body, group, version, plural, name, dryRun, fieldManager, force, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> GetClusterCustomObjectScaleWithHttpMessagesAsync(string group, string version, string plural, string name, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetClusterCustomObjectScaleWithHttpMessagesAsync(group, version, plural, name, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> ReplaceClusterCustomObjectWithHttpMessagesAsync(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceClusterCustomObjectWithHttpMessagesAsync(body, group, version, plural, name, dryRun, fieldManager, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> PatchClusterCustomObjectWithHttpMessagesAsync(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchClusterCustomObjectWithHttpMessagesAsync(body, group, version, plural, name, dryRun, fieldManager, force, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> DeleteClusterCustomObjectWithHttpMessagesAsync(string group, string version, string plural, string name, global::k8s.Models.V1DeleteOptions body, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string dryRun, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteClusterCustomObjectWithHttpMessagesAsync(group, version, plural, name, body, gracePeriodSeconds, orphanDependents, propagationPolicy, dryRun, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> GetClusterCustomObjectWithHttpMessagesAsync(string group, string version, string plural, string name, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetClusterCustomObjectWithHttpMessagesAsync(group, version, plural, name, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> ReplaceNamespacedCustomObjectStatusWithHttpMessagesAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedCustomObjectStatusWithHttpMessagesAsync(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> PatchNamespacedCustomObjectStatusWithHttpMessagesAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedCustomObjectStatusWithHttpMessagesAsync(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, force, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> GetNamespacedCustomObjectStatusWithHttpMessagesAsync(string group, string version, string namespaceParameter, string plural, string name, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetNamespacedCustomObjectStatusWithHttpMessagesAsync(group, version, namespaceParameter, plural, name, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1ConfigMap>> WatchNamespacedConfigMapAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1ConfigMap> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedConfigMapAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Endpoints>> WatchNamespacedEndpointsAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Endpoints> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedEndpointsAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.Corev1Event>> WatchNamespacedEventAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.Corev1Event> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedEventAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1LimitRange>> WatchNamespacedLimitRangeAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1LimitRange> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedLimitRangeAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1PersistentVolumeClaim>> WatchNamespacedPersistentVolumeClaimAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1PersistentVolumeClaim> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedPersistentVolumeClaimAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Pod>> WatchNamespacedPodAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Pod> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedPodAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1PodTemplate>> WatchNamespacedPodTemplateAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1PodTemplate> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedPodTemplateAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1ReplicationController>> WatchNamespacedReplicationControllerAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1ReplicationController> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedReplicationControllerAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1ResourceQuota>> WatchNamespacedResourceQuotaAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1ResourceQuota> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedResourceQuotaAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Secret>> WatchNamespacedSecretAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Secret> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedSecretAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1ServiceAccount>> WatchNamespacedServiceAccountAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1ServiceAccount> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedServiceAccountAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Service>> WatchNamespacedServiceAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Service> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedServiceAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Namespace>> WatchNamespaceAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Namespace> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespaceAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Node>> WatchNodeAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Node> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNodeAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1PersistentVolume>> WatchPersistentVolumeAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1PersistentVolume> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchPersistentVolumeAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1MutatingWebhookConfiguration>> WatchMutatingWebhookConfigurationAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1MutatingWebhookConfiguration> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchMutatingWebhookConfigurationAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1ValidatingWebhookConfiguration>> WatchValidatingWebhookConfigurationAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1ValidatingWebhookConfiguration> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchValidatingWebhookConfigurationAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1MutatingWebhookConfiguration>> WatchMutatingWebhookConfigurationAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1MutatingWebhookConfiguration> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchMutatingWebhookConfigurationAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1ValidatingWebhookConfiguration>> WatchValidatingWebhookConfigurationAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1ValidatingWebhookConfiguration> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchValidatingWebhookConfigurationAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1CustomResourceDefinition>> WatchCustomResourceDefinitionAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1CustomResourceDefinition> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchCustomResourceDefinitionAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1CustomResourceDefinition>> WatchCustomResourceDefinitionAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1CustomResourceDefinition> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchCustomResourceDefinitionAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1APIService>> WatchAPIServiceAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1APIService> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchAPIServiceAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1APIService>> WatchAPIServiceAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1APIService> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchAPIServiceAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1ControllerRevision>> WatchNamespacedControllerRevisionAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1ControllerRevision> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedControllerRevisionAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1DaemonSet>> WatchNamespacedDaemonSetAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1DaemonSet> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedDaemonSetAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Deployment>> WatchNamespacedDeploymentAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Deployment> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedDeploymentAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1ReplicaSet>> WatchNamespacedReplicaSetAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1ReplicaSet> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedReplicaSetAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1StatefulSet>> WatchNamespacedStatefulSetAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1StatefulSet> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedStatefulSetAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1HorizontalPodAutoscaler>> WatchNamespacedHorizontalPodAutoscalerAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1HorizontalPodAutoscaler> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedHorizontalPodAutoscalerAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V2beta1HorizontalPodAutoscaler>> WatchNamespacedHorizontalPodAutoscalerAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V2beta1HorizontalPodAutoscaler> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedHorizontalPodAutoscalerAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V2beta2HorizontalPodAutoscaler>> WatchNamespacedHorizontalPodAutoscalerAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V2beta2HorizontalPodAutoscaler> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedHorizontalPodAutoscalerAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Job>> WatchNamespacedJobAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Job> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedJobAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1CronJob>> WatchNamespacedCronJobAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1CronJob> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedCronJobAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V2alpha1CronJob>> WatchNamespacedCronJobAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V2alpha1CronJob> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedCronJobAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1CertificateSigningRequest>> WatchCertificateSigningRequestAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1CertificateSigningRequest> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchCertificateSigningRequestAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1CertificateSigningRequest>> WatchCertificateSigningRequestAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1CertificateSigningRequest> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchCertificateSigningRequestAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Lease>> WatchNamespacedLeaseAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Lease> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedLeaseAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1Lease>> WatchNamespacedLeaseAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1Lease> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedLeaseAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1EndpointSlice>> WatchNamespacedEndpointSliceAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1EndpointSlice> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedEndpointSliceAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.Eventsv1Event>> WatchNamespacedEventAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.Eventsv1Event> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedEventAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1Event>> WatchNamespacedEventAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1Event> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedEventAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.Extensionsv1beta1Ingress>> WatchNamespacedIngressAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.Extensionsv1beta1Ingress> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedIngressAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1FlowSchema>> WatchFlowSchemaAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1FlowSchema> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchFlowSchemaAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1PriorityLevelConfiguration>> WatchPriorityLevelConfigurationAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1PriorityLevelConfiguration> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchPriorityLevelConfigurationAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1FlowSchema>> WatchFlowSchemaAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1FlowSchema> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchFlowSchemaAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1PriorityLevelConfiguration>> WatchPriorityLevelConfigurationAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1PriorityLevelConfiguration> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchPriorityLevelConfigurationAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1StorageVersion>> WatchStorageVersionAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1StorageVersion> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchStorageVersionAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1IngressClass>> WatchIngressClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1IngressClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchIngressClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Ingress>> WatchNamespacedIngressAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Ingress> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedIngressAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1NetworkPolicy>> WatchNamespacedNetworkPolicyAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1NetworkPolicy> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedNetworkPolicyAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1IngressClass>> WatchIngressClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1IngressClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchIngressClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.Networkingv1beta1Ingress>> WatchNamespacedIngressAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.Networkingv1beta1Ingress> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedIngressAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1RuntimeClass>> WatchRuntimeClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1RuntimeClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchRuntimeClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1RuntimeClass>> WatchRuntimeClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1RuntimeClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchRuntimeClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1RuntimeClass>> WatchRuntimeClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1RuntimeClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchRuntimeClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1PodDisruptionBudget>> WatchNamespacedPodDisruptionBudgetAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1PodDisruptionBudget> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedPodDisruptionBudgetAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1PodSecurityPolicy>> WatchPodSecurityPolicyAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1PodSecurityPolicy> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchPodSecurityPolicyAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1ClusterRoleBinding>> WatchClusterRoleBindingAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1ClusterRoleBinding> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchClusterRoleBindingAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1ClusterRole>> WatchClusterRoleAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1ClusterRole> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchClusterRoleAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1RoleBinding>> WatchNamespacedRoleBindingAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1RoleBinding> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedRoleBindingAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1Role>> WatchNamespacedRoleAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1Role> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedRoleAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1ClusterRoleBinding>> WatchClusterRoleBindingAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1ClusterRoleBinding> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchClusterRoleBindingAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1ClusterRole>> WatchClusterRoleAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1ClusterRole> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchClusterRoleAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1RoleBinding>> WatchNamespacedRoleBindingAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1RoleBinding> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedRoleBindingAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1Role>> WatchNamespacedRoleAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1Role> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedRoleAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1ClusterRoleBinding>> WatchClusterRoleBindingAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1ClusterRoleBinding> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchClusterRoleBindingAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1ClusterRole>> WatchClusterRoleAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1ClusterRole> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchClusterRoleAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1RoleBinding>> WatchNamespacedRoleBindingAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1RoleBinding> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedRoleBindingAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1Role>> WatchNamespacedRoleAsync(string name, string @namespace, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1Role> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchNamespacedRoleAsync(name, @namespace, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1PriorityClass>> WatchPriorityClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1PriorityClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchPriorityClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1PriorityClass>> WatchPriorityClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1PriorityClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchPriorityClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1PriorityClass>> WatchPriorityClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1PriorityClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchPriorityClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1CSIDriver>> WatchCSIDriverAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1CSIDriver> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchCSIDriverAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1CSINode>> WatchCSINodeAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1CSINode> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchCSINodeAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1StorageClass>> WatchStorageClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1StorageClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchStorageClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1VolumeAttachment>> WatchVolumeAttachmentAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1VolumeAttachment> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchVolumeAttachmentAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1alpha1VolumeAttachment>> WatchVolumeAttachmentAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1alpha1VolumeAttachment> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchVolumeAttachmentAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1CSIDriver>> WatchCSIDriverAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1CSIDriver> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchCSIDriverAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1CSINode>> WatchCSINodeAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1CSINode> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchCSINodeAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1StorageClass>> WatchStorageClassAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1StorageClass> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchStorageClassAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<global::k8s.Models.V1beta1VolumeAttachment>> WatchVolumeAttachmentAsync(string name, global::System.Nullable<bool> allowWatchBookmarks, string @continue, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, global::k8s.Models.V1beta1VolumeAttachment> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchVolumeAttachmentAsync(name, allowWatchBookmarks, @continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<int> NamespacedPodExecAsync(string name, string @namespace, string container, global::System.Collections.Generic.IEnumerable<string> command, bool tty, global::k8s.ExecAsyncCallback action, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.NamespacedPodExecAsync(name, @namespace, container, command, tty, action, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Net.Http.Headers.MediaTypeHeaderValue GetHeader(global::System.Object body)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetHeader(body);
                });
        }

        /// <inheritdoc/>
        public global::System.Net.Http.Headers.MediaTypeHeaderValue GetHeader(global::k8s.Models.V1Patch body)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetHeader(body);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Watcher<T>> WatchObjectAsync<T>(string path, string @continue, string fieldSelector, global::System.Nullable<bool> includeUninitialized, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> pretty, global::System.Nullable<int> timeoutSeconds, string resourceVersion, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Action<global::k8s.WatchEventType, T> onEvent, global::System.Action<global::System.Exception> onError, global::System.Action onClosed, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WatchObjectAsync(path, @continue, fieldSelector, includeUninitialized, labelSelector, limit, pretty, timeoutSeconds, resourceVersion, customHeaders, onEvent, onError, onClosed, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Net.WebSockets.WebSocket> WebSocketNamespacedPodExecAsync(string name, string @namespace, string command, string container, bool stderr, bool stdin, bool stdout, bool tty, string webSocketSubProtol, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WebSocketNamespacedPodExecAsync(name, @namespace, command, container, stderr, stdin, stdout, tty, webSocketSubProtol, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.IStreamDemuxer> MuxedStreamNamespacedPodExecAsync(string name, string @namespace, global::System.Collections.Generic.IEnumerable<string> command, string container, bool stderr, bool stdin, bool stdout, bool tty, string webSocketSubProtol, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.MuxedStreamNamespacedPodExecAsync(name, @namespace, command, container, stderr, stdin, stdout, tty, webSocketSubProtol, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Net.WebSockets.WebSocket> WebSocketNamespacedPodExecAsync(string name, string @namespace, global::System.Collections.Generic.IEnumerable<string> command, string container, bool stderr, bool stdin, bool stdout, bool tty, string webSocketSubProtol, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WebSocketNamespacedPodExecAsync(name, @namespace, command, container, stderr, stdin, stdout, tty, webSocketSubProtol, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Net.WebSockets.WebSocket> WebSocketNamespacedPodPortForwardAsync(string name, string @namespace, global::System.Collections.Generic.IEnumerable<int> ports, string webSocketSubProtocol, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.WebSocketNamespacedPodPortForwardAsync(name, @namespace, ports, webSocketSubProtocol, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRole>> ReplaceClusterRole2WithHttpMessagesAsync(global::k8s.Models.V1beta1ClusterRole body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceClusterRole2WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedRoleBinding2WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedRoleBinding2WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RoleBindingList>> ListNamespacedRoleBinding2WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedRoleBinding2WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RoleBinding>> CreateNamespacedRoleBinding2WithHttpMessagesAsync(global::k8s.Models.V1beta1RoleBinding body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedRoleBinding2WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedRoleBinding2WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedRoleBinding2WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RoleBinding>> ReadNamespacedRoleBinding2WithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedRoleBinding2WithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RoleBinding>> PatchNamespacedRoleBinding2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedRoleBinding2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RoleBinding>> ReplaceNamespacedRoleBinding2WithHttpMessagesAsync(global::k8s.Models.V1beta1RoleBinding body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedRoleBinding2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedRole2WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedRole2WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RoleList>> ListNamespacedRole2WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedRole2WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Role>> CreateNamespacedRole2WithHttpMessagesAsync(global::k8s.Models.V1beta1Role body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedRole2WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedRole2WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedRole2WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Role>> ReadNamespacedRole2WithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedRole2WithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Role>> PatchNamespacedRole2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedRole2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Role>> ReplaceNamespacedRole2WithHttpMessagesAsync(global::k8s.Models.V1beta1Role body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedRole2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RoleBindingList>> ListRoleBindingForAllNamespaces2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListRoleBindingForAllNamespaces2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RoleList>> ListRoleForAllNamespaces2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListRoleForAllNamespaces2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup19WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup19WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources38WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources38WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionPriorityClassWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionPriorityClassWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PriorityClassList>> ListPriorityClassWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPriorityClassWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PriorityClass>> CreatePriorityClassWithHttpMessagesAsync(global::k8s.Models.V1PriorityClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreatePriorityClassWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeletePriorityClassWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeletePriorityClassWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PriorityClass>> ReadPriorityClassWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPriorityClassWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PriorityClass>> PatchPriorityClassWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPriorityClassWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PriorityClass>> ReplacePriorityClassWithHttpMessagesAsync(global::k8s.Models.V1PriorityClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePriorityClassWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources39WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources39WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionPriorityClass1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionPriorityClass1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityClassList>> ListPriorityClass1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPriorityClass1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityClass>> CreatePriorityClass1WithHttpMessagesAsync(global::k8s.Models.V1alpha1PriorityClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreatePriorityClass1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeletePriorityClass1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeletePriorityClass1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityClass>> ReadPriorityClass1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPriorityClass1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityClass>> PatchPriorityClass1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPriorityClass1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityClass>> ReplacePriorityClass1WithHttpMessagesAsync(global::k8s.Models.V1alpha1PriorityClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePriorityClass1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources40WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources40WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionPriorityClass2WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionPriorityClass2WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityClassList>> ListPriorityClass2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPriorityClass2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityClass>> CreatePriorityClass2WithHttpMessagesAsync(global::k8s.Models.V1beta1PriorityClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreatePriorityClass2WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeletePriorityClass2WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeletePriorityClass2WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityClass>> ReadPriorityClass2WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPriorityClass2WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityClass>> PatchPriorityClass2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPriorityClass2WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityClass>> ReplacePriorityClass2WithHttpMessagesAsync(global::k8s.Models.V1beta1PriorityClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePriorityClass2WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup20WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup20WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources41WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources41WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionCSIDriverWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionCSIDriverWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSIDriverList>> ListCSIDriverWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCSIDriverWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSIDriver>> CreateCSIDriverWithHttpMessagesAsync(global::k8s.Models.V1CSIDriver body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateCSIDriverWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSIDriver>> DeleteCSIDriverWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCSIDriverWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSIDriver>> ReadCSIDriverWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCSIDriverWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSIDriver>> PatchCSIDriverWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCSIDriverWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSIDriver>> ReplaceCSIDriverWithHttpMessagesAsync(global::k8s.Models.V1CSIDriver body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCSIDriverWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionCSINodeWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionCSINodeWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSINodeList>> ListCSINodeWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCSINodeWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSINode>> CreateCSINodeWithHttpMessagesAsync(global::k8s.Models.V1CSINode body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateCSINodeWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSINode>> DeleteCSINodeWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCSINodeWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSINode>> ReadCSINodeWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCSINodeWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSINode>> PatchCSINodeWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCSINodeWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CSINode>> ReplaceCSINodeWithHttpMessagesAsync(global::k8s.Models.V1CSINode body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCSINodeWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionStorageClassWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionStorageClassWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StorageClassList>> ListStorageClassWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListStorageClassWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StorageClass>> CreateStorageClassWithHttpMessagesAsync(global::k8s.Models.V1StorageClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateStorageClassWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StorageClass>> DeleteStorageClassWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteStorageClassWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StorageClass>> ReadStorageClassWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadStorageClassWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StorageClass>> PatchStorageClassWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchStorageClassWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StorageClass>> ReplaceStorageClassWithHttpMessagesAsync(global::k8s.Models.V1StorageClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceStorageClassWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionVolumeAttachmentWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionVolumeAttachmentWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1VolumeAttachmentList>> ListVolumeAttachmentWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListVolumeAttachmentWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1VolumeAttachment>> CreateVolumeAttachmentWithHttpMessagesAsync(global::k8s.Models.V1VolumeAttachment body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateVolumeAttachmentWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1VolumeAttachment>> DeleteVolumeAttachmentWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteVolumeAttachmentWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1VolumeAttachment>> ReadVolumeAttachmentWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadVolumeAttachmentWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1VolumeAttachment>> PatchVolumeAttachmentWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchVolumeAttachmentWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1VolumeAttachment>> ReplaceVolumeAttachmentWithHttpMessagesAsync(global::k8s.Models.V1VolumeAttachment body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceVolumeAttachmentWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1VolumeAttachment>> ReadVolumeAttachmentStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadVolumeAttachmentStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1VolumeAttachment>> PatchVolumeAttachmentStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchVolumeAttachmentStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1VolumeAttachment>> ReplaceVolumeAttachmentStatusWithHttpMessagesAsync(global::k8s.Models.V1VolumeAttachment body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceVolumeAttachmentStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources42WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources42WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionVolumeAttachment1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionVolumeAttachment1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1VolumeAttachmentList>> ListVolumeAttachment1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListVolumeAttachment1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1VolumeAttachment>> CreateVolumeAttachment1WithHttpMessagesAsync(global::k8s.Models.V1alpha1VolumeAttachment body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateVolumeAttachment1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1VolumeAttachment>> DeleteVolumeAttachment1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteVolumeAttachment1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1VolumeAttachment>> ReadVolumeAttachment1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadVolumeAttachment1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1VolumeAttachment>> PatchVolumeAttachment1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchVolumeAttachment1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1VolumeAttachment>> ReplaceVolumeAttachment1WithHttpMessagesAsync(global::k8s.Models.V1alpha1VolumeAttachment body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceVolumeAttachment1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources43WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources43WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionCSIDriver1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionCSIDriver1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSIDriverList>> ListCSIDriver1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCSIDriver1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSIDriver>> CreateCSIDriver1WithHttpMessagesAsync(global::k8s.Models.V1beta1CSIDriver body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateCSIDriver1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSIDriver>> DeleteCSIDriver1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCSIDriver1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSIDriver>> ReadCSIDriver1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCSIDriver1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSIDriver>> PatchCSIDriver1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCSIDriver1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSIDriver>> ReplaceCSIDriver1WithHttpMessagesAsync(global::k8s.Models.V1beta1CSIDriver body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCSIDriver1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionCSINode1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionCSINode1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSINodeList>> ListCSINode1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCSINode1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSINode>> CreateCSINode1WithHttpMessagesAsync(global::k8s.Models.V1beta1CSINode body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateCSINode1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSINode>> DeleteCSINode1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCSINode1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSINode>> ReadCSINode1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCSINode1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSINode>> PatchCSINode1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCSINode1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CSINode>> ReplaceCSINode1WithHttpMessagesAsync(global::k8s.Models.V1beta1CSINode body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCSINode1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionStorageClass1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionStorageClass1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1StorageClassList>> ListStorageClass1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListStorageClass1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1StorageClass>> CreateStorageClass1WithHttpMessagesAsync(global::k8s.Models.V1beta1StorageClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateStorageClass1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1StorageClass>> DeleteStorageClass1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteStorageClass1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1StorageClass>> ReadStorageClass1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadStorageClass1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1StorageClass>> PatchStorageClass1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchStorageClass1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1StorageClass>> ReplaceStorageClass1WithHttpMessagesAsync(global::k8s.Models.V1beta1StorageClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceStorageClass1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionVolumeAttachment2WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionVolumeAttachment2WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1VolumeAttachmentList>> ListVolumeAttachment2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListVolumeAttachment2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1VolumeAttachment>> CreateVolumeAttachment2WithHttpMessagesAsync(global::k8s.Models.V1beta1VolumeAttachment body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateVolumeAttachment2WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1VolumeAttachment>> DeleteVolumeAttachment2WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteVolumeAttachment2WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1VolumeAttachment>> ReadVolumeAttachment2WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadVolumeAttachment2WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1VolumeAttachment>> PatchVolumeAttachment2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchVolumeAttachment2WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1VolumeAttachment>> ReplaceVolumeAttachment2WithHttpMessagesAsync(global::k8s.Models.V1beta1VolumeAttachment body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceVolumeAttachment2WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse> LogFileListHandlerWithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.LogFileListHandlerWithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse> LogFileHandlerWithHttpMessagesAsync(string logpath, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.LogFileHandlerWithHttpMessagesAsync(logpath, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<string>> GetServiceAccountIssuerOpenIDKeysetWithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetServiceAccountIssuerOpenIDKeysetWithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.VersionInfo>> GetCodeWithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetCodeWithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> CreateNamespacedCustomObjectWithHttpMessagesAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedCustomObjectWithHttpMessagesAsync(body, group, version, namespaceParameter, plural, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> DeleteCollectionNamespacedCustomObjectWithHttpMessagesAsync(string group, string version, string namespaceParameter, string plural, global::k8s.Models.V1DeleteOptions body, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string dryRun, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedCustomObjectWithHttpMessagesAsync(group, version, namespaceParameter, plural, body, gracePeriodSeconds, orphanDependents, propagationPolicy, dryRun, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> ListNamespacedCustomObjectWithHttpMessagesAsync(string group, string version, string namespaceParameter, string plural, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedCustomObjectWithHttpMessagesAsync(group, version, namespaceParameter, plural, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> CreateClusterCustomObjectWithHttpMessagesAsync(global::System.Object body, string group, string version, string plural, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateClusterCustomObjectWithHttpMessagesAsync(body, group, version, plural, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> DeleteCollectionClusterCustomObjectWithHttpMessagesAsync(string group, string version, string plural, global::k8s.Models.V1DeleteOptions body, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string dryRun, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionClusterCustomObjectWithHttpMessagesAsync(group, version, plural, body, gracePeriodSeconds, orphanDependents, propagationPolicy, dryRun, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> ListClusterCustomObjectWithHttpMessagesAsync(string group, string version, string plural, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListClusterCustomObjectWithHttpMessagesAsync(group, version, plural, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> ReplaceClusterCustomObjectStatusWithHttpMessagesAsync(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceClusterCustomObjectStatusWithHttpMessagesAsync(body, group, version, plural, name, dryRun, fieldManager, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> PatchClusterCustomObjectStatusWithHttpMessagesAsync(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchClusterCustomObjectStatusWithHttpMessagesAsync(body, group, version, plural, name, dryRun, fieldManager, force, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> GetClusterCustomObjectStatusWithHttpMessagesAsync(string group, string version, string plural, string name, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetClusterCustomObjectStatusWithHttpMessagesAsync(group, version, plural, name, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> ReplaceNamespacedCustomObjectWithHttpMessagesAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedCustomObjectWithHttpMessagesAsync(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> PatchNamespacedCustomObjectWithHttpMessagesAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedCustomObjectWithHttpMessagesAsync(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, force, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.Object>> DeleteNamespacedCustomObjectWithHttpMessagesAsync(string group, string version, string namespaceParameter, string plural, string name, global::k8s.Models.V1DeleteOptions body, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string dryRun, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedCustomObjectWithHttpMessagesAsync(group, version, namespaceParameter, plural, name, body, gracePeriodSeconds, orphanDependents, propagationPolicy, dryRun, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Networkingv1beta1Ingress>> ReadNamespacedIngress2WithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedIngress2WithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Networkingv1beta1Ingress>> PatchNamespacedIngress2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedIngress2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Networkingv1beta1Ingress>> ReplaceNamespacedIngress2WithHttpMessagesAsync(global::k8s.Models.Networkingv1beta1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedIngress2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Networkingv1beta1Ingress>> ReadNamespacedIngressStatus2WithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedIngressStatus2WithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Networkingv1beta1Ingress>> PatchNamespacedIngressStatus2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedIngressStatus2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Networkingv1beta1Ingress>> ReplaceNamespacedIngressStatus2WithHttpMessagesAsync(global::k8s.Models.Networkingv1beta1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedIngressStatus2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup16WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup16WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources31WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources31WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionRuntimeClassWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionRuntimeClassWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RuntimeClassList>> ListRuntimeClassWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListRuntimeClassWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RuntimeClass>> CreateRuntimeClassWithHttpMessagesAsync(global::k8s.Models.V1RuntimeClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateRuntimeClassWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteRuntimeClassWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteRuntimeClassWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RuntimeClass>> ReadRuntimeClassWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadRuntimeClassWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RuntimeClass>> PatchRuntimeClassWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchRuntimeClassWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RuntimeClass>> ReplaceRuntimeClassWithHttpMessagesAsync(global::k8s.Models.V1RuntimeClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceRuntimeClassWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources32WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources32WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionRuntimeClass1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionRuntimeClass1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RuntimeClassList>> ListRuntimeClass1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListRuntimeClass1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RuntimeClass>> CreateRuntimeClass1WithHttpMessagesAsync(global::k8s.Models.V1alpha1RuntimeClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateRuntimeClass1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteRuntimeClass1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteRuntimeClass1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RuntimeClass>> ReadRuntimeClass1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadRuntimeClass1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RuntimeClass>> PatchRuntimeClass1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchRuntimeClass1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RuntimeClass>> ReplaceRuntimeClass1WithHttpMessagesAsync(global::k8s.Models.V1alpha1RuntimeClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceRuntimeClass1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources33WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources33WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionRuntimeClass2WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionRuntimeClass2WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RuntimeClassList>> ListRuntimeClass2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListRuntimeClass2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RuntimeClass>> CreateRuntimeClass2WithHttpMessagesAsync(global::k8s.Models.V1beta1RuntimeClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateRuntimeClass2WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteRuntimeClass2WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteRuntimeClass2WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RuntimeClass>> ReadRuntimeClass2WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadRuntimeClass2WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RuntimeClass>> PatchRuntimeClass2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchRuntimeClass2WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1RuntimeClass>> ReplaceRuntimeClass2WithHttpMessagesAsync(global::k8s.Models.V1beta1RuntimeClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceRuntimeClass2WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup17WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup17WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources34WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources34WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedPodDisruptionBudgetWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedPodDisruptionBudgetWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodDisruptionBudgetList>> ListNamespacedPodDisruptionBudgetWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedPodDisruptionBudgetWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodDisruptionBudget>> CreateNamespacedPodDisruptionBudgetWithHttpMessagesAsync(global::k8s.Models.V1beta1PodDisruptionBudget body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedPodDisruptionBudgetWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedPodDisruptionBudgetWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedPodDisruptionBudgetWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodDisruptionBudget>> ReadNamespacedPodDisruptionBudgetWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedPodDisruptionBudgetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodDisruptionBudget>> PatchNamespacedPodDisruptionBudgetWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedPodDisruptionBudgetWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodDisruptionBudget>> ReplaceNamespacedPodDisruptionBudgetWithHttpMessagesAsync(global::k8s.Models.V1beta1PodDisruptionBudget body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedPodDisruptionBudgetWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodDisruptionBudget>> ReadNamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodDisruptionBudget>> PatchNamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodDisruptionBudget>> ReplaceNamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(global::k8s.Models.V1beta1PodDisruptionBudget body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedPodDisruptionBudgetStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodDisruptionBudgetList>> ListPodDisruptionBudgetForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPodDisruptionBudgetForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionPodSecurityPolicyWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionPodSecurityPolicyWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodSecurityPolicyList>> ListPodSecurityPolicyWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPodSecurityPolicyWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodSecurityPolicy>> CreatePodSecurityPolicyWithHttpMessagesAsync(global::k8s.Models.V1beta1PodSecurityPolicy body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreatePodSecurityPolicyWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodSecurityPolicy>> DeletePodSecurityPolicyWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeletePodSecurityPolicyWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodSecurityPolicy>> ReadPodSecurityPolicyWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPodSecurityPolicyWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodSecurityPolicy>> PatchPodSecurityPolicyWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPodSecurityPolicyWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PodSecurityPolicy>> ReplacePodSecurityPolicyWithHttpMessagesAsync(global::k8s.Models.V1beta1PodSecurityPolicy body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePodSecurityPolicyWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup18WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup18WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources35WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources35WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionClusterRoleBindingWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionClusterRoleBindingWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRoleBindingList>> ListClusterRoleBindingWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListClusterRoleBindingWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRoleBinding>> CreateClusterRoleBindingWithHttpMessagesAsync(global::k8s.Models.V1ClusterRoleBinding body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateClusterRoleBindingWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteClusterRoleBindingWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteClusterRoleBindingWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRoleBinding>> ReadClusterRoleBindingWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadClusterRoleBindingWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRoleBinding>> PatchClusterRoleBindingWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchClusterRoleBindingWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRoleBinding>> ReplaceClusterRoleBindingWithHttpMessagesAsync(global::k8s.Models.V1ClusterRoleBinding body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceClusterRoleBindingWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionClusterRoleWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionClusterRoleWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRoleList>> ListClusterRoleWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListClusterRoleWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRole>> CreateClusterRoleWithHttpMessagesAsync(global::k8s.Models.V1ClusterRole body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateClusterRoleWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteClusterRoleWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteClusterRoleWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRole>> ReadClusterRoleWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadClusterRoleWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRole>> PatchClusterRoleWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchClusterRoleWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ClusterRole>> ReplaceClusterRoleWithHttpMessagesAsync(global::k8s.Models.V1ClusterRole body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceClusterRoleWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedRoleBindingWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedRoleBindingWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RoleBindingList>> ListNamespacedRoleBindingWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedRoleBindingWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RoleBinding>> CreateNamespacedRoleBindingWithHttpMessagesAsync(global::k8s.Models.V1RoleBinding body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedRoleBindingWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedRoleBindingWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedRoleBindingWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RoleBinding>> ReadNamespacedRoleBindingWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedRoleBindingWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RoleBinding>> PatchNamespacedRoleBindingWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedRoleBindingWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RoleBinding>> ReplaceNamespacedRoleBindingWithHttpMessagesAsync(global::k8s.Models.V1RoleBinding body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedRoleBindingWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedRoleWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedRoleWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RoleList>> ListNamespacedRoleWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedRoleWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Role>> CreateNamespacedRoleWithHttpMessagesAsync(global::k8s.Models.V1Role body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedRoleWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedRoleWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedRoleWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Role>> ReadNamespacedRoleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedRoleWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Role>> PatchNamespacedRoleWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedRoleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Role>> ReplaceNamespacedRoleWithHttpMessagesAsync(global::k8s.Models.V1Role body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedRoleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RoleBindingList>> ListRoleBindingForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListRoleBindingForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1RoleList>> ListRoleForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListRoleForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources36WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources36WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionClusterRoleBinding1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionClusterRoleBinding1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRoleBindingList>> ListClusterRoleBinding1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListClusterRoleBinding1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRoleBinding>> CreateClusterRoleBinding1WithHttpMessagesAsync(global::k8s.Models.V1alpha1ClusterRoleBinding body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateClusterRoleBinding1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteClusterRoleBinding1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteClusterRoleBinding1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRoleBinding>> ReadClusterRoleBinding1WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadClusterRoleBinding1WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRoleBinding>> PatchClusterRoleBinding1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchClusterRoleBinding1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRoleBinding>> ReplaceClusterRoleBinding1WithHttpMessagesAsync(global::k8s.Models.V1alpha1ClusterRoleBinding body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceClusterRoleBinding1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionClusterRole1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionClusterRole1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRoleList>> ListClusterRole1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListClusterRole1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRole>> CreateClusterRole1WithHttpMessagesAsync(global::k8s.Models.V1alpha1ClusterRole body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateClusterRole1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteClusterRole1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteClusterRole1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRole>> ReadClusterRole1WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadClusterRole1WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRole>> PatchClusterRole1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchClusterRole1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1ClusterRole>> ReplaceClusterRole1WithHttpMessagesAsync(global::k8s.Models.V1alpha1ClusterRole body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceClusterRole1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedRoleBinding1WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedRoleBinding1WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RoleBindingList>> ListNamespacedRoleBinding1WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedRoleBinding1WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RoleBinding>> CreateNamespacedRoleBinding1WithHttpMessagesAsync(global::k8s.Models.V1alpha1RoleBinding body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedRoleBinding1WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedRoleBinding1WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedRoleBinding1WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RoleBinding>> ReadNamespacedRoleBinding1WithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedRoleBinding1WithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RoleBinding>> PatchNamespacedRoleBinding1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedRoleBinding1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RoleBinding>> ReplaceNamespacedRoleBinding1WithHttpMessagesAsync(global::k8s.Models.V1alpha1RoleBinding body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedRoleBinding1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedRole1WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedRole1WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RoleList>> ListNamespacedRole1WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedRole1WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1Role>> CreateNamespacedRole1WithHttpMessagesAsync(global::k8s.Models.V1alpha1Role body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedRole1WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedRole1WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedRole1WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1Role>> ReadNamespacedRole1WithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedRole1WithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1Role>> PatchNamespacedRole1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedRole1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1Role>> ReplaceNamespacedRole1WithHttpMessagesAsync(global::k8s.Models.V1alpha1Role body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedRole1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RoleBindingList>> ListRoleBindingForAllNamespaces1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListRoleBindingForAllNamespaces1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1RoleList>> ListRoleForAllNamespaces1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListRoleForAllNamespaces1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources37WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources37WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionClusterRoleBinding2WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionClusterRoleBinding2WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRoleBindingList>> ListClusterRoleBinding2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListClusterRoleBinding2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRoleBinding>> CreateClusterRoleBinding2WithHttpMessagesAsync(global::k8s.Models.V1beta1ClusterRoleBinding body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateClusterRoleBinding2WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteClusterRoleBinding2WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteClusterRoleBinding2WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRoleBinding>> ReadClusterRoleBinding2WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadClusterRoleBinding2WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRoleBinding>> PatchClusterRoleBinding2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchClusterRoleBinding2WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRoleBinding>> ReplaceClusterRoleBinding2WithHttpMessagesAsync(global::k8s.Models.V1beta1ClusterRoleBinding body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceClusterRoleBinding2WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionClusterRole2WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionClusterRole2WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRoleList>> ListClusterRole2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListClusterRole2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRole>> CreateClusterRole2WithHttpMessagesAsync(global::k8s.Models.V1beta1ClusterRole body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateClusterRole2WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteClusterRole2WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteClusterRole2WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRole>> ReadClusterRole2WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadClusterRole2WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ClusterRole>> PatchClusterRole2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchClusterRole2WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup11WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup11WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources23WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources23WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Eventsv1EventList>> ListEventForAllNamespaces1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListEventForAllNamespaces1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedEvent1WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedEvent1WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Eventsv1EventList>> ListNamespacedEvent1WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedEvent1WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Eventsv1Event>> CreateNamespacedEvent1WithHttpMessagesAsync(global::k8s.Models.Eventsv1Event body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedEvent1WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedEvent1WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedEvent1WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Eventsv1Event>> ReadNamespacedEvent1WithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedEvent1WithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Eventsv1Event>> PatchNamespacedEvent1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedEvent1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Eventsv1Event>> ReplaceNamespacedEvent1WithHttpMessagesAsync(global::k8s.Models.Eventsv1Event body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedEvent1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources24WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources24WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1EventList>> ListEventForAllNamespaces2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListEventForAllNamespaces2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedEvent2WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedEvent2WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1EventList>> ListNamespacedEvent2WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedEvent2WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Event>> CreateNamespacedEvent2WithHttpMessagesAsync(global::k8s.Models.V1beta1Event body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedEvent2WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedEvent2WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedEvent2WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Event>> ReadNamespacedEvent2WithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedEvent2WithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Event>> PatchNamespacedEvent2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedEvent2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Event>> ReplaceNamespacedEvent2WithHttpMessagesAsync(global::k8s.Models.V1beta1Event body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedEvent2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup12WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup12WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources25WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources25WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Extensionsv1beta1IngressList>> ListIngressForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListIngressForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedIngressWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedIngressWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Extensionsv1beta1IngressList>> ListNamespacedIngressWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedIngressWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Extensionsv1beta1Ingress>> CreateNamespacedIngressWithHttpMessagesAsync(global::k8s.Models.Extensionsv1beta1Ingress body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedIngressWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedIngressWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedIngressWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Extensionsv1beta1Ingress>> ReadNamespacedIngressWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedIngressWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Extensionsv1beta1Ingress>> PatchNamespacedIngressWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedIngressWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Extensionsv1beta1Ingress>> ReplaceNamespacedIngressWithHttpMessagesAsync(global::k8s.Models.Extensionsv1beta1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedIngressWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Extensionsv1beta1Ingress>> ReadNamespacedIngressStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedIngressStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Extensionsv1beta1Ingress>> PatchNamespacedIngressStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedIngressStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Extensionsv1beta1Ingress>> ReplaceNamespacedIngressStatusWithHttpMessagesAsync(global::k8s.Models.Extensionsv1beta1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedIngressStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup13WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup13WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources26WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources26WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionFlowSchemaWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionFlowSchemaWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1FlowSchemaList>> ListFlowSchemaWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListFlowSchemaWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1FlowSchema>> CreateFlowSchemaWithHttpMessagesAsync(global::k8s.Models.V1alpha1FlowSchema body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateFlowSchemaWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteFlowSchemaWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteFlowSchemaWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1FlowSchema>> ReadFlowSchemaWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadFlowSchemaWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1FlowSchema>> PatchFlowSchemaWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchFlowSchemaWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1FlowSchema>> ReplaceFlowSchemaWithHttpMessagesAsync(global::k8s.Models.V1alpha1FlowSchema body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceFlowSchemaWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1FlowSchema>> ReadFlowSchemaStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadFlowSchemaStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1FlowSchema>> PatchFlowSchemaStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchFlowSchemaStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1FlowSchema>> ReplaceFlowSchemaStatusWithHttpMessagesAsync(global::k8s.Models.V1alpha1FlowSchema body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceFlowSchemaStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionPriorityLevelConfigurationWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionPriorityLevelConfigurationWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityLevelConfigurationList>> ListPriorityLevelConfigurationWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPriorityLevelConfigurationWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityLevelConfiguration>> CreatePriorityLevelConfigurationWithHttpMessagesAsync(global::k8s.Models.V1alpha1PriorityLevelConfiguration body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreatePriorityLevelConfigurationWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeletePriorityLevelConfigurationWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeletePriorityLevelConfigurationWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityLevelConfiguration>> ReadPriorityLevelConfigurationWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPriorityLevelConfigurationWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityLevelConfiguration>> PatchPriorityLevelConfigurationWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPriorityLevelConfigurationWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityLevelConfiguration>> ReplacePriorityLevelConfigurationWithHttpMessagesAsync(global::k8s.Models.V1alpha1PriorityLevelConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePriorityLevelConfigurationWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityLevelConfiguration>> ReadPriorityLevelConfigurationStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPriorityLevelConfigurationStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityLevelConfiguration>> PatchPriorityLevelConfigurationStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPriorityLevelConfigurationStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1PriorityLevelConfiguration>> ReplacePriorityLevelConfigurationStatusWithHttpMessagesAsync(global::k8s.Models.V1alpha1PriorityLevelConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePriorityLevelConfigurationStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources27WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources27WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionFlowSchema1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionFlowSchema1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1FlowSchemaList>> ListFlowSchema1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListFlowSchema1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1FlowSchema>> CreateFlowSchema1WithHttpMessagesAsync(global::k8s.Models.V1beta1FlowSchema body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateFlowSchema1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteFlowSchema1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteFlowSchema1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1FlowSchema>> ReadFlowSchema1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadFlowSchema1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1FlowSchema>> PatchFlowSchema1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchFlowSchema1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1FlowSchema>> ReplaceFlowSchema1WithHttpMessagesAsync(global::k8s.Models.V1beta1FlowSchema body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceFlowSchema1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1FlowSchema>> ReadFlowSchemaStatus1WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadFlowSchemaStatus1WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1FlowSchema>> PatchFlowSchemaStatus1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchFlowSchemaStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1FlowSchema>> ReplaceFlowSchemaStatus1WithHttpMessagesAsync(global::k8s.Models.V1beta1FlowSchema body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceFlowSchemaStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionPriorityLevelConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionPriorityLevelConfiguration1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityLevelConfigurationList>> ListPriorityLevelConfiguration1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPriorityLevelConfiguration1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityLevelConfiguration>> CreatePriorityLevelConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1beta1PriorityLevelConfiguration body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreatePriorityLevelConfiguration1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeletePriorityLevelConfiguration1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeletePriorityLevelConfiguration1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityLevelConfiguration>> ReadPriorityLevelConfiguration1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPriorityLevelConfiguration1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityLevelConfiguration>> PatchPriorityLevelConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPriorityLevelConfiguration1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityLevelConfiguration>> ReplacePriorityLevelConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1beta1PriorityLevelConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePriorityLevelConfiguration1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityLevelConfiguration>> ReadPriorityLevelConfigurationStatus1WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPriorityLevelConfigurationStatus1WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityLevelConfiguration>> PatchPriorityLevelConfigurationStatus1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPriorityLevelConfigurationStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1PriorityLevelConfiguration>> ReplacePriorityLevelConfigurationStatus1WithHttpMessagesAsync(global::k8s.Models.V1beta1PriorityLevelConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePriorityLevelConfigurationStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup14WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup14WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources28WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources28WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionStorageVersionWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionStorageVersionWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1StorageVersionList>> ListStorageVersionWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListStorageVersionWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1StorageVersion>> CreateStorageVersionWithHttpMessagesAsync(global::k8s.Models.V1alpha1StorageVersion body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateStorageVersionWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteStorageVersionWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteStorageVersionWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1StorageVersion>> ReadStorageVersionWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadStorageVersionWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1StorageVersion>> PatchStorageVersionWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchStorageVersionWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1StorageVersion>> ReplaceStorageVersionWithHttpMessagesAsync(global::k8s.Models.V1alpha1StorageVersion body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceStorageVersionWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1StorageVersion>> ReadStorageVersionStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadStorageVersionStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1StorageVersion>> PatchStorageVersionStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchStorageVersionStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1alpha1StorageVersion>> ReplaceStorageVersionStatusWithHttpMessagesAsync(global::k8s.Models.V1alpha1StorageVersion body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceStorageVersionStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup15WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup15WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources29WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources29WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionIngressClassWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionIngressClassWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1IngressClassList>> ListIngressClassWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListIngressClassWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1IngressClass>> CreateIngressClassWithHttpMessagesAsync(global::k8s.Models.V1IngressClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateIngressClassWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteIngressClassWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteIngressClassWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1IngressClass>> ReadIngressClassWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadIngressClassWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1IngressClass>> PatchIngressClassWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchIngressClassWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1IngressClass>> ReplaceIngressClassWithHttpMessagesAsync(global::k8s.Models.V1IngressClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceIngressClassWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1IngressList>> ListIngressForAllNamespaces1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListIngressForAllNamespaces1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedIngress1WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedIngress1WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1IngressList>> ListNamespacedIngress1WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedIngress1WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Ingress>> CreateNamespacedIngress1WithHttpMessagesAsync(global::k8s.Models.V1Ingress body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedIngress1WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedIngress1WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedIngress1WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Ingress>> ReadNamespacedIngress1WithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedIngress1WithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Ingress>> PatchNamespacedIngress1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedIngress1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Ingress>> ReplaceNamespacedIngress1WithHttpMessagesAsync(global::k8s.Models.V1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedIngress1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Ingress>> ReadNamespacedIngressStatus1WithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedIngressStatus1WithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Ingress>> PatchNamespacedIngressStatus1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedIngressStatus1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Ingress>> ReplaceNamespacedIngressStatus1WithHttpMessagesAsync(global::k8s.Models.V1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedIngressStatus1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedNetworkPolicyWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedNetworkPolicyWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1NetworkPolicyList>> ListNamespacedNetworkPolicyWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedNetworkPolicyWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1NetworkPolicy>> CreateNamespacedNetworkPolicyWithHttpMessagesAsync(global::k8s.Models.V1NetworkPolicy body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedNetworkPolicyWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedNetworkPolicyWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedNetworkPolicyWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1NetworkPolicy>> ReadNamespacedNetworkPolicyWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedNetworkPolicyWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1NetworkPolicy>> PatchNamespacedNetworkPolicyWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedNetworkPolicyWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1NetworkPolicy>> ReplaceNamespacedNetworkPolicyWithHttpMessagesAsync(global::k8s.Models.V1NetworkPolicy body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedNetworkPolicyWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1NetworkPolicyList>> ListNetworkPolicyForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNetworkPolicyForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources30WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources30WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionIngressClass1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionIngressClass1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1IngressClassList>> ListIngressClass1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListIngressClass1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1IngressClass>> CreateIngressClass1WithHttpMessagesAsync(global::k8s.Models.V1beta1IngressClass body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateIngressClass1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteIngressClass1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteIngressClass1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1IngressClass>> ReadIngressClass1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadIngressClass1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1IngressClass>> PatchIngressClass1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchIngressClass1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1IngressClass>> ReplaceIngressClass1WithHttpMessagesAsync(global::k8s.Models.V1beta1IngressClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceIngressClass1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Networkingv1beta1IngressList>> ListIngressForAllNamespaces2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListIngressForAllNamespaces2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedIngress2WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedIngress2WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Networkingv1beta1IngressList>> ListNamespacedIngress2WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedIngress2WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Networkingv1beta1Ingress>> CreateNamespacedIngress2WithHttpMessagesAsync(global::k8s.Models.Networkingv1beta1Ingress body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedIngress2WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedIngress2WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedIngress2WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1HorizontalPodAutoscalerList>> ListNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1HorizontalPodAutoscaler>> CreateNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(global::k8s.Models.V1HorizontalPodAutoscaler body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1HorizontalPodAutoscaler>> ReadNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1HorizontalPodAutoscaler>> PatchNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1HorizontalPodAutoscaler>> ReplaceNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(global::k8s.Models.V1HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1HorizontalPodAutoscaler>> ReadNamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1HorizontalPodAutoscaler>> PatchNamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1HorizontalPodAutoscaler>> ReplaceNamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(global::k8s.Models.V1HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedHorizontalPodAutoscalerStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources13WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources13WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta1HorizontalPodAutoscalerList>> ListHorizontalPodAutoscalerForAllNamespaces1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListHorizontalPodAutoscalerForAllNamespaces1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta1HorizontalPodAutoscalerList>> ListNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta1HorizontalPodAutoscaler>> CreateNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(global::k8s.Models.V2beta1HorizontalPodAutoscaler body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta1HorizontalPodAutoscaler>> ReadNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta1HorizontalPodAutoscaler>> PatchNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta1HorizontalPodAutoscaler>> ReplaceNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(global::k8s.Models.V2beta1HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedHorizontalPodAutoscaler1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta1HorizontalPodAutoscaler>> ReadNamespacedHorizontalPodAutoscalerStatus1WithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedHorizontalPodAutoscalerStatus1WithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta1HorizontalPodAutoscaler>> PatchNamespacedHorizontalPodAutoscalerStatus1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedHorizontalPodAutoscalerStatus1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta1HorizontalPodAutoscaler>> ReplaceNamespacedHorizontalPodAutoscalerStatus1WithHttpMessagesAsync(global::k8s.Models.V2beta1HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedHorizontalPodAutoscalerStatus1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources14WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources14WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta2HorizontalPodAutoscalerList>> ListHorizontalPodAutoscalerForAllNamespaces2WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListHorizontalPodAutoscalerForAllNamespaces2WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta2HorizontalPodAutoscalerList>> ListNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta2HorizontalPodAutoscaler>> CreateNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(global::k8s.Models.V2beta2HorizontalPodAutoscaler body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta2HorizontalPodAutoscaler>> ReadNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta2HorizontalPodAutoscaler>> PatchNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta2HorizontalPodAutoscaler>> ReplaceNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(global::k8s.Models.V2beta2HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedHorizontalPodAutoscaler2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta2HorizontalPodAutoscaler>> ReadNamespacedHorizontalPodAutoscalerStatus2WithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedHorizontalPodAutoscalerStatus2WithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta2HorizontalPodAutoscaler>> PatchNamespacedHorizontalPodAutoscalerStatus2WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedHorizontalPodAutoscalerStatus2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2beta2HorizontalPodAutoscaler>> ReplaceNamespacedHorizontalPodAutoscalerStatus2WithHttpMessagesAsync(global::k8s.Models.V2beta2HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedHorizontalPodAutoscalerStatus2WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup7WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup7WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources15WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources15WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1JobList>> ListJobForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListJobForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedJobWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedJobWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1JobList>> ListNamespacedJobWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedJobWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Job>> CreateNamespacedJobWithHttpMessagesAsync(global::k8s.Models.V1Job body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedJobWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedJobWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedJobWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Job>> ReadNamespacedJobWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedJobWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Job>> PatchNamespacedJobWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedJobWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Job>> ReplaceNamespacedJobWithHttpMessagesAsync(global::k8s.Models.V1Job body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedJobWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Job>> ReadNamespacedJobStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedJobStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Job>> PatchNamespacedJobStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Job>> ReplaceNamespacedJobStatusWithHttpMessagesAsync(global::k8s.Models.V1Job body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources16WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources16WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CronJobList>> ListCronJobForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCronJobForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedCronJobWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedCronJobWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CronJobList>> ListNamespacedCronJobWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedCronJobWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CronJob>> CreateNamespacedCronJobWithHttpMessagesAsync(global::k8s.Models.V1beta1CronJob body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedCronJobWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedCronJobWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedCronJobWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CronJob>> ReadNamespacedCronJobWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedCronJobWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CronJob>> PatchNamespacedCronJobWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedCronJobWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CronJob>> ReplaceNamespacedCronJobWithHttpMessagesAsync(global::k8s.Models.V1beta1CronJob body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedCronJobWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CronJob>> ReadNamespacedCronJobStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedCronJobStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CronJob>> PatchNamespacedCronJobStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedCronJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CronJob>> ReplaceNamespacedCronJobStatusWithHttpMessagesAsync(global::k8s.Models.V1beta1CronJob body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedCronJobStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources17WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources17WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2alpha1CronJobList>> ListCronJobForAllNamespaces1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCronJobForAllNamespaces1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedCronJob1WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedCronJob1WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2alpha1CronJobList>> ListNamespacedCronJob1WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedCronJob1WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2alpha1CronJob>> CreateNamespacedCronJob1WithHttpMessagesAsync(global::k8s.Models.V2alpha1CronJob body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedCronJob1WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedCronJob1WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedCronJob1WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2alpha1CronJob>> ReadNamespacedCronJob1WithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedCronJob1WithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2alpha1CronJob>> PatchNamespacedCronJob1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedCronJob1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2alpha1CronJob>> ReplaceNamespacedCronJob1WithHttpMessagesAsync(global::k8s.Models.V2alpha1CronJob body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedCronJob1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2alpha1CronJob>> ReadNamespacedCronJobStatus1WithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedCronJobStatus1WithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2alpha1CronJob>> PatchNamespacedCronJobStatus1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedCronJobStatus1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V2alpha1CronJob>> ReplaceNamespacedCronJobStatus1WithHttpMessagesAsync(global::k8s.Models.V2alpha1CronJob body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedCronJobStatus1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup8WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup8WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources18WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources18WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionCertificateSigningRequestWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionCertificateSigningRequestWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequestList>> ListCertificateSigningRequestWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCertificateSigningRequestWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> CreateCertificateSigningRequestWithHttpMessagesAsync(global::k8s.Models.V1CertificateSigningRequest body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateCertificateSigningRequestWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCertificateSigningRequestWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCertificateSigningRequestWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> ReadCertificateSigningRequestWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCertificateSigningRequestWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> PatchCertificateSigningRequestWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCertificateSigningRequestWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> ReplaceCertificateSigningRequestWithHttpMessagesAsync(global::k8s.Models.V1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCertificateSigningRequestWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> ReadCertificateSigningRequestApprovalWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCertificateSigningRequestApprovalWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> PatchCertificateSigningRequestApprovalWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCertificateSigningRequestApprovalWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> ReplaceCertificateSigningRequestApprovalWithHttpMessagesAsync(global::k8s.Models.V1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCertificateSigningRequestApprovalWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> ReadCertificateSigningRequestStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCertificateSigningRequestStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> PatchCertificateSigningRequestStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCertificateSigningRequestStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CertificateSigningRequest>> ReplaceCertificateSigningRequestStatusWithHttpMessagesAsync(global::k8s.Models.V1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCertificateSigningRequestStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources19WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources19WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionCertificateSigningRequest1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionCertificateSigningRequest1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequestList>> ListCertificateSigningRequest1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCertificateSigningRequest1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> CreateCertificateSigningRequest1WithHttpMessagesAsync(global::k8s.Models.V1beta1CertificateSigningRequest body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateCertificateSigningRequest1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCertificateSigningRequest1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCertificateSigningRequest1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> ReadCertificateSigningRequest1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCertificateSigningRequest1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> PatchCertificateSigningRequest1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCertificateSigningRequest1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> ReplaceCertificateSigningRequest1WithHttpMessagesAsync(global::k8s.Models.V1beta1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCertificateSigningRequest1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> ReadCertificateSigningRequestApproval1WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCertificateSigningRequestApproval1WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> PatchCertificateSigningRequestApproval1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCertificateSigningRequestApproval1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> ReplaceCertificateSigningRequestApproval1WithHttpMessagesAsync(global::k8s.Models.V1beta1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCertificateSigningRequestApproval1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> ReadCertificateSigningRequestStatus1WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCertificateSigningRequestStatus1WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> PatchCertificateSigningRequestStatus1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCertificateSigningRequestStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CertificateSigningRequest>> ReplaceCertificateSigningRequestStatus1WithHttpMessagesAsync(global::k8s.Models.V1beta1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCertificateSigningRequestStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup9WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup9WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources20WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources20WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1LeaseList>> ListLeaseForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListLeaseForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedLeaseWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedLeaseWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1LeaseList>> ListNamespacedLeaseWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedLeaseWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Lease>> CreateNamespacedLeaseWithHttpMessagesAsync(global::k8s.Models.V1Lease body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedLeaseWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedLeaseWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedLeaseWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Lease>> ReadNamespacedLeaseWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedLeaseWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Lease>> PatchNamespacedLeaseWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedLeaseWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Lease>> ReplaceNamespacedLeaseWithHttpMessagesAsync(global::k8s.Models.V1Lease body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedLeaseWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources21WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources21WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1LeaseList>> ListLeaseForAllNamespaces1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListLeaseForAllNamespaces1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedLease1WithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedLease1WithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1LeaseList>> ListNamespacedLease1WithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedLease1WithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Lease>> CreateNamespacedLease1WithHttpMessagesAsync(global::k8s.Models.V1beta1Lease body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedLease1WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedLease1WithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedLease1WithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Lease>> ReadNamespacedLease1WithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedLease1WithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Lease>> PatchNamespacedLease1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedLease1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Lease>> ReplaceNamespacedLease1WithHttpMessagesAsync(global::k8s.Models.V1beta1Lease body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedLease1WithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup10WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup10WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources22WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources22WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1EndpointSliceList>> ListEndpointSliceForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListEndpointSliceForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedEndpointSliceWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedEndpointSliceWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1EndpointSliceList>> ListNamespacedEndpointSliceWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedEndpointSliceWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1EndpointSlice>> CreateNamespacedEndpointSliceWithHttpMessagesAsync(global::k8s.Models.V1beta1EndpointSlice body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedEndpointSliceWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedEndpointSliceWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedEndpointSliceWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1EndpointSlice>> ReadNamespacedEndpointSliceWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedEndpointSliceWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1EndpointSlice>> PatchNamespacedEndpointSliceWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedEndpointSliceWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1EndpointSlice>> ReplaceNamespacedEndpointSliceWithHttpMessagesAsync(global::k8s.Models.V1beta1EndpointSlice body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedEndpointSliceWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources3WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources3WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionCustomResourceDefinitionWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionCustomResourceDefinitionWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CustomResourceDefinitionList>> ListCustomResourceDefinitionWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCustomResourceDefinitionWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CustomResourceDefinition>> CreateCustomResourceDefinitionWithHttpMessagesAsync(global::k8s.Models.V1CustomResourceDefinition body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateCustomResourceDefinitionWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCustomResourceDefinitionWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCustomResourceDefinitionWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CustomResourceDefinition>> ReadCustomResourceDefinitionWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCustomResourceDefinitionWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CustomResourceDefinition>> PatchCustomResourceDefinitionWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCustomResourceDefinitionWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CustomResourceDefinition>> ReplaceCustomResourceDefinitionWithHttpMessagesAsync(global::k8s.Models.V1CustomResourceDefinition body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCustomResourceDefinitionWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CustomResourceDefinition>> ReadCustomResourceDefinitionStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCustomResourceDefinitionStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CustomResourceDefinition>> PatchCustomResourceDefinitionStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCustomResourceDefinitionStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1CustomResourceDefinition>> ReplaceCustomResourceDefinitionStatusWithHttpMessagesAsync(global::k8s.Models.V1CustomResourceDefinition body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCustomResourceDefinitionStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources4WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources4WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionCustomResourceDefinition1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionCustomResourceDefinition1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CustomResourceDefinitionList>> ListCustomResourceDefinition1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCustomResourceDefinition1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CustomResourceDefinition>> CreateCustomResourceDefinition1WithHttpMessagesAsync(global::k8s.Models.V1beta1CustomResourceDefinition body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateCustomResourceDefinition1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCustomResourceDefinition1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCustomResourceDefinition1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CustomResourceDefinition>> ReadCustomResourceDefinition1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCustomResourceDefinition1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CustomResourceDefinition>> PatchCustomResourceDefinition1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCustomResourceDefinition1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CustomResourceDefinition>> ReplaceCustomResourceDefinition1WithHttpMessagesAsync(global::k8s.Models.V1beta1CustomResourceDefinition body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCustomResourceDefinition1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CustomResourceDefinition>> ReadCustomResourceDefinitionStatus1WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCustomResourceDefinitionStatus1WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CustomResourceDefinition>> PatchCustomResourceDefinitionStatus1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCustomResourceDefinitionStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1CustomResourceDefinition>> ReplaceCustomResourceDefinitionStatus1WithHttpMessagesAsync(global::k8s.Models.V1beta1CustomResourceDefinition body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCustomResourceDefinitionStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup2WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup2WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources5WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources5WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionAPIServiceWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionAPIServiceWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIServiceList>> ListAPIServiceWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListAPIServiceWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIService>> CreateAPIServiceWithHttpMessagesAsync(global::k8s.Models.V1APIService body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateAPIServiceWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteAPIServiceWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteAPIServiceWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIService>> ReadAPIServiceWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadAPIServiceWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIService>> PatchAPIServiceWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchAPIServiceWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIService>> ReplaceAPIServiceWithHttpMessagesAsync(global::k8s.Models.V1APIService body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceAPIServiceWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIService>> ReadAPIServiceStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadAPIServiceStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIService>> PatchAPIServiceStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchAPIServiceStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIService>> ReplaceAPIServiceStatusWithHttpMessagesAsync(global::k8s.Models.V1APIService body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceAPIServiceStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources6WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources6WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionAPIService1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionAPIService1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1APIServiceList>> ListAPIService1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListAPIService1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1APIService>> CreateAPIService1WithHttpMessagesAsync(global::k8s.Models.V1beta1APIService body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateAPIService1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteAPIService1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteAPIService1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1APIService>> ReadAPIService1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadAPIService1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1APIService>> PatchAPIService1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchAPIService1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1APIService>> ReplaceAPIService1WithHttpMessagesAsync(global::k8s.Models.V1beta1APIService body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceAPIService1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1APIService>> ReadAPIServiceStatus1WithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadAPIServiceStatus1WithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1APIService>> PatchAPIServiceStatus1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchAPIServiceStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1APIService>> ReplaceAPIServiceStatus1WithHttpMessagesAsync(global::k8s.Models.V1beta1APIService body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceAPIServiceStatus1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup3WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup3WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources7WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources7WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ControllerRevisionList>> ListControllerRevisionForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListControllerRevisionForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DaemonSetList>> ListDaemonSetForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListDaemonSetForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DeploymentList>> ListDeploymentForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListDeploymentForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedControllerRevisionWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedControllerRevisionWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ControllerRevisionList>> ListNamespacedControllerRevisionWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedControllerRevisionWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ControllerRevision>> CreateNamespacedControllerRevisionWithHttpMessagesAsync(global::k8s.Models.V1ControllerRevision body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedControllerRevisionWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedControllerRevisionWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedControllerRevisionWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ControllerRevision>> ReadNamespacedControllerRevisionWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedControllerRevisionWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ControllerRevision>> PatchNamespacedControllerRevisionWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedControllerRevisionWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ControllerRevision>> ReplaceNamespacedControllerRevisionWithHttpMessagesAsync(global::k8s.Models.V1ControllerRevision body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedControllerRevisionWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedDaemonSetWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedDaemonSetWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DaemonSetList>> ListNamespacedDaemonSetWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedDaemonSetWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DaemonSet>> CreateNamespacedDaemonSetWithHttpMessagesAsync(global::k8s.Models.V1DaemonSet body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedDaemonSetWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedDaemonSetWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedDaemonSetWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DaemonSet>> ReadNamespacedDaemonSetWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedDaemonSetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DaemonSet>> PatchNamespacedDaemonSetWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedDaemonSetWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DaemonSet>> ReplaceNamespacedDaemonSetWithHttpMessagesAsync(global::k8s.Models.V1DaemonSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedDaemonSetWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DaemonSet>> ReadNamespacedDaemonSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedDaemonSetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DaemonSet>> PatchNamespacedDaemonSetStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedDaemonSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DaemonSet>> ReplaceNamespacedDaemonSetStatusWithHttpMessagesAsync(global::k8s.Models.V1DaemonSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedDaemonSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedDeploymentWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1DeploymentList>> ListNamespacedDeploymentWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedDeploymentWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Deployment>> CreateNamespacedDeploymentWithHttpMessagesAsync(global::k8s.Models.V1Deployment body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedDeploymentWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedDeploymentWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Deployment>> ReadNamespacedDeploymentWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedDeploymentWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Deployment>> PatchNamespacedDeploymentWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Deployment>> ReplaceNamespacedDeploymentWithHttpMessagesAsync(global::k8s.Models.V1Deployment body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedDeploymentWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> ReadNamespacedDeploymentScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedDeploymentScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> PatchNamespacedDeploymentScaleWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedDeploymentScaleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> ReplaceNamespacedDeploymentScaleWithHttpMessagesAsync(global::k8s.Models.V1Scale body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedDeploymentScaleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Deployment>> ReadNamespacedDeploymentStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedDeploymentStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Deployment>> PatchNamespacedDeploymentStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedDeploymentStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Deployment>> ReplaceNamespacedDeploymentStatusWithHttpMessagesAsync(global::k8s.Models.V1Deployment body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedDeploymentStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedReplicaSetWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedReplicaSetWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicaSetList>> ListNamespacedReplicaSetWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedReplicaSetWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicaSet>> CreateNamespacedReplicaSetWithHttpMessagesAsync(global::k8s.Models.V1ReplicaSet body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedReplicaSetWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedReplicaSetWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedReplicaSetWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicaSet>> ReadNamespacedReplicaSetWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedReplicaSetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicaSet>> PatchNamespacedReplicaSetWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedReplicaSetWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicaSet>> ReplaceNamespacedReplicaSetWithHttpMessagesAsync(global::k8s.Models.V1ReplicaSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedReplicaSetWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> ReadNamespacedReplicaSetScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedReplicaSetScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> PatchNamespacedReplicaSetScaleWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedReplicaSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> ReplaceNamespacedReplicaSetScaleWithHttpMessagesAsync(global::k8s.Models.V1Scale body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedReplicaSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicaSet>> ReadNamespacedReplicaSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedReplicaSetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicaSet>> PatchNamespacedReplicaSetStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedReplicaSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicaSet>> ReplaceNamespacedReplicaSetStatusWithHttpMessagesAsync(global::k8s.Models.V1ReplicaSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedReplicaSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedStatefulSetWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedStatefulSetWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StatefulSetList>> ListNamespacedStatefulSetWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedStatefulSetWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StatefulSet>> CreateNamespacedStatefulSetWithHttpMessagesAsync(global::k8s.Models.V1StatefulSet body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedStatefulSetWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedStatefulSetWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedStatefulSetWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StatefulSet>> ReadNamespacedStatefulSetWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedStatefulSetWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StatefulSet>> PatchNamespacedStatefulSetWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedStatefulSetWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StatefulSet>> ReplaceNamespacedStatefulSetWithHttpMessagesAsync(global::k8s.Models.V1StatefulSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedStatefulSetWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> ReadNamespacedStatefulSetScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedStatefulSetScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> PatchNamespacedStatefulSetScaleWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedStatefulSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> ReplaceNamespacedStatefulSetScaleWithHttpMessagesAsync(global::k8s.Models.V1Scale body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedStatefulSetScaleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StatefulSet>> ReadNamespacedStatefulSetStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedStatefulSetStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StatefulSet>> PatchNamespacedStatefulSetStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedStatefulSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StatefulSet>> ReplaceNamespacedStatefulSetStatusWithHttpMessagesAsync(global::k8s.Models.V1StatefulSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedStatefulSetStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicaSetList>> ListReplicaSetForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListReplicaSetForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1StatefulSetList>> ListStatefulSetForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListStatefulSetForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup4WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup4WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources8WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources8WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1TokenReview>> CreateTokenReviewWithHttpMessagesAsync(global::k8s.Models.V1TokenReview body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateTokenReviewWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources9WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources9WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1TokenReview>> CreateTokenReview1WithHttpMessagesAsync(global::k8s.Models.V1beta1TokenReview body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateTokenReview1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup5WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup5WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources10WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources10WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1LocalSubjectAccessReview>> CreateNamespacedLocalSubjectAccessReviewWithHttpMessagesAsync(global::k8s.Models.V1LocalSubjectAccessReview body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedLocalSubjectAccessReviewWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1SelfSubjectAccessReview>> CreateSelfSubjectAccessReviewWithHttpMessagesAsync(global::k8s.Models.V1SelfSubjectAccessReview body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateSelfSubjectAccessReviewWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1SelfSubjectRulesReview>> CreateSelfSubjectRulesReviewWithHttpMessagesAsync(global::k8s.Models.V1SelfSubjectRulesReview body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateSelfSubjectRulesReviewWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1SubjectAccessReview>> CreateSubjectAccessReviewWithHttpMessagesAsync(global::k8s.Models.V1SubjectAccessReview body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateSubjectAccessReviewWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources11WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources11WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1LocalSubjectAccessReview>> CreateNamespacedLocalSubjectAccessReview1WithHttpMessagesAsync(global::k8s.Models.V1beta1LocalSubjectAccessReview body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedLocalSubjectAccessReview1WithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1SelfSubjectAccessReview>> CreateSelfSubjectAccessReview1WithHttpMessagesAsync(global::k8s.Models.V1beta1SelfSubjectAccessReview body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateSelfSubjectAccessReview1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1SelfSubjectRulesReview>> CreateSelfSubjectRulesReview1WithHttpMessagesAsync(global::k8s.Models.V1beta1SelfSubjectRulesReview body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateSelfSubjectRulesReview1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1SubjectAccessReview>> CreateSubjectAccessReview1WithHttpMessagesAsync(global::k8s.Models.V1beta1SubjectAccessReview body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateSubjectAccessReview1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup6WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup6WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources12WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources12WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1HorizontalPodAutoscalerList>> ListHorizontalPodAutoscalerForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListHorizontalPodAutoscalerForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedHorizontalPodAutoscalerWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicationController>> ReplaceNamespacedReplicationControllerStatusWithHttpMessagesAsync(global::k8s.Models.V1ReplicationController body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedReplicationControllerStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedResourceQuotaWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedResourceQuotaWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuotaList>> ListNamespacedResourceQuotaWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedResourceQuotaWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuota>> CreateNamespacedResourceQuotaWithHttpMessagesAsync(global::k8s.Models.V1ResourceQuota body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedResourceQuotaWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuota>> DeleteNamespacedResourceQuotaWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedResourceQuotaWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuota>> ReadNamespacedResourceQuotaWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedResourceQuotaWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuota>> PatchNamespacedResourceQuotaWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedResourceQuotaWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuota>> ReplaceNamespacedResourceQuotaWithHttpMessagesAsync(global::k8s.Models.V1ResourceQuota body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedResourceQuotaWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuota>> ReadNamespacedResourceQuotaStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedResourceQuotaStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuota>> PatchNamespacedResourceQuotaStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedResourceQuotaStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuota>> ReplaceNamespacedResourceQuotaStatusWithHttpMessagesAsync(global::k8s.Models.V1ResourceQuota body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedResourceQuotaStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedSecretWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedSecretWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1SecretList>> ListNamespacedSecretWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedSecretWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Secret>> CreateNamespacedSecretWithHttpMessagesAsync(global::k8s.Models.V1Secret body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedSecretWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedSecretWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedSecretWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Secret>> ReadNamespacedSecretWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedSecretWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Secret>> PatchNamespacedSecretWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedSecretWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Secret>> ReplaceNamespacedSecretWithHttpMessagesAsync(global::k8s.Models.V1Secret body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedSecretWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedServiceAccountWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedServiceAccountWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ServiceAccountList>> ListNamespacedServiceAccountWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedServiceAccountWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ServiceAccount>> CreateNamespacedServiceAccountWithHttpMessagesAsync(global::k8s.Models.V1ServiceAccount body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedServiceAccountWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ServiceAccount>> DeleteNamespacedServiceAccountWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedServiceAccountWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ServiceAccount>> ReadNamespacedServiceAccountWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedServiceAccountWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ServiceAccount>> PatchNamespacedServiceAccountWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedServiceAccountWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ServiceAccount>> ReplaceNamespacedServiceAccountWithHttpMessagesAsync(global::k8s.Models.V1ServiceAccount body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedServiceAccountWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Authenticationv1TokenRequest>> CreateNamespacedServiceAccountTokenWithHttpMessagesAsync(global::k8s.Models.Authenticationv1TokenRequest body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedServiceAccountTokenWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ServiceList>> ListNamespacedServiceWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedServiceWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Service>> CreateNamespacedServiceWithHttpMessagesAsync(global::k8s.Models.V1Service body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedServiceWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedServiceWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedServiceWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Service>> ReadNamespacedServiceWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedServiceWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Service>> PatchNamespacedServiceWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedServiceWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Service>> ReplaceNamespacedServiceWithHttpMessagesAsync(global::k8s.Models.V1Service body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedServiceWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectDeleteNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectDeleteNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectGetNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectGetNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectHeadNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectHeadNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPatchNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPatchNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPostNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPostNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPutNamespacedServiceProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPutNamespacedServiceProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectDeleteNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectDeleteNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectGetNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectGetNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectHeadNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectHeadNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPatchNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPatchNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPostNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPostNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPutNamespacedServiceProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPutNamespacedServiceProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Service>> ReadNamespacedServiceStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedServiceStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Service>> PatchNamespacedServiceStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedServiceStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Service>> ReplaceNamespacedServiceStatusWithHttpMessagesAsync(global::k8s.Models.V1Service body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedServiceStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespaceWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespaceWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Namespace>> ReadNamespaceWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespaceWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Namespace>> PatchNamespaceWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespaceWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Namespace>> ReplaceNamespaceWithHttpMessagesAsync(global::k8s.Models.V1Namespace body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespaceWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Namespace>> ReplaceNamespaceFinalizeWithHttpMessagesAsync(global::k8s.Models.V1Namespace body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespaceFinalizeWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Namespace>> ReadNamespaceStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespaceStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Namespace>> PatchNamespaceStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespaceStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Namespace>> ReplaceNamespaceStatusWithHttpMessagesAsync(global::k8s.Models.V1Namespace body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespaceStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNodeWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNodeWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1NodeList>> ListNodeWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNodeWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Node>> CreateNodeWithHttpMessagesAsync(global::k8s.Models.V1Node body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNodeWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNodeWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNodeWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Node>> ReadNodeWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNodeWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Node>> PatchNodeWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNodeWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Node>> ReplaceNodeWithHttpMessagesAsync(global::k8s.Models.V1Node body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNodeWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectDeleteNodeProxyWithHttpMessagesAsync(string name, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectDeleteNodeProxyWithHttpMessagesAsync(name, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectGetNodeProxyWithHttpMessagesAsync(string name, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectGetNodeProxyWithHttpMessagesAsync(name, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectHeadNodeProxyWithHttpMessagesAsync(string name, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectHeadNodeProxyWithHttpMessagesAsync(name, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPatchNodeProxyWithHttpMessagesAsync(string name, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPatchNodeProxyWithHttpMessagesAsync(name, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPostNodeProxyWithHttpMessagesAsync(string name, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPostNodeProxyWithHttpMessagesAsync(name, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPutNodeProxyWithHttpMessagesAsync(string name, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPutNodeProxyWithHttpMessagesAsync(name, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectDeleteNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectDeleteNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectGetNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectGetNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectHeadNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectHeadNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPatchNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPatchNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPostNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPostNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPutNodeProxyWithPathWithHttpMessagesAsync(string name, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPutNodeProxyWithPathWithHttpMessagesAsync(name, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Node>> ReadNodeStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNodeStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Node>> PatchNodeStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNodeStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Node>> ReplaceNodeStatusWithHttpMessagesAsync(global::k8s.Models.V1Node body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNodeStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaimList>> ListPersistentVolumeClaimForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPersistentVolumeClaimForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionPersistentVolumeWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionPersistentVolumeWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeList>> ListPersistentVolumeWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPersistentVolumeWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolume>> CreatePersistentVolumeWithHttpMessagesAsync(global::k8s.Models.V1PersistentVolume body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreatePersistentVolumeWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolume>> DeletePersistentVolumeWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeletePersistentVolumeWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolume>> ReadPersistentVolumeWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPersistentVolumeWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolume>> PatchPersistentVolumeWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPersistentVolumeWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolume>> ReplacePersistentVolumeWithHttpMessagesAsync(global::k8s.Models.V1PersistentVolume body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePersistentVolumeWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolume>> ReadPersistentVolumeStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPersistentVolumeStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolume>> PatchPersistentVolumeStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPersistentVolumeStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolume>> ReplacePersistentVolumeStatusWithHttpMessagesAsync(global::k8s.Models.V1PersistentVolume body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePersistentVolumeStatusWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PodList>> ListPodForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPodForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PodTemplateList>> ListPodTemplateForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPodTemplateForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicationControllerList>> ListReplicationControllerForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListReplicationControllerForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ResourceQuotaList>> ListResourceQuotaForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListResourceQuotaForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1SecretList>> ListSecretForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListSecretForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ServiceAccountList>> ListServiceAccountForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListServiceAccountForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ServiceList>> ListServiceForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListServiceForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroupList>> GetAPIVersions1WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIVersions1WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroupWithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroupWithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources1WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources1WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionMutatingWebhookConfigurationWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionMutatingWebhookConfigurationWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1MutatingWebhookConfigurationList>> ListMutatingWebhookConfigurationWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListMutatingWebhookConfigurationWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1MutatingWebhookConfiguration>> CreateMutatingWebhookConfigurationWithHttpMessagesAsync(global::k8s.Models.V1MutatingWebhookConfiguration body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateMutatingWebhookConfigurationWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteMutatingWebhookConfigurationWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteMutatingWebhookConfigurationWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1MutatingWebhookConfiguration>> ReadMutatingWebhookConfigurationWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadMutatingWebhookConfigurationWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1MutatingWebhookConfiguration>> PatchMutatingWebhookConfigurationWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchMutatingWebhookConfigurationWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1MutatingWebhookConfiguration>> ReplaceMutatingWebhookConfigurationWithHttpMessagesAsync(global::k8s.Models.V1MutatingWebhookConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceMutatingWebhookConfigurationWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionValidatingWebhookConfigurationWithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionValidatingWebhookConfigurationWithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ValidatingWebhookConfigurationList>> ListValidatingWebhookConfigurationWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListValidatingWebhookConfigurationWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ValidatingWebhookConfiguration>> CreateValidatingWebhookConfigurationWithHttpMessagesAsync(global::k8s.Models.V1ValidatingWebhookConfiguration body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateValidatingWebhookConfigurationWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteValidatingWebhookConfigurationWithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteValidatingWebhookConfigurationWithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ValidatingWebhookConfiguration>> ReadValidatingWebhookConfigurationWithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadValidatingWebhookConfigurationWithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ValidatingWebhookConfiguration>> PatchValidatingWebhookConfigurationWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchValidatingWebhookConfigurationWithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ValidatingWebhookConfiguration>> ReplaceValidatingWebhookConfigurationWithHttpMessagesAsync(global::k8s.Models.V1ValidatingWebhookConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceValidatingWebhookConfigurationWithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResources2WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources2WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionMutatingWebhookConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionMutatingWebhookConfiguration1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1MutatingWebhookConfigurationList>> ListMutatingWebhookConfiguration1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListMutatingWebhookConfiguration1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1MutatingWebhookConfiguration>> CreateMutatingWebhookConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1beta1MutatingWebhookConfiguration body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateMutatingWebhookConfiguration1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteMutatingWebhookConfiguration1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteMutatingWebhookConfiguration1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1MutatingWebhookConfiguration>> ReadMutatingWebhookConfiguration1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadMutatingWebhookConfiguration1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1MutatingWebhookConfiguration>> PatchMutatingWebhookConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchMutatingWebhookConfiguration1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1MutatingWebhookConfiguration>> ReplaceMutatingWebhookConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1beta1MutatingWebhookConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceMutatingWebhookConfiguration1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionValidatingWebhookConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionValidatingWebhookConfiguration1WithHttpMessagesAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ValidatingWebhookConfigurationList>> ListValidatingWebhookConfiguration1WithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListValidatingWebhookConfiguration1WithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ValidatingWebhookConfiguration>> CreateValidatingWebhookConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1beta1ValidatingWebhookConfiguration body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateValidatingWebhookConfiguration1WithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteValidatingWebhookConfiguration1WithHttpMessagesAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteValidatingWebhookConfiguration1WithHttpMessagesAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ValidatingWebhookConfiguration>> ReadValidatingWebhookConfiguration1WithHttpMessagesAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadValidatingWebhookConfiguration1WithHttpMessagesAsync(name, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ValidatingWebhookConfiguration>> PatchValidatingWebhookConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchValidatingWebhookConfiguration1WithHttpMessagesAsync(body, name, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1ValidatingWebhookConfiguration>> ReplaceValidatingWebhookConfiguration1WithHttpMessagesAsync(global::k8s.Models.V1beta1ValidatingWebhookConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceValidatingWebhookConfiguration1WithHttpMessagesAsync(body, name, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIGroup>> GetAPIGroup1WithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup1WithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<string>> GetServiceAccountIssuerOpenIDConfigurationWithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetServiceAccountIssuerOpenIDConfigurationWithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIVersions>> GetAPIVersionsWithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIVersionsWithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1APIResourceList>> GetAPIResourcesWithHttpMessagesAsync(global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResourcesWithHttpMessagesAsync(customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ComponentStatusList>> ListComponentStatusWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListComponentStatusWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ComponentStatus>> ReadComponentStatusWithHttpMessagesAsync(string name, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadComponentStatusWithHttpMessagesAsync(name, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ConfigMapList>> ListConfigMapForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListConfigMapForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1EndpointsList>> ListEndpointsForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListEndpointsForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Corev1EventList>> ListEventForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListEventForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1LimitRangeList>> ListLimitRangeForAllNamespacesWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListLimitRangeForAllNamespacesWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1NamespaceList>> ListNamespaceWithHttpMessagesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespaceWithHttpMessagesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Namespace>> CreateNamespaceWithHttpMessagesAsync(global::k8s.Models.V1Namespace body, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespaceWithHttpMessagesAsync(body, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Binding>> CreateNamespacedBindingWithHttpMessagesAsync(global::k8s.Models.V1Binding body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedBindingWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedConfigMapWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedConfigMapWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ConfigMapList>> ListNamespacedConfigMapWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedConfigMapWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ConfigMap>> CreateNamespacedConfigMapWithHttpMessagesAsync(global::k8s.Models.V1ConfigMap body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedConfigMapWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedConfigMapWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedConfigMapWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ConfigMap>> ReadNamespacedConfigMapWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedConfigMapWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ConfigMap>> PatchNamespacedConfigMapWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedConfigMapWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ConfigMap>> ReplaceNamespacedConfigMapWithHttpMessagesAsync(global::k8s.Models.V1ConfigMap body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedConfigMapWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedEndpointsWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedEndpointsWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1EndpointsList>> ListNamespacedEndpointsWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedEndpointsWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Endpoints>> CreateNamespacedEndpointsWithHttpMessagesAsync(global::k8s.Models.V1Endpoints body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedEndpointsWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedEndpointsWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedEndpointsWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Endpoints>> ReadNamespacedEndpointsWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedEndpointsWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Endpoints>> PatchNamespacedEndpointsWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedEndpointsWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Endpoints>> ReplaceNamespacedEndpointsWithHttpMessagesAsync(global::k8s.Models.V1Endpoints body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedEndpointsWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedEventWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedEventWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Corev1EventList>> ListNamespacedEventWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedEventWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Corev1Event>> CreateNamespacedEventWithHttpMessagesAsync(global::k8s.Models.Corev1Event body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedEventWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedEventWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedEventWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Corev1Event>> ReadNamespacedEventWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedEventWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Corev1Event>> PatchNamespacedEventWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedEventWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.Corev1Event>> ReplaceNamespacedEventWithHttpMessagesAsync(global::k8s.Models.Corev1Event body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedEventWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedLimitRangeWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedLimitRangeWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1LimitRangeList>> ListNamespacedLimitRangeWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedLimitRangeWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1LimitRange>> CreateNamespacedLimitRangeWithHttpMessagesAsync(global::k8s.Models.V1LimitRange body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedLimitRangeWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedLimitRangeWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedLimitRangeWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1LimitRange>> ReadNamespacedLimitRangeWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedLimitRangeWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1LimitRange>> PatchNamespacedLimitRangeWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedLimitRangeWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1LimitRange>> ReplaceNamespacedLimitRangeWithHttpMessagesAsync(global::k8s.Models.V1LimitRange body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedLimitRangeWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedPersistentVolumeClaimWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedPersistentVolumeClaimWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaimList>> ListNamespacedPersistentVolumeClaimWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedPersistentVolumeClaimWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaim>> CreateNamespacedPersistentVolumeClaimWithHttpMessagesAsync(global::k8s.Models.V1PersistentVolumeClaim body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedPersistentVolumeClaimWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaim>> DeleteNamespacedPersistentVolumeClaimWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedPersistentVolumeClaimWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaim>> ReadNamespacedPersistentVolumeClaimWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedPersistentVolumeClaimWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaim>> PatchNamespacedPersistentVolumeClaimWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedPersistentVolumeClaimWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaim>> ReplaceNamespacedPersistentVolumeClaimWithHttpMessagesAsync(global::k8s.Models.V1PersistentVolumeClaim body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedPersistentVolumeClaimWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaim>> ReadNamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaim>> PatchNamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PersistentVolumeClaim>> ReplaceNamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(global::k8s.Models.V1PersistentVolumeClaim body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedPersistentVolumeClaimStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedPodWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedPodWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PodList>> ListNamespacedPodWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedPodWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Pod>> CreateNamespacedPodWithHttpMessagesAsync(global::k8s.Models.V1Pod body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedPodWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Pod>> DeleteNamespacedPodWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedPodWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Pod>> ReadNamespacedPodWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedPodWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Pod>> PatchNamespacedPodWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedPodWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Pod>> ReplaceNamespacedPodWithHttpMessagesAsync(global::k8s.Models.V1Pod body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedPodWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectGetNamespacedPodAttachWithHttpMessagesAsync(string name, string namespaceParameter, string container, global::System.Nullable<bool> stderr, global::System.Nullable<bool> stdin, global::System.Nullable<bool> stdout, global::System.Nullable<bool> tty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectGetNamespacedPodAttachWithHttpMessagesAsync(name, namespaceParameter, container, stderr, stdin, stdout, tty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPostNamespacedPodAttachWithHttpMessagesAsync(string name, string namespaceParameter, string container, global::System.Nullable<bool> stderr, global::System.Nullable<bool> stdin, global::System.Nullable<bool> stdout, global::System.Nullable<bool> tty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPostNamespacedPodAttachWithHttpMessagesAsync(name, namespaceParameter, container, stderr, stdin, stdout, tty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Binding>> CreateNamespacedPodBindingWithHttpMessagesAsync(global::k8s.Models.V1Binding body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedPodBindingWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1beta1Eviction>> CreateNamespacedPodEvictionWithHttpMessagesAsync(global::k8s.Models.V1beta1Eviction body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedPodEvictionWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectGetNamespacedPodExecWithHttpMessagesAsync(string name, string namespaceParameter, string command, string container, global::System.Nullable<bool> stderr, global::System.Nullable<bool> stdin, global::System.Nullable<bool> stdout, global::System.Nullable<bool> tty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectGetNamespacedPodExecWithHttpMessagesAsync(name, namespaceParameter, command, container, stderr, stdin, stdout, tty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPostNamespacedPodExecWithHttpMessagesAsync(string name, string namespaceParameter, string command, string container, global::System.Nullable<bool> stderr, global::System.Nullable<bool> stdin, global::System.Nullable<bool> stdout, global::System.Nullable<bool> tty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPostNamespacedPodExecWithHttpMessagesAsync(name, namespaceParameter, command, container, stderr, stdin, stdout, tty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ReadNamespacedPodLogWithHttpMessagesAsync(string name, string namespaceParameter, string container, global::System.Nullable<bool> follow, global::System.Nullable<bool> insecureSkipTLSVerifyBackend, global::System.Nullable<int> limitBytes, string pretty, global::System.Nullable<bool> previous, global::System.Nullable<int> sinceSeconds, global::System.Nullable<int> tailLines, global::System.Nullable<bool> timestamps, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedPodLogWithHttpMessagesAsync(name, namespaceParameter, container, follow, insecureSkipTLSVerifyBackend, limitBytes, pretty, previous, sinceSeconds, tailLines, timestamps, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectGetNamespacedPodPortforwardWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<int> ports, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectGetNamespacedPodPortforwardWithHttpMessagesAsync(name, namespaceParameter, ports, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPostNamespacedPodPortforwardWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<int> ports, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPostNamespacedPodPortforwardWithHttpMessagesAsync(name, namespaceParameter, ports, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectDeleteNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectDeleteNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectGetNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectGetNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectHeadNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectHeadNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPatchNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPatchNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPostNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPostNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPutNamespacedPodProxyWithHttpMessagesAsync(string name, string namespaceParameter, string path, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPutNamespacedPodProxyWithHttpMessagesAsync(name, namespaceParameter, path, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectDeleteNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectDeleteNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectGetNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectGetNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectHeadNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectHeadNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPatchNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPatchNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPostNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPostNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::System.IO.Stream>> ConnectPutNamespacedPodProxyWithPathWithHttpMessagesAsync(string name, string namespaceParameter, string path, string path1, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPutNamespacedPodProxyWithPathWithHttpMessagesAsync(name, namespaceParameter, path, path1, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Pod>> ReadNamespacedPodStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedPodStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Pod>> PatchNamespacedPodStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedPodStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Pod>> ReplaceNamespacedPodStatusWithHttpMessagesAsync(global::k8s.Models.V1Pod body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedPodStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedPodTemplateWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedPodTemplateWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PodTemplateList>> ListNamespacedPodTemplateWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedPodTemplateWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PodTemplate>> CreateNamespacedPodTemplateWithHttpMessagesAsync(global::k8s.Models.V1PodTemplate body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedPodTemplateWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PodTemplate>> DeleteNamespacedPodTemplateWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedPodTemplateWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PodTemplate>> ReadNamespacedPodTemplateWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedPodTemplateWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PodTemplate>> PatchNamespacedPodTemplateWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedPodTemplateWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1PodTemplate>> ReplaceNamespacedPodTemplateWithHttpMessagesAsync(global::k8s.Models.V1PodTemplate body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedPodTemplateWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteCollectionNamespacedReplicationControllerWithHttpMessagesAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedReplicationControllerWithHttpMessagesAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicationControllerList>> ListNamespacedReplicationControllerWithHttpMessagesAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedReplicationControllerWithHttpMessagesAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicationController>> CreateNamespacedReplicationControllerWithHttpMessagesAsync(global::k8s.Models.V1ReplicationController body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedReplicationControllerWithHttpMessagesAsync(body, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Status>> DeleteNamespacedReplicationControllerWithHttpMessagesAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedReplicationControllerWithHttpMessagesAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicationController>> ReadNamespacedReplicationControllerWithHttpMessagesAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedReplicationControllerWithHttpMessagesAsync(name, namespaceParameter, exact, export, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicationController>> PatchNamespacedReplicationControllerWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedReplicationControllerWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicationController>> ReplaceNamespacedReplicationControllerWithHttpMessagesAsync(global::k8s.Models.V1ReplicationController body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedReplicationControllerWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> ReadNamespacedReplicationControllerScaleWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedReplicationControllerScaleWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> PatchNamespacedReplicationControllerScaleWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedReplicationControllerScaleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1Scale>> ReplaceNamespacedReplicationControllerScaleWithHttpMessagesAsync(global::k8s.Models.V1Scale body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedReplicationControllerScaleWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicationController>> ReadNamespacedReplicationControllerStatusWithHttpMessagesAsync(string name, string namespaceParameter, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedReplicationControllerStatusWithHttpMessagesAsync(name, namespaceParameter, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Rest.HttpOperationResponse<global::k8s.Models.V1ReplicationController>> PatchNamespacedReplicationControllerStatusWithHttpMessagesAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>> customHeaders, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedReplicationControllerStatusWithHttpMessagesAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, customHeaders, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public void SetRetryPolicy(global::Microsoft.Rest.TransientFaultHandling.RetryPolicy retryPolicy)
        {
            NormalizedRetryPolicy.Invoke(
                () =>
                {
                    k8s.SetRetryPolicy(retryPolicy);
                });
        }

        /// <inheritdoc/>
        public bool SetUserAgent(string productName)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.SetUserAgent(productName);
                });
        }

        /// <inheritdoc/>
        public bool SetUserAgent(string productName, string version)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.SetUserAgent(productName, version);
                });
        }

        /// <inheritdoc/>
        public override string ToString()
        {
            return k8s.ToString();
        }

        /// <inheritdoc/>
        public override bool Equals(global::System.Object obj)
        {
            return k8s.Equals(obj);
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            return k8s.GetHashCode();
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1VolumeAttachment PatchVolumeAttachment2(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchVolumeAttachment2(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1VolumeAttachment> PatchVolumeAttachment2Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchVolumeAttachment2Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1VolumeAttachment ReplaceVolumeAttachment2(global::k8s.Models.V1beta1VolumeAttachment body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceVolumeAttachment2(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1VolumeAttachment> ReplaceVolumeAttachment2Async(global::k8s.Models.V1beta1VolumeAttachment body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceVolumeAttachment2Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public void LogFileListHandler()
        {
            NormalizedRetryPolicy.Invoke(
                () =>
                {
                    k8s.LogFileListHandler();
                });
        }

        /// <inheritdoc/>
        public async void LogFileListHandlerAsync(global::System.Threading.CancellationToken cancellationToken)
        {
            await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    await k8s.LogFileListHandlerAsync(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public void LogFileHandler(string logpath)
        {
            NormalizedRetryPolicy.Invoke(
                () =>
                {
                    k8s.LogFileHandler(logpath);
                });
        }

        /// <inheritdoc/>
        public async void LogFileHandlerAsync(string logpath, global::System.Threading.CancellationToken cancellationToken)
        {
            await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    await k8s.LogFileHandlerAsync(logpath, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public string GetServiceAccountIssuerOpenIDKeyset()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetServiceAccountIssuerOpenIDKeyset();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<string> GetServiceAccountIssuerOpenIDKeysetAsync(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetServiceAccountIssuerOpenIDKeysetAsync(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.VersionInfo GetCode()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetCode();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.VersionInfo> GetCodeAsync(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetCodeAsync(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object CreateNamespacedCustomObject(global::System.Object body, string group, string version, string namespaceParameter, string plural, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedCustomObject(body, group, version, namespaceParameter, plural, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> CreateNamespacedCustomObjectAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedCustomObjectAsync(body, group, version, namespaceParameter, plural, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object DeleteCollectionNamespacedCustomObject(string group, string version, string namespaceParameter, string plural, global::k8s.Models.V1DeleteOptions body, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string dryRun, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedCustomObject(group, version, namespaceParameter, plural, body, gracePeriodSeconds, orphanDependents, propagationPolicy, dryRun, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> DeleteCollectionNamespacedCustomObjectAsync(string group, string version, string namespaceParameter, string plural, global::k8s.Models.V1DeleteOptions body, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string dryRun, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedCustomObjectAsync(group, version, namespaceParameter, plural, body, gracePeriodSeconds, orphanDependents, propagationPolicy, dryRun, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object ListNamespacedCustomObject(string group, string version, string namespaceParameter, string plural, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedCustomObject(group, version, namespaceParameter, plural, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> ListNamespacedCustomObjectAsync(string group, string version, string namespaceParameter, string plural, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedCustomObjectAsync(group, version, namespaceParameter, plural, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object CreateClusterCustomObject(global::System.Object body, string group, string version, string plural, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateClusterCustomObject(body, group, version, plural, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> CreateClusterCustomObjectAsync(global::System.Object body, string group, string version, string plural, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateClusterCustomObjectAsync(body, group, version, plural, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object DeleteCollectionClusterCustomObject(string group, string version, string plural, global::k8s.Models.V1DeleteOptions body, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string dryRun, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionClusterCustomObject(group, version, plural, body, gracePeriodSeconds, orphanDependents, propagationPolicy, dryRun, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> DeleteCollectionClusterCustomObjectAsync(string group, string version, string plural, global::k8s.Models.V1DeleteOptions body, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string dryRun, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionClusterCustomObjectAsync(group, version, plural, body, gracePeriodSeconds, orphanDependents, propagationPolicy, dryRun, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object ListClusterCustomObject(string group, string version, string plural, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListClusterCustomObject(group, version, plural, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> ListClusterCustomObjectAsync(string group, string version, string plural, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListClusterCustomObjectAsync(group, version, plural, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object ReplaceClusterCustomObjectStatus(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceClusterCustomObjectStatus(body, group, version, plural, name, dryRun, fieldManager);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> ReplaceClusterCustomObjectStatusAsync(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceClusterCustomObjectStatusAsync(body, group, version, plural, name, dryRun, fieldManager, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object PatchClusterCustomObjectStatus(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchClusterCustomObjectStatus(body, group, version, plural, name, dryRun, fieldManager, force);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> PatchClusterCustomObjectStatusAsync(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchClusterCustomObjectStatusAsync(body, group, version, plural, name, dryRun, fieldManager, force, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object GetClusterCustomObjectStatus(string group, string version, string plural, string name)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetClusterCustomObjectStatus(group, version, plural, name);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> GetClusterCustomObjectStatusAsync(string group, string version, string plural, string name, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetClusterCustomObjectStatusAsync(group, version, plural, name, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object ReplaceNamespacedCustomObject(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedCustomObject(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> ReplaceNamespacedCustomObjectAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedCustomObjectAsync(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object PatchNamespacedCustomObject(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedCustomObject(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, force);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> PatchNamespacedCustomObjectAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedCustomObjectAsync(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, force, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object DeleteNamespacedCustomObject(string group, string version, string namespaceParameter, string plural, string name, global::k8s.Models.V1DeleteOptions body, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string dryRun)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedCustomObject(group, version, namespaceParameter, plural, name, body, gracePeriodSeconds, orphanDependents, propagationPolicy, dryRun);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> DeleteNamespacedCustomObjectAsync(string group, string version, string namespaceParameter, string plural, string name, global::k8s.Models.V1DeleteOptions body, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string dryRun, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedCustomObjectAsync(group, version, namespaceParameter, plural, name, body, gracePeriodSeconds, orphanDependents, propagationPolicy, dryRun, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object GetNamespacedCustomObject(string group, string version, string namespaceParameter, string plural, string name)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetNamespacedCustomObject(group, version, namespaceParameter, plural, name);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> GetNamespacedCustomObjectAsync(string group, string version, string namespaceParameter, string plural, string name, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetNamespacedCustomObjectAsync(group, version, namespaceParameter, plural, name, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object ReplaceNamespacedCustomObjectScale(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedCustomObjectScale(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> ReplaceNamespacedCustomObjectScaleAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedCustomObjectScaleAsync(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object PatchNamespacedCustomObjectScale(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedCustomObjectScale(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, force);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> PatchNamespacedCustomObjectScaleAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedCustomObjectScaleAsync(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, force, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object GetNamespacedCustomObjectScale(string group, string version, string namespaceParameter, string plural, string name)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetNamespacedCustomObjectScale(group, version, namespaceParameter, plural, name);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> GetNamespacedCustomObjectScaleAsync(string group, string version, string namespaceParameter, string plural, string name, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetNamespacedCustomObjectScaleAsync(group, version, namespaceParameter, plural, name, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object ReplaceClusterCustomObjectScale(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceClusterCustomObjectScale(body, group, version, plural, name, dryRun, fieldManager);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> ReplaceClusterCustomObjectScaleAsync(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceClusterCustomObjectScaleAsync(body, group, version, plural, name, dryRun, fieldManager, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object PatchClusterCustomObjectScale(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchClusterCustomObjectScale(body, group, version, plural, name, dryRun, fieldManager, force);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> PatchClusterCustomObjectScaleAsync(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchClusterCustomObjectScaleAsync(body, group, version, plural, name, dryRun, fieldManager, force, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object GetClusterCustomObjectScale(string group, string version, string plural, string name)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetClusterCustomObjectScale(group, version, plural, name);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> GetClusterCustomObjectScaleAsync(string group, string version, string plural, string name, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetClusterCustomObjectScaleAsync(group, version, plural, name, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object ReplaceClusterCustomObject(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceClusterCustomObject(body, group, version, plural, name, dryRun, fieldManager);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> ReplaceClusterCustomObjectAsync(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceClusterCustomObjectAsync(body, group, version, plural, name, dryRun, fieldManager, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object PatchClusterCustomObject(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchClusterCustomObject(body, group, version, plural, name, dryRun, fieldManager, force);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> PatchClusterCustomObjectAsync(global::System.Object body, string group, string version, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchClusterCustomObjectAsync(body, group, version, plural, name, dryRun, fieldManager, force, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object DeleteClusterCustomObject(string group, string version, string plural, string name, global::k8s.Models.V1DeleteOptions body, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string dryRun)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteClusterCustomObject(group, version, plural, name, body, gracePeriodSeconds, orphanDependents, propagationPolicy, dryRun);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> DeleteClusterCustomObjectAsync(string group, string version, string plural, string name, global::k8s.Models.V1DeleteOptions body, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string dryRun, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteClusterCustomObjectAsync(group, version, plural, name, body, gracePeriodSeconds, orphanDependents, propagationPolicy, dryRun, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object GetClusterCustomObject(string group, string version, string plural, string name)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetClusterCustomObject(group, version, plural, name);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> GetClusterCustomObjectAsync(string group, string version, string plural, string name, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetClusterCustomObjectAsync(group, version, plural, name, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object ReplaceNamespacedCustomObjectStatus(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedCustomObjectStatus(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> ReplaceNamespacedCustomObjectStatusAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedCustomObjectStatusAsync(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object PatchNamespacedCustomObjectStatus(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedCustomObjectStatus(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, force);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> PatchNamespacedCustomObjectStatusAsync(global::System.Object body, string group, string version, string namespaceParameter, string plural, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedCustomObjectStatusAsync(body, group, version, namespaceParameter, plural, name, dryRun, fieldManager, force, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.Object GetNamespacedCustomObjectStatus(string group, string version, string namespaceParameter, string plural, string name)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetNamespacedCustomObjectStatus(group, version, namespaceParameter, plural, name);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.Object> GetNamespacedCustomObjectStatusAsync(string group, string version, string namespaceParameter, string plural, string name, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetNamespacedCustomObjectStatusAsync(group, version, namespaceParameter, plural, name, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1VolumeAttachment> CreateVolumeAttachmentAsync(global::k8s.Models.V1VolumeAttachment body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateVolumeAttachmentAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1VolumeAttachment DeleteVolumeAttachment(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteVolumeAttachment(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1VolumeAttachment> DeleteVolumeAttachmentAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteVolumeAttachmentAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1VolumeAttachment ReadVolumeAttachment(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadVolumeAttachment(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1VolumeAttachment> ReadVolumeAttachmentAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadVolumeAttachmentAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1VolumeAttachment PatchVolumeAttachment(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchVolumeAttachment(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1VolumeAttachment> PatchVolumeAttachmentAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchVolumeAttachmentAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1VolumeAttachment ReplaceVolumeAttachment(global::k8s.Models.V1VolumeAttachment body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceVolumeAttachment(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1VolumeAttachment> ReplaceVolumeAttachmentAsync(global::k8s.Models.V1VolumeAttachment body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceVolumeAttachmentAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1VolumeAttachment ReadVolumeAttachmentStatus(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadVolumeAttachmentStatus(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1VolumeAttachment> ReadVolumeAttachmentStatusAsync(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadVolumeAttachmentStatusAsync(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1VolumeAttachment PatchVolumeAttachmentStatus(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchVolumeAttachmentStatus(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1VolumeAttachment> PatchVolumeAttachmentStatusAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchVolumeAttachmentStatusAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1VolumeAttachment ReplaceVolumeAttachmentStatus(global::k8s.Models.V1VolumeAttachment body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceVolumeAttachmentStatus(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1VolumeAttachment> ReplaceVolumeAttachmentStatusAsync(global::k8s.Models.V1VolumeAttachment body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceVolumeAttachmentStatusAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources42()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources42();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources42Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources42Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionVolumeAttachment1(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionVolumeAttachment1(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionVolumeAttachment1Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionVolumeAttachment1Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1VolumeAttachmentList ListVolumeAttachment1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListVolumeAttachment1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1VolumeAttachmentList> ListVolumeAttachment1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListVolumeAttachment1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1VolumeAttachment CreateVolumeAttachment1(global::k8s.Models.V1alpha1VolumeAttachment body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateVolumeAttachment1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1VolumeAttachment> CreateVolumeAttachment1Async(global::k8s.Models.V1alpha1VolumeAttachment body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateVolumeAttachment1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1VolumeAttachment DeleteVolumeAttachment1(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteVolumeAttachment1(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1VolumeAttachment> DeleteVolumeAttachment1Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteVolumeAttachment1Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1VolumeAttachment ReadVolumeAttachment1(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadVolumeAttachment1(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1VolumeAttachment> ReadVolumeAttachment1Async(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadVolumeAttachment1Async(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1VolumeAttachment PatchVolumeAttachment1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchVolumeAttachment1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1VolumeAttachment> PatchVolumeAttachment1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchVolumeAttachment1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1VolumeAttachment ReplaceVolumeAttachment1(global::k8s.Models.V1alpha1VolumeAttachment body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceVolumeAttachment1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1VolumeAttachment> ReplaceVolumeAttachment1Async(global::k8s.Models.V1alpha1VolumeAttachment body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceVolumeAttachment1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources43()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources43();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources43Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources43Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionCSIDriver1(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionCSIDriver1(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionCSIDriver1Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionCSIDriver1Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CSIDriverList ListCSIDriver1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListCSIDriver1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CSIDriverList> ListCSIDriver1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCSIDriver1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CSIDriver CreateCSIDriver1(global::k8s.Models.V1beta1CSIDriver body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateCSIDriver1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CSIDriver> CreateCSIDriver1Async(global::k8s.Models.V1beta1CSIDriver body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateCSIDriver1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CSIDriver DeleteCSIDriver1(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCSIDriver1(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CSIDriver> DeleteCSIDriver1Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCSIDriver1Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CSIDriver ReadCSIDriver1(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadCSIDriver1(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CSIDriver> ReadCSIDriver1Async(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCSIDriver1Async(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CSIDriver PatchCSIDriver1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchCSIDriver1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CSIDriver> PatchCSIDriver1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCSIDriver1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CSIDriver ReplaceCSIDriver1(global::k8s.Models.V1beta1CSIDriver body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceCSIDriver1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CSIDriver> ReplaceCSIDriver1Async(global::k8s.Models.V1beta1CSIDriver body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCSIDriver1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionCSINode1(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionCSINode1(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionCSINode1Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionCSINode1Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CSINodeList ListCSINode1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListCSINode1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CSINodeList> ListCSINode1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCSINode1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CSINode CreateCSINode1(global::k8s.Models.V1beta1CSINode body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateCSINode1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CSINode> CreateCSINode1Async(global::k8s.Models.V1beta1CSINode body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateCSINode1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CSINode DeleteCSINode1(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCSINode1(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CSINode> DeleteCSINode1Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCSINode1Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CSINode ReadCSINode1(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadCSINode1(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CSINode> ReadCSINode1Async(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCSINode1Async(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CSINode PatchCSINode1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchCSINode1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CSINode> PatchCSINode1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCSINode1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CSINode ReplaceCSINode1(global::k8s.Models.V1beta1CSINode body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceCSINode1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CSINode> ReplaceCSINode1Async(global::k8s.Models.V1beta1CSINode body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCSINode1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionStorageClass1(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionStorageClass1(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionStorageClass1Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionStorageClass1Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1StorageClassList ListStorageClass1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListStorageClass1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1StorageClassList> ListStorageClass1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListStorageClass1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1StorageClass CreateStorageClass1(global::k8s.Models.V1beta1StorageClass body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateStorageClass1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1StorageClass> CreateStorageClass1Async(global::k8s.Models.V1beta1StorageClass body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateStorageClass1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1StorageClass DeleteStorageClass1(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteStorageClass1(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1StorageClass> DeleteStorageClass1Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteStorageClass1Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1StorageClass ReadStorageClass1(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadStorageClass1(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1StorageClass> ReadStorageClass1Async(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadStorageClass1Async(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1StorageClass PatchStorageClass1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchStorageClass1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1StorageClass> PatchStorageClass1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchStorageClass1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1StorageClass ReplaceStorageClass1(global::k8s.Models.V1beta1StorageClass body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceStorageClass1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1StorageClass> ReplaceStorageClass1Async(global::k8s.Models.V1beta1StorageClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceStorageClass1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionVolumeAttachment2(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionVolumeAttachment2(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionVolumeAttachment2Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionVolumeAttachment2Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1VolumeAttachmentList ListVolumeAttachment2(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListVolumeAttachment2(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1VolumeAttachmentList> ListVolumeAttachment2Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListVolumeAttachment2Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1VolumeAttachment CreateVolumeAttachment2(global::k8s.Models.V1beta1VolumeAttachment body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateVolumeAttachment2(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1VolumeAttachment> CreateVolumeAttachment2Async(global::k8s.Models.V1beta1VolumeAttachment body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateVolumeAttachment2Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1VolumeAttachment DeleteVolumeAttachment2(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteVolumeAttachment2(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1VolumeAttachment> DeleteVolumeAttachment2Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteVolumeAttachment2Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1VolumeAttachment ReadVolumeAttachment2(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadVolumeAttachment2(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1VolumeAttachment> ReadVolumeAttachment2Async(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadVolumeAttachment2Async(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PriorityClass ReplacePriorityClass(global::k8s.Models.V1PriorityClass body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplacePriorityClass(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PriorityClass> ReplacePriorityClassAsync(global::k8s.Models.V1PriorityClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePriorityClassAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources39()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources39();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources39Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources39Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionPriorityClass1(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionPriorityClass1(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionPriorityClass1Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionPriorityClass1Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1PriorityClassList ListPriorityClass1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListPriorityClass1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1PriorityClassList> ListPriorityClass1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPriorityClass1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1PriorityClass CreatePriorityClass1(global::k8s.Models.V1alpha1PriorityClass body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreatePriorityClass1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1PriorityClass> CreatePriorityClass1Async(global::k8s.Models.V1alpha1PriorityClass body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreatePriorityClass1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeletePriorityClass1(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeletePriorityClass1(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeletePriorityClass1Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeletePriorityClass1Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1PriorityClass ReadPriorityClass1(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadPriorityClass1(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1PriorityClass> ReadPriorityClass1Async(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPriorityClass1Async(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1PriorityClass PatchPriorityClass1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchPriorityClass1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1PriorityClass> PatchPriorityClass1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPriorityClass1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1PriorityClass ReplacePriorityClass1(global::k8s.Models.V1alpha1PriorityClass body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplacePriorityClass1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1PriorityClass> ReplacePriorityClass1Async(global::k8s.Models.V1alpha1PriorityClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePriorityClass1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources40()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources40();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources40Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources40Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionPriorityClass2(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionPriorityClass2(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionPriorityClass2Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionPriorityClass2Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PriorityClassList ListPriorityClass2(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListPriorityClass2(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PriorityClassList> ListPriorityClass2Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPriorityClass2Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PriorityClass CreatePriorityClass2(global::k8s.Models.V1beta1PriorityClass body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreatePriorityClass2(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PriorityClass> CreatePriorityClass2Async(global::k8s.Models.V1beta1PriorityClass body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreatePriorityClass2Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeletePriorityClass2(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeletePriorityClass2(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeletePriorityClass2Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeletePriorityClass2Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PriorityClass ReadPriorityClass2(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadPriorityClass2(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PriorityClass> ReadPriorityClass2Async(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPriorityClass2Async(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PriorityClass PatchPriorityClass2(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchPriorityClass2(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PriorityClass> PatchPriorityClass2Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPriorityClass2Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PriorityClass ReplacePriorityClass2(global::k8s.Models.V1beta1PriorityClass body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplacePriorityClass2(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PriorityClass> ReplacePriorityClass2Async(global::k8s.Models.V1beta1PriorityClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePriorityClass2Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup20()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup20();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup20Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup20Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources41()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources41();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources41Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources41Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionCSIDriver(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionCSIDriver(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionCSIDriverAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionCSIDriverAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CSIDriverList ListCSIDriver(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListCSIDriver(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CSIDriverList> ListCSIDriverAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCSIDriverAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CSIDriver CreateCSIDriver(global::k8s.Models.V1CSIDriver body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateCSIDriver(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CSIDriver> CreateCSIDriverAsync(global::k8s.Models.V1CSIDriver body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateCSIDriverAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CSIDriver DeleteCSIDriver(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCSIDriver(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CSIDriver> DeleteCSIDriverAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCSIDriverAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CSIDriver ReadCSIDriver(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadCSIDriver(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CSIDriver> ReadCSIDriverAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCSIDriverAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CSIDriver PatchCSIDriver(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchCSIDriver(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CSIDriver> PatchCSIDriverAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCSIDriverAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CSIDriver ReplaceCSIDriver(global::k8s.Models.V1CSIDriver body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceCSIDriver(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CSIDriver> ReplaceCSIDriverAsync(global::k8s.Models.V1CSIDriver body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCSIDriverAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionCSINode(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionCSINode(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionCSINodeAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionCSINodeAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CSINodeList ListCSINode(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListCSINode(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CSINodeList> ListCSINodeAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCSINodeAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CSINode CreateCSINode(global::k8s.Models.V1CSINode body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateCSINode(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CSINode> CreateCSINodeAsync(global::k8s.Models.V1CSINode body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateCSINodeAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CSINode DeleteCSINode(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCSINode(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CSINode> DeleteCSINodeAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCSINodeAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CSINode ReadCSINode(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadCSINode(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CSINode> ReadCSINodeAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCSINodeAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CSINode PatchCSINode(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchCSINode(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CSINode> PatchCSINodeAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCSINodeAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CSINode ReplaceCSINode(global::k8s.Models.V1CSINode body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceCSINode(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CSINode> ReplaceCSINodeAsync(global::k8s.Models.V1CSINode body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCSINodeAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionStorageClass(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionStorageClass(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionStorageClassAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionStorageClassAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1StorageClassList ListStorageClass(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListStorageClass(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1StorageClassList> ListStorageClassAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListStorageClassAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1StorageClass CreateStorageClass(global::k8s.Models.V1StorageClass body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateStorageClass(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1StorageClass> CreateStorageClassAsync(global::k8s.Models.V1StorageClass body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateStorageClassAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1StorageClass DeleteStorageClass(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteStorageClass(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1StorageClass> DeleteStorageClassAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteStorageClassAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1StorageClass ReadStorageClass(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadStorageClass(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1StorageClass> ReadStorageClassAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadStorageClassAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1StorageClass PatchStorageClass(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchStorageClass(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1StorageClass> PatchStorageClassAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchStorageClassAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1StorageClass ReplaceStorageClass(global::k8s.Models.V1StorageClass body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceStorageClass(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1StorageClass> ReplaceStorageClassAsync(global::k8s.Models.V1StorageClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceStorageClassAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionVolumeAttachment(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionVolumeAttachment(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionVolumeAttachmentAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionVolumeAttachmentAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1VolumeAttachmentList ListVolumeAttachment(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListVolumeAttachment(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1VolumeAttachmentList> ListVolumeAttachmentAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListVolumeAttachmentAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1VolumeAttachment CreateVolumeAttachment(global::k8s.Models.V1VolumeAttachment body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateVolumeAttachment(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1Role> PatchNamespacedRole1Async(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedRole1Async(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1Role ReplaceNamespacedRole1(global::k8s.Models.V1alpha1Role body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedRole1(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1Role> ReplaceNamespacedRole1Async(global::k8s.Models.V1alpha1Role body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedRole1Async(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1RoleBindingList ListRoleBindingForAllNamespaces1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListRoleBindingForAllNamespaces1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1RoleBindingList> ListRoleBindingForAllNamespaces1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListRoleBindingForAllNamespaces1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1RoleList ListRoleForAllNamespaces1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListRoleForAllNamespaces1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1RoleList> ListRoleForAllNamespaces1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListRoleForAllNamespaces1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources37()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources37();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources37Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources37Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionClusterRoleBinding2(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionClusterRoleBinding2(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionClusterRoleBinding2Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionClusterRoleBinding2Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1ClusterRoleBindingList ListClusterRoleBinding2(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListClusterRoleBinding2(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1ClusterRoleBindingList> ListClusterRoleBinding2Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListClusterRoleBinding2Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1ClusterRoleBinding CreateClusterRoleBinding2(global::k8s.Models.V1beta1ClusterRoleBinding body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateClusterRoleBinding2(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1ClusterRoleBinding> CreateClusterRoleBinding2Async(global::k8s.Models.V1beta1ClusterRoleBinding body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateClusterRoleBinding2Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteClusterRoleBinding2(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteClusterRoleBinding2(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteClusterRoleBinding2Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteClusterRoleBinding2Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1ClusterRoleBinding ReadClusterRoleBinding2(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadClusterRoleBinding2(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1ClusterRoleBinding> ReadClusterRoleBinding2Async(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadClusterRoleBinding2Async(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1ClusterRoleBinding PatchClusterRoleBinding2(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchClusterRoleBinding2(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1ClusterRoleBinding> PatchClusterRoleBinding2Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchClusterRoleBinding2Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1ClusterRoleBinding ReplaceClusterRoleBinding2(global::k8s.Models.V1beta1ClusterRoleBinding body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceClusterRoleBinding2(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1ClusterRoleBinding> ReplaceClusterRoleBinding2Async(global::k8s.Models.V1beta1ClusterRoleBinding body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceClusterRoleBinding2Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionClusterRole2(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionClusterRole2(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionClusterRole2Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionClusterRole2Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1ClusterRoleList ListClusterRole2(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListClusterRole2(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1ClusterRoleList> ListClusterRole2Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListClusterRole2Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1ClusterRole CreateClusterRole2(global::k8s.Models.V1beta1ClusterRole body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateClusterRole2(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1ClusterRole> CreateClusterRole2Async(global::k8s.Models.V1beta1ClusterRole body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateClusterRole2Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteClusterRole2(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteClusterRole2(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteClusterRole2Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteClusterRole2Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1ClusterRole ReadClusterRole2(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadClusterRole2(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1ClusterRole> ReadClusterRole2Async(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadClusterRole2Async(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1ClusterRole PatchClusterRole2(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchClusterRole2(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1ClusterRole> PatchClusterRole2Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchClusterRole2Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1ClusterRole ReplaceClusterRole2(global::k8s.Models.V1beta1ClusterRole body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceClusterRole2(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1ClusterRole> ReplaceClusterRole2Async(global::k8s.Models.V1beta1ClusterRole body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceClusterRole2Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedRoleBinding2(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedRoleBinding2(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedRoleBinding2Async(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedRoleBinding2Async(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1RoleBindingList ListNamespacedRoleBinding2(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedRoleBinding2(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1RoleBindingList> ListNamespacedRoleBinding2Async(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedRoleBinding2Async(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1RoleBinding CreateNamespacedRoleBinding2(global::k8s.Models.V1beta1RoleBinding body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedRoleBinding2(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1RoleBinding> CreateNamespacedRoleBinding2Async(global::k8s.Models.V1beta1RoleBinding body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedRoleBinding2Async(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedRoleBinding2(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedRoleBinding2(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedRoleBinding2Async(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedRoleBinding2Async(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1RoleBinding ReadNamespacedRoleBinding2(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedRoleBinding2(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1RoleBinding> ReadNamespacedRoleBinding2Async(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedRoleBinding2Async(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1RoleBinding PatchNamespacedRoleBinding2(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedRoleBinding2(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1RoleBinding> PatchNamespacedRoleBinding2Async(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedRoleBinding2Async(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1RoleBinding ReplaceNamespacedRoleBinding2(global::k8s.Models.V1beta1RoleBinding body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedRoleBinding2(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1RoleBinding> ReplaceNamespacedRoleBinding2Async(global::k8s.Models.V1beta1RoleBinding body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedRoleBinding2Async(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedRole2(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedRole2(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedRole2Async(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedRole2Async(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1RoleList ListNamespacedRole2(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedRole2(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1RoleList> ListNamespacedRole2Async(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedRole2Async(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1Role CreateNamespacedRole2(global::k8s.Models.V1beta1Role body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedRole2(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1Role> CreateNamespacedRole2Async(global::k8s.Models.V1beta1Role body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedRole2Async(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedRole2(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedRole2(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedRole2Async(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedRole2Async(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1Role ReadNamespacedRole2(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedRole2(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1Role> ReadNamespacedRole2Async(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedRole2Async(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1Role PatchNamespacedRole2(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedRole2(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1Role> PatchNamespacedRole2Async(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedRole2Async(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1Role ReplaceNamespacedRole2(global::k8s.Models.V1beta1Role body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedRole2(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1Role> ReplaceNamespacedRole2Async(global::k8s.Models.V1beta1Role body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedRole2Async(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1RoleBindingList ListRoleBindingForAllNamespaces2(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListRoleBindingForAllNamespaces2(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1RoleBindingList> ListRoleBindingForAllNamespaces2Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListRoleBindingForAllNamespaces2Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1RoleList ListRoleForAllNamespaces2(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListRoleForAllNamespaces2(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1RoleList> ListRoleForAllNamespaces2Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListRoleForAllNamespaces2Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup19()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup19();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup19Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup19Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources38()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources38();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources38Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources38Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionPriorityClass(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionPriorityClass(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionPriorityClassAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionPriorityClassAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PriorityClassList ListPriorityClass(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListPriorityClass(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PriorityClassList> ListPriorityClassAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPriorityClassAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PriorityClass CreatePriorityClass(global::k8s.Models.V1PriorityClass body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreatePriorityClass(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PriorityClass> CreatePriorityClassAsync(global::k8s.Models.V1PriorityClass body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreatePriorityClassAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeletePriorityClass(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeletePriorityClass(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeletePriorityClassAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeletePriorityClassAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PriorityClass ReadPriorityClass(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadPriorityClass(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PriorityClass> ReadPriorityClassAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPriorityClassAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PriorityClass PatchPriorityClass(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchPriorityClass(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PriorityClass> PatchPriorityClassAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPriorityClassAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1RoleBindingList ListNamespacedRoleBinding(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedRoleBinding(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1RoleBindingList> ListNamespacedRoleBindingAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedRoleBindingAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1RoleBinding CreateNamespacedRoleBinding(global::k8s.Models.V1RoleBinding body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedRoleBinding(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1RoleBinding> CreateNamespacedRoleBindingAsync(global::k8s.Models.V1RoleBinding body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedRoleBindingAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedRoleBinding(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedRoleBinding(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedRoleBindingAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedRoleBindingAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1RoleBinding ReadNamespacedRoleBinding(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedRoleBinding(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1RoleBinding> ReadNamespacedRoleBindingAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedRoleBindingAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1RoleBinding PatchNamespacedRoleBinding(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedRoleBinding(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1RoleBinding> PatchNamespacedRoleBindingAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedRoleBindingAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1RoleBinding ReplaceNamespacedRoleBinding(global::k8s.Models.V1RoleBinding body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedRoleBinding(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1RoleBinding> ReplaceNamespacedRoleBindingAsync(global::k8s.Models.V1RoleBinding body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedRoleBindingAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedRole(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedRole(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedRoleAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedRoleAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1RoleList ListNamespacedRole(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedRole(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1RoleList> ListNamespacedRoleAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedRoleAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Role CreateNamespacedRole(global::k8s.Models.V1Role body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedRole(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Role> CreateNamespacedRoleAsync(global::k8s.Models.V1Role body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedRoleAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedRole(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedRole(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedRoleAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedRoleAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Role ReadNamespacedRole(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedRole(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Role> ReadNamespacedRoleAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedRoleAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Role PatchNamespacedRole(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedRole(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Role> PatchNamespacedRoleAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedRoleAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Role ReplaceNamespacedRole(global::k8s.Models.V1Role body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedRole(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Role> ReplaceNamespacedRoleAsync(global::k8s.Models.V1Role body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedRoleAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1RoleBindingList ListRoleBindingForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListRoleBindingForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1RoleBindingList> ListRoleBindingForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListRoleBindingForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1RoleList ListRoleForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListRoleForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1RoleList> ListRoleForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListRoleForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources36()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources36();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources36Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources36Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionClusterRoleBinding1(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionClusterRoleBinding1(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionClusterRoleBinding1Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionClusterRoleBinding1Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1ClusterRoleBindingList ListClusterRoleBinding1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListClusterRoleBinding1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1ClusterRoleBindingList> ListClusterRoleBinding1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListClusterRoleBinding1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1ClusterRoleBinding CreateClusterRoleBinding1(global::k8s.Models.V1alpha1ClusterRoleBinding body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateClusterRoleBinding1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1ClusterRoleBinding> CreateClusterRoleBinding1Async(global::k8s.Models.V1alpha1ClusterRoleBinding body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateClusterRoleBinding1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteClusterRoleBinding1(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteClusterRoleBinding1(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteClusterRoleBinding1Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteClusterRoleBinding1Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1ClusterRoleBinding ReadClusterRoleBinding1(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadClusterRoleBinding1(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1ClusterRoleBinding> ReadClusterRoleBinding1Async(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadClusterRoleBinding1Async(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1ClusterRoleBinding PatchClusterRoleBinding1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchClusterRoleBinding1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1ClusterRoleBinding> PatchClusterRoleBinding1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchClusterRoleBinding1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1ClusterRoleBinding ReplaceClusterRoleBinding1(global::k8s.Models.V1alpha1ClusterRoleBinding body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceClusterRoleBinding1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1ClusterRoleBinding> ReplaceClusterRoleBinding1Async(global::k8s.Models.V1alpha1ClusterRoleBinding body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceClusterRoleBinding1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionClusterRole1(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionClusterRole1(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionClusterRole1Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionClusterRole1Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1ClusterRoleList ListClusterRole1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListClusterRole1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1ClusterRoleList> ListClusterRole1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListClusterRole1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1ClusterRole CreateClusterRole1(global::k8s.Models.V1alpha1ClusterRole body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateClusterRole1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1ClusterRole> CreateClusterRole1Async(global::k8s.Models.V1alpha1ClusterRole body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateClusterRole1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteClusterRole1(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteClusterRole1(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteClusterRole1Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteClusterRole1Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1ClusterRole ReadClusterRole1(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadClusterRole1(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1ClusterRole> ReadClusterRole1Async(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadClusterRole1Async(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1ClusterRole PatchClusterRole1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchClusterRole1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1ClusterRole> PatchClusterRole1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchClusterRole1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1ClusterRole ReplaceClusterRole1(global::k8s.Models.V1alpha1ClusterRole body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceClusterRole1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1ClusterRole> ReplaceClusterRole1Async(global::k8s.Models.V1alpha1ClusterRole body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceClusterRole1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedRoleBinding1(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedRoleBinding1(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedRoleBinding1Async(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedRoleBinding1Async(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1RoleBindingList ListNamespacedRoleBinding1(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedRoleBinding1(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1RoleBindingList> ListNamespacedRoleBinding1Async(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedRoleBinding1Async(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1RoleBinding CreateNamespacedRoleBinding1(global::k8s.Models.V1alpha1RoleBinding body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedRoleBinding1(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1RoleBinding> CreateNamespacedRoleBinding1Async(global::k8s.Models.V1alpha1RoleBinding body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedRoleBinding1Async(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedRoleBinding1(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedRoleBinding1(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedRoleBinding1Async(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedRoleBinding1Async(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1RoleBinding ReadNamespacedRoleBinding1(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedRoleBinding1(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1RoleBinding> ReadNamespacedRoleBinding1Async(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedRoleBinding1Async(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1RoleBinding PatchNamespacedRoleBinding1(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedRoleBinding1(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1RoleBinding> PatchNamespacedRoleBinding1Async(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedRoleBinding1Async(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1RoleBinding ReplaceNamespacedRoleBinding1(global::k8s.Models.V1alpha1RoleBinding body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedRoleBinding1(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1RoleBinding> ReplaceNamespacedRoleBinding1Async(global::k8s.Models.V1alpha1RoleBinding body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedRoleBinding1Async(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedRole1(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedRole1(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedRole1Async(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedRole1Async(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1RoleList ListNamespacedRole1(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedRole1(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1RoleList> ListNamespacedRole1Async(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedRole1Async(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1Role CreateNamespacedRole1(global::k8s.Models.V1alpha1Role body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedRole1(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1Role> CreateNamespacedRole1Async(global::k8s.Models.V1alpha1Role body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedRole1Async(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedRole1(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedRole1(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedRole1Async(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedRole1Async(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1Role ReadNamespacedRole1(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedRole1(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1Role> ReadNamespacedRole1Async(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedRole1Async(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1Role PatchNamespacedRole1(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedRole1(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1RuntimeClassList> ListRuntimeClass2Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListRuntimeClass2Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1RuntimeClass CreateRuntimeClass2(global::k8s.Models.V1beta1RuntimeClass body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateRuntimeClass2(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1RuntimeClass> CreateRuntimeClass2Async(global::k8s.Models.V1beta1RuntimeClass body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateRuntimeClass2Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteRuntimeClass2(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteRuntimeClass2(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteRuntimeClass2Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteRuntimeClass2Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1RuntimeClass ReadRuntimeClass2(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadRuntimeClass2(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1RuntimeClass> ReadRuntimeClass2Async(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadRuntimeClass2Async(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1RuntimeClass PatchRuntimeClass2(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchRuntimeClass2(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1RuntimeClass> PatchRuntimeClass2Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchRuntimeClass2Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1RuntimeClass ReplaceRuntimeClass2(global::k8s.Models.V1beta1RuntimeClass body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceRuntimeClass2(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1RuntimeClass> ReplaceRuntimeClass2Async(global::k8s.Models.V1beta1RuntimeClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceRuntimeClass2Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup17()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup17();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup17Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup17Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources34()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources34();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources34Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources34Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedPodDisruptionBudget(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedPodDisruptionBudget(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedPodDisruptionBudgetAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedPodDisruptionBudgetAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PodDisruptionBudgetList ListNamespacedPodDisruptionBudget(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedPodDisruptionBudget(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PodDisruptionBudgetList> ListNamespacedPodDisruptionBudgetAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedPodDisruptionBudgetAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PodDisruptionBudget CreateNamespacedPodDisruptionBudget(global::k8s.Models.V1beta1PodDisruptionBudget body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedPodDisruptionBudget(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PodDisruptionBudget> CreateNamespacedPodDisruptionBudgetAsync(global::k8s.Models.V1beta1PodDisruptionBudget body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedPodDisruptionBudgetAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedPodDisruptionBudget(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedPodDisruptionBudget(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedPodDisruptionBudgetAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedPodDisruptionBudgetAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PodDisruptionBudget ReadNamespacedPodDisruptionBudget(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedPodDisruptionBudget(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PodDisruptionBudget> ReadNamespacedPodDisruptionBudgetAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedPodDisruptionBudgetAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PodDisruptionBudget PatchNamespacedPodDisruptionBudget(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedPodDisruptionBudget(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PodDisruptionBudget> PatchNamespacedPodDisruptionBudgetAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedPodDisruptionBudgetAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PodDisruptionBudget ReplaceNamespacedPodDisruptionBudget(global::k8s.Models.V1beta1PodDisruptionBudget body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedPodDisruptionBudget(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PodDisruptionBudget> ReplaceNamespacedPodDisruptionBudgetAsync(global::k8s.Models.V1beta1PodDisruptionBudget body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedPodDisruptionBudgetAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PodDisruptionBudget ReadNamespacedPodDisruptionBudgetStatus(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedPodDisruptionBudgetStatus(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PodDisruptionBudget> ReadNamespacedPodDisruptionBudgetStatusAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedPodDisruptionBudgetStatusAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PodDisruptionBudget PatchNamespacedPodDisruptionBudgetStatus(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedPodDisruptionBudgetStatus(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PodDisruptionBudget> PatchNamespacedPodDisruptionBudgetStatusAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedPodDisruptionBudgetStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PodDisruptionBudget ReplaceNamespacedPodDisruptionBudgetStatus(global::k8s.Models.V1beta1PodDisruptionBudget body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedPodDisruptionBudgetStatus(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PodDisruptionBudget> ReplaceNamespacedPodDisruptionBudgetStatusAsync(global::k8s.Models.V1beta1PodDisruptionBudget body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedPodDisruptionBudgetStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PodDisruptionBudgetList ListPodDisruptionBudgetForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListPodDisruptionBudgetForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PodDisruptionBudgetList> ListPodDisruptionBudgetForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPodDisruptionBudgetForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionPodSecurityPolicy(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionPodSecurityPolicy(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionPodSecurityPolicyAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionPodSecurityPolicyAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PodSecurityPolicyList ListPodSecurityPolicy(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListPodSecurityPolicy(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PodSecurityPolicyList> ListPodSecurityPolicyAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPodSecurityPolicyAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PodSecurityPolicy CreatePodSecurityPolicy(global::k8s.Models.V1beta1PodSecurityPolicy body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreatePodSecurityPolicy(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PodSecurityPolicy> CreatePodSecurityPolicyAsync(global::k8s.Models.V1beta1PodSecurityPolicy body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreatePodSecurityPolicyAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PodSecurityPolicy DeletePodSecurityPolicy(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeletePodSecurityPolicy(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PodSecurityPolicy> DeletePodSecurityPolicyAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeletePodSecurityPolicyAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PodSecurityPolicy ReadPodSecurityPolicy(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadPodSecurityPolicy(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PodSecurityPolicy> ReadPodSecurityPolicyAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPodSecurityPolicyAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PodSecurityPolicy PatchPodSecurityPolicy(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchPodSecurityPolicy(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PodSecurityPolicy> PatchPodSecurityPolicyAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPodSecurityPolicyAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PodSecurityPolicy ReplacePodSecurityPolicy(global::k8s.Models.V1beta1PodSecurityPolicy body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplacePodSecurityPolicy(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PodSecurityPolicy> ReplacePodSecurityPolicyAsync(global::k8s.Models.V1beta1PodSecurityPolicy body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePodSecurityPolicyAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup18()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup18();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup18Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup18Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources35()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources35();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources35Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources35Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionClusterRoleBinding(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionClusterRoleBinding(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionClusterRoleBindingAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionClusterRoleBindingAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ClusterRoleBindingList ListClusterRoleBinding(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListClusterRoleBinding(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ClusterRoleBindingList> ListClusterRoleBindingAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListClusterRoleBindingAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ClusterRoleBinding CreateClusterRoleBinding(global::k8s.Models.V1ClusterRoleBinding body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateClusterRoleBinding(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ClusterRoleBinding> CreateClusterRoleBindingAsync(global::k8s.Models.V1ClusterRoleBinding body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateClusterRoleBindingAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteClusterRoleBinding(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteClusterRoleBinding(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteClusterRoleBindingAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteClusterRoleBindingAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ClusterRoleBinding ReadClusterRoleBinding(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadClusterRoleBinding(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ClusterRoleBinding> ReadClusterRoleBindingAsync(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadClusterRoleBindingAsync(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ClusterRoleBinding PatchClusterRoleBinding(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchClusterRoleBinding(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ClusterRoleBinding> PatchClusterRoleBindingAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchClusterRoleBindingAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ClusterRoleBinding ReplaceClusterRoleBinding(global::k8s.Models.V1ClusterRoleBinding body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceClusterRoleBinding(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ClusterRoleBinding> ReplaceClusterRoleBindingAsync(global::k8s.Models.V1ClusterRoleBinding body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceClusterRoleBindingAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionClusterRole(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionClusterRole(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionClusterRoleAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionClusterRoleAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ClusterRoleList ListClusterRole(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListClusterRole(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ClusterRoleList> ListClusterRoleAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListClusterRoleAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ClusterRole CreateClusterRole(global::k8s.Models.V1ClusterRole body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateClusterRole(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ClusterRole> CreateClusterRoleAsync(global::k8s.Models.V1ClusterRole body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateClusterRoleAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteClusterRole(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteClusterRole(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteClusterRoleAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteClusterRoleAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ClusterRole ReadClusterRole(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadClusterRole(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ClusterRole> ReadClusterRoleAsync(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadClusterRoleAsync(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ClusterRole PatchClusterRole(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchClusterRole(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ClusterRole> PatchClusterRoleAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchClusterRoleAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ClusterRole ReplaceClusterRole(global::k8s.Models.V1ClusterRole body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceClusterRole(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ClusterRole> ReplaceClusterRoleAsync(global::k8s.Models.V1ClusterRole body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceClusterRoleAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedRoleBinding(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedRoleBinding(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedRoleBindingAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedRoleBindingAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1NetworkPolicy ReadNamespacedNetworkPolicy(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedNetworkPolicy(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1NetworkPolicy> ReadNamespacedNetworkPolicyAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedNetworkPolicyAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1NetworkPolicy PatchNamespacedNetworkPolicy(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedNetworkPolicy(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1NetworkPolicy> PatchNamespacedNetworkPolicyAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedNetworkPolicyAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1NetworkPolicy ReplaceNamespacedNetworkPolicy(global::k8s.Models.V1NetworkPolicy body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedNetworkPolicy(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1NetworkPolicy> ReplaceNamespacedNetworkPolicyAsync(global::k8s.Models.V1NetworkPolicy body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedNetworkPolicyAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1NetworkPolicyList ListNetworkPolicyForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNetworkPolicyForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1NetworkPolicyList> ListNetworkPolicyForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNetworkPolicyForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources30()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources30();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources30Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources30Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionIngressClass1(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionIngressClass1(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionIngressClass1Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionIngressClass1Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1IngressClassList ListIngressClass1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListIngressClass1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1IngressClassList> ListIngressClass1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListIngressClass1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1IngressClass CreateIngressClass1(global::k8s.Models.V1beta1IngressClass body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateIngressClass1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1IngressClass> CreateIngressClass1Async(global::k8s.Models.V1beta1IngressClass body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateIngressClass1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteIngressClass1(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteIngressClass1(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteIngressClass1Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteIngressClass1Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1IngressClass ReadIngressClass1(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadIngressClass1(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1IngressClass> ReadIngressClass1Async(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadIngressClass1Async(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1IngressClass PatchIngressClass1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchIngressClass1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1IngressClass> PatchIngressClass1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchIngressClass1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1IngressClass ReplaceIngressClass1(global::k8s.Models.V1beta1IngressClass body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceIngressClass1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1IngressClass> ReplaceIngressClass1Async(global::k8s.Models.V1beta1IngressClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceIngressClass1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Networkingv1beta1IngressList ListIngressForAllNamespaces2(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListIngressForAllNamespaces2(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Networkingv1beta1IngressList> ListIngressForAllNamespaces2Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListIngressForAllNamespaces2Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedIngress2(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedIngress2(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedIngress2Async(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedIngress2Async(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Networkingv1beta1IngressList ListNamespacedIngress2(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedIngress2(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Networkingv1beta1IngressList> ListNamespacedIngress2Async(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedIngress2Async(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Networkingv1beta1Ingress CreateNamespacedIngress2(global::k8s.Models.Networkingv1beta1Ingress body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedIngress2(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Networkingv1beta1Ingress> CreateNamespacedIngress2Async(global::k8s.Models.Networkingv1beta1Ingress body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedIngress2Async(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedIngress2(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedIngress2(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedIngress2Async(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedIngress2Async(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Networkingv1beta1Ingress ReadNamespacedIngress2(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedIngress2(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Networkingv1beta1Ingress> ReadNamespacedIngress2Async(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedIngress2Async(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Networkingv1beta1Ingress PatchNamespacedIngress2(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedIngress2(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Networkingv1beta1Ingress> PatchNamespacedIngress2Async(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedIngress2Async(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Networkingv1beta1Ingress ReplaceNamespacedIngress2(global::k8s.Models.Networkingv1beta1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedIngress2(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Networkingv1beta1Ingress> ReplaceNamespacedIngress2Async(global::k8s.Models.Networkingv1beta1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedIngress2Async(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Networkingv1beta1Ingress ReadNamespacedIngressStatus2(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedIngressStatus2(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Networkingv1beta1Ingress> ReadNamespacedIngressStatus2Async(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedIngressStatus2Async(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Networkingv1beta1Ingress PatchNamespacedIngressStatus2(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedIngressStatus2(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Networkingv1beta1Ingress> PatchNamespacedIngressStatus2Async(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedIngressStatus2Async(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Networkingv1beta1Ingress ReplaceNamespacedIngressStatus2(global::k8s.Models.Networkingv1beta1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedIngressStatus2(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Networkingv1beta1Ingress> ReplaceNamespacedIngressStatus2Async(global::k8s.Models.Networkingv1beta1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedIngressStatus2Async(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup16()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup16();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup16Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup16Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources31()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources31();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources31Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources31Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionRuntimeClass(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionRuntimeClass(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionRuntimeClassAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionRuntimeClassAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1RuntimeClassList ListRuntimeClass(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListRuntimeClass(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1RuntimeClassList> ListRuntimeClassAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListRuntimeClassAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1RuntimeClass CreateRuntimeClass(global::k8s.Models.V1RuntimeClass body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateRuntimeClass(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1RuntimeClass> CreateRuntimeClassAsync(global::k8s.Models.V1RuntimeClass body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateRuntimeClassAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteRuntimeClass(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteRuntimeClass(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteRuntimeClassAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteRuntimeClassAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1RuntimeClass ReadRuntimeClass(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadRuntimeClass(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1RuntimeClass> ReadRuntimeClassAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadRuntimeClassAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1RuntimeClass PatchRuntimeClass(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchRuntimeClass(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1RuntimeClass> PatchRuntimeClassAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchRuntimeClassAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1RuntimeClass ReplaceRuntimeClass(global::k8s.Models.V1RuntimeClass body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceRuntimeClass(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1RuntimeClass> ReplaceRuntimeClassAsync(global::k8s.Models.V1RuntimeClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceRuntimeClassAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources32()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources32();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources32Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources32Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionRuntimeClass1(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionRuntimeClass1(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionRuntimeClass1Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionRuntimeClass1Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1RuntimeClassList ListRuntimeClass1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListRuntimeClass1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1RuntimeClassList> ListRuntimeClass1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListRuntimeClass1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1RuntimeClass CreateRuntimeClass1(global::k8s.Models.V1alpha1RuntimeClass body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateRuntimeClass1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1RuntimeClass> CreateRuntimeClass1Async(global::k8s.Models.V1alpha1RuntimeClass body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateRuntimeClass1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteRuntimeClass1(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteRuntimeClass1(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteRuntimeClass1Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteRuntimeClass1Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1RuntimeClass ReadRuntimeClass1(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadRuntimeClass1(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1RuntimeClass> ReadRuntimeClass1Async(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadRuntimeClass1Async(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1RuntimeClass PatchRuntimeClass1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchRuntimeClass1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1RuntimeClass> PatchRuntimeClass1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchRuntimeClass1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1RuntimeClass ReplaceRuntimeClass1(global::k8s.Models.V1alpha1RuntimeClass body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceRuntimeClass1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1RuntimeClass> ReplaceRuntimeClass1Async(global::k8s.Models.V1alpha1RuntimeClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceRuntimeClass1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources33()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources33();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources33Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources33Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionRuntimeClass2(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionRuntimeClass2(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionRuntimeClass2Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionRuntimeClass2Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1RuntimeClassList ListRuntimeClass2(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListRuntimeClass2(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeletePriorityLevelConfiguration1Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeletePriorityLevelConfiguration1Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PriorityLevelConfiguration ReadPriorityLevelConfiguration1(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadPriorityLevelConfiguration1(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PriorityLevelConfiguration> ReadPriorityLevelConfiguration1Async(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPriorityLevelConfiguration1Async(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PriorityLevelConfiguration PatchPriorityLevelConfiguration1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchPriorityLevelConfiguration1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PriorityLevelConfiguration> PatchPriorityLevelConfiguration1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPriorityLevelConfiguration1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PriorityLevelConfiguration ReplacePriorityLevelConfiguration1(global::k8s.Models.V1beta1PriorityLevelConfiguration body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplacePriorityLevelConfiguration1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PriorityLevelConfiguration> ReplacePriorityLevelConfiguration1Async(global::k8s.Models.V1beta1PriorityLevelConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePriorityLevelConfiguration1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PriorityLevelConfiguration ReadPriorityLevelConfigurationStatus1(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadPriorityLevelConfigurationStatus1(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PriorityLevelConfiguration> ReadPriorityLevelConfigurationStatus1Async(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPriorityLevelConfigurationStatus1Async(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PriorityLevelConfiguration PatchPriorityLevelConfigurationStatus1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchPriorityLevelConfigurationStatus1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PriorityLevelConfiguration> PatchPriorityLevelConfigurationStatus1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPriorityLevelConfigurationStatus1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PriorityLevelConfiguration ReplacePriorityLevelConfigurationStatus1(global::k8s.Models.V1beta1PriorityLevelConfiguration body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplacePriorityLevelConfigurationStatus1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PriorityLevelConfiguration> ReplacePriorityLevelConfigurationStatus1Async(global::k8s.Models.V1beta1PriorityLevelConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePriorityLevelConfigurationStatus1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup14()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup14();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup14Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup14Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources28()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources28();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources28Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources28Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionStorageVersion(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionStorageVersion(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionStorageVersionAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionStorageVersionAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1StorageVersionList ListStorageVersion(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListStorageVersion(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1StorageVersionList> ListStorageVersionAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListStorageVersionAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1StorageVersion CreateStorageVersion(global::k8s.Models.V1alpha1StorageVersion body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateStorageVersion(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1StorageVersion> CreateStorageVersionAsync(global::k8s.Models.V1alpha1StorageVersion body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateStorageVersionAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteStorageVersion(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteStorageVersion(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteStorageVersionAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteStorageVersionAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1StorageVersion ReadStorageVersion(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadStorageVersion(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1StorageVersion> ReadStorageVersionAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadStorageVersionAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1StorageVersion PatchStorageVersion(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchStorageVersion(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1StorageVersion> PatchStorageVersionAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchStorageVersionAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1StorageVersion ReplaceStorageVersion(global::k8s.Models.V1alpha1StorageVersion body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceStorageVersion(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1StorageVersion> ReplaceStorageVersionAsync(global::k8s.Models.V1alpha1StorageVersion body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceStorageVersionAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1StorageVersion ReadStorageVersionStatus(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadStorageVersionStatus(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1StorageVersion> ReadStorageVersionStatusAsync(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadStorageVersionStatusAsync(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1StorageVersion PatchStorageVersionStatus(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchStorageVersionStatus(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1StorageVersion> PatchStorageVersionStatusAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchStorageVersionStatusAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1StorageVersion ReplaceStorageVersionStatus(global::k8s.Models.V1alpha1StorageVersion body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceStorageVersionStatus(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1StorageVersion> ReplaceStorageVersionStatusAsync(global::k8s.Models.V1alpha1StorageVersion body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceStorageVersionStatusAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup15()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup15();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup15Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup15Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources29()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources29();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources29Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources29Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionIngressClass(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionIngressClass(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionIngressClassAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionIngressClassAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1IngressClassList ListIngressClass(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListIngressClass(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1IngressClassList> ListIngressClassAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListIngressClassAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1IngressClass CreateIngressClass(global::k8s.Models.V1IngressClass body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateIngressClass(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1IngressClass> CreateIngressClassAsync(global::k8s.Models.V1IngressClass body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateIngressClassAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteIngressClass(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteIngressClass(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteIngressClassAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteIngressClassAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1IngressClass ReadIngressClass(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadIngressClass(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1IngressClass> ReadIngressClassAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadIngressClassAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1IngressClass PatchIngressClass(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchIngressClass(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1IngressClass> PatchIngressClassAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchIngressClassAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1IngressClass ReplaceIngressClass(global::k8s.Models.V1IngressClass body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceIngressClass(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1IngressClass> ReplaceIngressClassAsync(global::k8s.Models.V1IngressClass body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceIngressClassAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1IngressList ListIngressForAllNamespaces1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListIngressForAllNamespaces1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1IngressList> ListIngressForAllNamespaces1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListIngressForAllNamespaces1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedIngress1(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedIngress1(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedIngress1Async(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedIngress1Async(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1IngressList ListNamespacedIngress1(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedIngress1(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1IngressList> ListNamespacedIngress1Async(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedIngress1Async(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Ingress CreateNamespacedIngress1(global::k8s.Models.V1Ingress body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedIngress1(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Ingress> CreateNamespacedIngress1Async(global::k8s.Models.V1Ingress body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedIngress1Async(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedIngress1(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedIngress1(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedIngress1Async(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedIngress1Async(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Ingress ReadNamespacedIngress1(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedIngress1(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Ingress> ReadNamespacedIngress1Async(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedIngress1Async(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Ingress PatchNamespacedIngress1(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedIngress1(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Ingress> PatchNamespacedIngress1Async(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedIngress1Async(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Ingress ReplaceNamespacedIngress1(global::k8s.Models.V1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedIngress1(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Ingress> ReplaceNamespacedIngress1Async(global::k8s.Models.V1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedIngress1Async(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Ingress ReadNamespacedIngressStatus1(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedIngressStatus1(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Ingress> ReadNamespacedIngressStatus1Async(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedIngressStatus1Async(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Ingress PatchNamespacedIngressStatus1(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedIngressStatus1(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Ingress> PatchNamespacedIngressStatus1Async(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedIngressStatus1Async(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Ingress ReplaceNamespacedIngressStatus1(global::k8s.Models.V1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedIngressStatus1(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Ingress> ReplaceNamespacedIngressStatus1Async(global::k8s.Models.V1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedIngressStatus1Async(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedNetworkPolicy(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedNetworkPolicy(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedNetworkPolicyAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedNetworkPolicyAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1NetworkPolicyList ListNamespacedNetworkPolicy(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedNetworkPolicy(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1NetworkPolicyList> ListNamespacedNetworkPolicyAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedNetworkPolicyAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1NetworkPolicy CreateNamespacedNetworkPolicy(global::k8s.Models.V1NetworkPolicy body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedNetworkPolicy(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1NetworkPolicy> CreateNamespacedNetworkPolicyAsync(global::k8s.Models.V1NetworkPolicy body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedNetworkPolicyAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedNetworkPolicy(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedNetworkPolicy(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedNetworkPolicyAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedNetworkPolicyAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Extensionsv1beta1Ingress ReadNamespacedIngress(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedIngress(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Extensionsv1beta1Ingress> ReadNamespacedIngressAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedIngressAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Extensionsv1beta1Ingress PatchNamespacedIngress(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedIngress(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Extensionsv1beta1Ingress> PatchNamespacedIngressAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedIngressAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Extensionsv1beta1Ingress ReplaceNamespacedIngress(global::k8s.Models.Extensionsv1beta1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedIngress(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Extensionsv1beta1Ingress> ReplaceNamespacedIngressAsync(global::k8s.Models.Extensionsv1beta1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedIngressAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Extensionsv1beta1Ingress ReadNamespacedIngressStatus(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedIngressStatus(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Extensionsv1beta1Ingress> ReadNamespacedIngressStatusAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedIngressStatusAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Extensionsv1beta1Ingress PatchNamespacedIngressStatus(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedIngressStatus(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Extensionsv1beta1Ingress> PatchNamespacedIngressStatusAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedIngressStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Extensionsv1beta1Ingress ReplaceNamespacedIngressStatus(global::k8s.Models.Extensionsv1beta1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedIngressStatus(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Extensionsv1beta1Ingress> ReplaceNamespacedIngressStatusAsync(global::k8s.Models.Extensionsv1beta1Ingress body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedIngressStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup13()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup13();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup13Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup13Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources26()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources26();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources26Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources26Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionFlowSchema(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionFlowSchema(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionFlowSchemaAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionFlowSchemaAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1FlowSchemaList ListFlowSchema(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListFlowSchema(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1FlowSchemaList> ListFlowSchemaAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListFlowSchemaAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1FlowSchema CreateFlowSchema(global::k8s.Models.V1alpha1FlowSchema body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateFlowSchema(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1FlowSchema> CreateFlowSchemaAsync(global::k8s.Models.V1alpha1FlowSchema body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateFlowSchemaAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteFlowSchema(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteFlowSchema(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteFlowSchemaAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteFlowSchemaAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1FlowSchema ReadFlowSchema(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadFlowSchema(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1FlowSchema> ReadFlowSchemaAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadFlowSchemaAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1FlowSchema PatchFlowSchema(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchFlowSchema(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1FlowSchema> PatchFlowSchemaAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchFlowSchemaAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1FlowSchema ReplaceFlowSchema(global::k8s.Models.V1alpha1FlowSchema body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceFlowSchema(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1FlowSchema> ReplaceFlowSchemaAsync(global::k8s.Models.V1alpha1FlowSchema body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceFlowSchemaAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1FlowSchema ReadFlowSchemaStatus(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadFlowSchemaStatus(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1FlowSchema> ReadFlowSchemaStatusAsync(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadFlowSchemaStatusAsync(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1FlowSchema PatchFlowSchemaStatus(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchFlowSchemaStatus(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1FlowSchema> PatchFlowSchemaStatusAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchFlowSchemaStatusAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1FlowSchema ReplaceFlowSchemaStatus(global::k8s.Models.V1alpha1FlowSchema body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceFlowSchemaStatus(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1FlowSchema> ReplaceFlowSchemaStatusAsync(global::k8s.Models.V1alpha1FlowSchema body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceFlowSchemaStatusAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionPriorityLevelConfiguration(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionPriorityLevelConfiguration(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionPriorityLevelConfigurationAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionPriorityLevelConfigurationAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1PriorityLevelConfigurationList ListPriorityLevelConfiguration(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListPriorityLevelConfiguration(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1PriorityLevelConfigurationList> ListPriorityLevelConfigurationAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPriorityLevelConfigurationAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1PriorityLevelConfiguration CreatePriorityLevelConfiguration(global::k8s.Models.V1alpha1PriorityLevelConfiguration body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreatePriorityLevelConfiguration(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1PriorityLevelConfiguration> CreatePriorityLevelConfigurationAsync(global::k8s.Models.V1alpha1PriorityLevelConfiguration body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreatePriorityLevelConfigurationAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeletePriorityLevelConfiguration(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeletePriorityLevelConfiguration(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeletePriorityLevelConfigurationAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeletePriorityLevelConfigurationAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1PriorityLevelConfiguration ReadPriorityLevelConfiguration(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadPriorityLevelConfiguration(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1PriorityLevelConfiguration> ReadPriorityLevelConfigurationAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPriorityLevelConfigurationAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1PriorityLevelConfiguration PatchPriorityLevelConfiguration(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchPriorityLevelConfiguration(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1PriorityLevelConfiguration> PatchPriorityLevelConfigurationAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPriorityLevelConfigurationAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1PriorityLevelConfiguration ReplacePriorityLevelConfiguration(global::k8s.Models.V1alpha1PriorityLevelConfiguration body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplacePriorityLevelConfiguration(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1PriorityLevelConfiguration> ReplacePriorityLevelConfigurationAsync(global::k8s.Models.V1alpha1PriorityLevelConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePriorityLevelConfigurationAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1PriorityLevelConfiguration ReadPriorityLevelConfigurationStatus(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadPriorityLevelConfigurationStatus(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1PriorityLevelConfiguration> ReadPriorityLevelConfigurationStatusAsync(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPriorityLevelConfigurationStatusAsync(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1PriorityLevelConfiguration PatchPriorityLevelConfigurationStatus(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchPriorityLevelConfigurationStatus(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1PriorityLevelConfiguration> PatchPriorityLevelConfigurationStatusAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPriorityLevelConfigurationStatusAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1alpha1PriorityLevelConfiguration ReplacePriorityLevelConfigurationStatus(global::k8s.Models.V1alpha1PriorityLevelConfiguration body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplacePriorityLevelConfigurationStatus(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1alpha1PriorityLevelConfiguration> ReplacePriorityLevelConfigurationStatusAsync(global::k8s.Models.V1alpha1PriorityLevelConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePriorityLevelConfigurationStatusAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources27()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources27();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources27Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources27Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionFlowSchema1(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionFlowSchema1(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionFlowSchema1Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionFlowSchema1Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1FlowSchemaList ListFlowSchema1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListFlowSchema1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1FlowSchemaList> ListFlowSchema1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListFlowSchema1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1FlowSchema CreateFlowSchema1(global::k8s.Models.V1beta1FlowSchema body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateFlowSchema1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1FlowSchema> CreateFlowSchema1Async(global::k8s.Models.V1beta1FlowSchema body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateFlowSchema1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteFlowSchema1(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteFlowSchema1(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteFlowSchema1Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteFlowSchema1Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1FlowSchema ReadFlowSchema1(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadFlowSchema1(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1FlowSchema> ReadFlowSchema1Async(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadFlowSchema1Async(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1FlowSchema PatchFlowSchema1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchFlowSchema1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1FlowSchema> PatchFlowSchema1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchFlowSchema1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1FlowSchema ReplaceFlowSchema1(global::k8s.Models.V1beta1FlowSchema body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceFlowSchema1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1FlowSchema> ReplaceFlowSchema1Async(global::k8s.Models.V1beta1FlowSchema body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceFlowSchema1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1FlowSchema ReadFlowSchemaStatus1(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadFlowSchemaStatus1(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1FlowSchema> ReadFlowSchemaStatus1Async(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadFlowSchemaStatus1Async(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1FlowSchema PatchFlowSchemaStatus1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchFlowSchemaStatus1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1FlowSchema> PatchFlowSchemaStatus1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchFlowSchemaStatus1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1FlowSchema ReplaceFlowSchemaStatus1(global::k8s.Models.V1beta1FlowSchema body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceFlowSchemaStatus1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1FlowSchema> ReplaceFlowSchemaStatus1Async(global::k8s.Models.V1beta1FlowSchema body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceFlowSchemaStatus1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionPriorityLevelConfiguration1(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionPriorityLevelConfiguration1(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionPriorityLevelConfiguration1Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionPriorityLevelConfiguration1Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PriorityLevelConfigurationList ListPriorityLevelConfiguration1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListPriorityLevelConfiguration1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PriorityLevelConfigurationList> ListPriorityLevelConfiguration1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPriorityLevelConfiguration1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1PriorityLevelConfiguration CreatePriorityLevelConfiguration1(global::k8s.Models.V1beta1PriorityLevelConfiguration body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreatePriorityLevelConfiguration1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1PriorityLevelConfiguration> CreatePriorityLevelConfiguration1Async(global::k8s.Models.V1beta1PriorityLevelConfiguration body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreatePriorityLevelConfiguration1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeletePriorityLevelConfiguration1(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeletePriorityLevelConfiguration1(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedLease1Async(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedLease1Async(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1LeaseList ListNamespacedLease1(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedLease1(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1LeaseList> ListNamespacedLease1Async(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedLease1Async(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1Lease CreateNamespacedLease1(global::k8s.Models.V1beta1Lease body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedLease1(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1Lease> CreateNamespacedLease1Async(global::k8s.Models.V1beta1Lease body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedLease1Async(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedLease1(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedLease1(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedLease1Async(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedLease1Async(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1Lease ReadNamespacedLease1(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedLease1(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1Lease> ReadNamespacedLease1Async(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedLease1Async(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1Lease PatchNamespacedLease1(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedLease1(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1Lease> PatchNamespacedLease1Async(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedLease1Async(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1Lease ReplaceNamespacedLease1(global::k8s.Models.V1beta1Lease body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedLease1(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1Lease> ReplaceNamespacedLease1Async(global::k8s.Models.V1beta1Lease body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedLease1Async(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup10()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup10();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup10Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup10Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources22()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources22();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources22Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources22Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1EndpointSliceList ListEndpointSliceForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListEndpointSliceForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1EndpointSliceList> ListEndpointSliceForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListEndpointSliceForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedEndpointSlice(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedEndpointSlice(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedEndpointSliceAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedEndpointSliceAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1EndpointSliceList ListNamespacedEndpointSlice(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedEndpointSlice(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1EndpointSliceList> ListNamespacedEndpointSliceAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedEndpointSliceAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1EndpointSlice CreateNamespacedEndpointSlice(global::k8s.Models.V1beta1EndpointSlice body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedEndpointSlice(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1EndpointSlice> CreateNamespacedEndpointSliceAsync(global::k8s.Models.V1beta1EndpointSlice body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedEndpointSliceAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedEndpointSlice(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedEndpointSlice(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedEndpointSliceAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedEndpointSliceAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1EndpointSlice ReadNamespacedEndpointSlice(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedEndpointSlice(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1EndpointSlice> ReadNamespacedEndpointSliceAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedEndpointSliceAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1EndpointSlice PatchNamespacedEndpointSlice(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedEndpointSlice(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1EndpointSlice> PatchNamespacedEndpointSliceAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedEndpointSliceAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1EndpointSlice ReplaceNamespacedEndpointSlice(global::k8s.Models.V1beta1EndpointSlice body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedEndpointSlice(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1EndpointSlice> ReplaceNamespacedEndpointSliceAsync(global::k8s.Models.V1beta1EndpointSlice body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedEndpointSliceAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup11()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup11();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup11Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup11Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources23()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources23();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources23Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources23Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Eventsv1EventList ListEventForAllNamespaces1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListEventForAllNamespaces1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Eventsv1EventList> ListEventForAllNamespaces1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListEventForAllNamespaces1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedEvent1(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedEvent1(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedEvent1Async(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedEvent1Async(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Eventsv1EventList ListNamespacedEvent1(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedEvent1(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Eventsv1EventList> ListNamespacedEvent1Async(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedEvent1Async(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Eventsv1Event CreateNamespacedEvent1(global::k8s.Models.Eventsv1Event body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedEvent1(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Eventsv1Event> CreateNamespacedEvent1Async(global::k8s.Models.Eventsv1Event body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedEvent1Async(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedEvent1(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedEvent1(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedEvent1Async(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedEvent1Async(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Eventsv1Event ReadNamespacedEvent1(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedEvent1(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Eventsv1Event> ReadNamespacedEvent1Async(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedEvent1Async(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Eventsv1Event PatchNamespacedEvent1(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedEvent1(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Eventsv1Event> PatchNamespacedEvent1Async(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedEvent1Async(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Eventsv1Event ReplaceNamespacedEvent1(global::k8s.Models.Eventsv1Event body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedEvent1(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Eventsv1Event> ReplaceNamespacedEvent1Async(global::k8s.Models.Eventsv1Event body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedEvent1Async(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources24()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources24();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources24Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources24Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1EventList ListEventForAllNamespaces2(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListEventForAllNamespaces2(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1EventList> ListEventForAllNamespaces2Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListEventForAllNamespaces2Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedEvent2(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedEvent2(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedEvent2Async(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedEvent2Async(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1EventList ListNamespacedEvent2(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedEvent2(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1EventList> ListNamespacedEvent2Async(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedEvent2Async(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1Event CreateNamespacedEvent2(global::k8s.Models.V1beta1Event body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedEvent2(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1Event> CreateNamespacedEvent2Async(global::k8s.Models.V1beta1Event body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedEvent2Async(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedEvent2(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedEvent2(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedEvent2Async(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedEvent2Async(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1Event ReadNamespacedEvent2(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedEvent2(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1Event> ReadNamespacedEvent2Async(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedEvent2Async(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1Event PatchNamespacedEvent2(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedEvent2(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1Event> PatchNamespacedEvent2Async(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedEvent2Async(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1Event ReplaceNamespacedEvent2(global::k8s.Models.V1beta1Event body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedEvent2(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1Event> ReplaceNamespacedEvent2Async(global::k8s.Models.V1beta1Event body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedEvent2Async(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup12()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup12();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup12Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup12Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources25()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources25();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources25Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources25Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Extensionsv1beta1IngressList ListIngressForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListIngressForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Extensionsv1beta1IngressList> ListIngressForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListIngressForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedIngress(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedIngress(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedIngressAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedIngressAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Extensionsv1beta1IngressList ListNamespacedIngress(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedIngress(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Extensionsv1beta1IngressList> ListNamespacedIngressAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedIngressAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Extensionsv1beta1Ingress CreateNamespacedIngress(global::k8s.Models.Extensionsv1beta1Ingress body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedIngress(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Extensionsv1beta1Ingress> CreateNamespacedIngressAsync(global::k8s.Models.Extensionsv1beta1Ingress body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedIngressAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedIngress(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedIngress(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedIngressAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedIngressAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2alpha1CronJob ReplaceNamespacedCronJobStatus1(global::k8s.Models.V2alpha1CronJob body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedCronJobStatus1(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2alpha1CronJob> ReplaceNamespacedCronJobStatus1Async(global::k8s.Models.V2alpha1CronJob body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedCronJobStatus1Async(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup8()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup8();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup8Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup8Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources18()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources18();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources18Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources18Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionCertificateSigningRequest(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionCertificateSigningRequest(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionCertificateSigningRequestAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionCertificateSigningRequestAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CertificateSigningRequestList ListCertificateSigningRequest(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListCertificateSigningRequest(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CertificateSigningRequestList> ListCertificateSigningRequestAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCertificateSigningRequestAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CertificateSigningRequest CreateCertificateSigningRequest(global::k8s.Models.V1CertificateSigningRequest body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateCertificateSigningRequest(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CertificateSigningRequest> CreateCertificateSigningRequestAsync(global::k8s.Models.V1CertificateSigningRequest body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateCertificateSigningRequestAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCertificateSigningRequest(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCertificateSigningRequest(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCertificateSigningRequestAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCertificateSigningRequestAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CertificateSigningRequest ReadCertificateSigningRequest(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadCertificateSigningRequest(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CertificateSigningRequest> ReadCertificateSigningRequestAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCertificateSigningRequestAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CertificateSigningRequest PatchCertificateSigningRequest(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchCertificateSigningRequest(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CertificateSigningRequest> PatchCertificateSigningRequestAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCertificateSigningRequestAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CertificateSigningRequest ReplaceCertificateSigningRequest(global::k8s.Models.V1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceCertificateSigningRequest(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CertificateSigningRequest> ReplaceCertificateSigningRequestAsync(global::k8s.Models.V1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCertificateSigningRequestAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CertificateSigningRequest ReadCertificateSigningRequestApproval(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadCertificateSigningRequestApproval(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CertificateSigningRequest> ReadCertificateSigningRequestApprovalAsync(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCertificateSigningRequestApprovalAsync(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CertificateSigningRequest PatchCertificateSigningRequestApproval(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchCertificateSigningRequestApproval(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CertificateSigningRequest> PatchCertificateSigningRequestApprovalAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCertificateSigningRequestApprovalAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CertificateSigningRequest ReplaceCertificateSigningRequestApproval(global::k8s.Models.V1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceCertificateSigningRequestApproval(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CertificateSigningRequest> ReplaceCertificateSigningRequestApprovalAsync(global::k8s.Models.V1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCertificateSigningRequestApprovalAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CertificateSigningRequest ReadCertificateSigningRequestStatus(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadCertificateSigningRequestStatus(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CertificateSigningRequest> ReadCertificateSigningRequestStatusAsync(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCertificateSigningRequestStatusAsync(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CertificateSigningRequest PatchCertificateSigningRequestStatus(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchCertificateSigningRequestStatus(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CertificateSigningRequest> PatchCertificateSigningRequestStatusAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCertificateSigningRequestStatusAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CertificateSigningRequest ReplaceCertificateSigningRequestStatus(global::k8s.Models.V1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceCertificateSigningRequestStatus(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CertificateSigningRequest> ReplaceCertificateSigningRequestStatusAsync(global::k8s.Models.V1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCertificateSigningRequestStatusAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources19()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources19();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources19Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources19Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionCertificateSigningRequest1(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionCertificateSigningRequest1(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionCertificateSigningRequest1Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionCertificateSigningRequest1Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CertificateSigningRequestList ListCertificateSigningRequest1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListCertificateSigningRequest1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CertificateSigningRequestList> ListCertificateSigningRequest1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCertificateSigningRequest1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CertificateSigningRequest CreateCertificateSigningRequest1(global::k8s.Models.V1beta1CertificateSigningRequest body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateCertificateSigningRequest1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CertificateSigningRequest> CreateCertificateSigningRequest1Async(global::k8s.Models.V1beta1CertificateSigningRequest body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateCertificateSigningRequest1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCertificateSigningRequest1(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCertificateSigningRequest1(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCertificateSigningRequest1Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCertificateSigningRequest1Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CertificateSigningRequest ReadCertificateSigningRequest1(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadCertificateSigningRequest1(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CertificateSigningRequest> ReadCertificateSigningRequest1Async(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCertificateSigningRequest1Async(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CertificateSigningRequest PatchCertificateSigningRequest1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchCertificateSigningRequest1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CertificateSigningRequest> PatchCertificateSigningRequest1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCertificateSigningRequest1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CertificateSigningRequest ReplaceCertificateSigningRequest1(global::k8s.Models.V1beta1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceCertificateSigningRequest1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CertificateSigningRequest> ReplaceCertificateSigningRequest1Async(global::k8s.Models.V1beta1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCertificateSigningRequest1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CertificateSigningRequest ReadCertificateSigningRequestApproval1(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadCertificateSigningRequestApproval1(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CertificateSigningRequest> ReadCertificateSigningRequestApproval1Async(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCertificateSigningRequestApproval1Async(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CertificateSigningRequest PatchCertificateSigningRequestApproval1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchCertificateSigningRequestApproval1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CertificateSigningRequest> PatchCertificateSigningRequestApproval1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCertificateSigningRequestApproval1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CertificateSigningRequest ReplaceCertificateSigningRequestApproval1(global::k8s.Models.V1beta1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceCertificateSigningRequestApproval1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CertificateSigningRequest> ReplaceCertificateSigningRequestApproval1Async(global::k8s.Models.V1beta1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCertificateSigningRequestApproval1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CertificateSigningRequest ReadCertificateSigningRequestStatus1(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadCertificateSigningRequestStatus1(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CertificateSigningRequest> ReadCertificateSigningRequestStatus1Async(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCertificateSigningRequestStatus1Async(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CertificateSigningRequest PatchCertificateSigningRequestStatus1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchCertificateSigningRequestStatus1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CertificateSigningRequest> PatchCertificateSigningRequestStatus1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCertificateSigningRequestStatus1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CertificateSigningRequest ReplaceCertificateSigningRequestStatus1(global::k8s.Models.V1beta1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceCertificateSigningRequestStatus1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CertificateSigningRequest> ReplaceCertificateSigningRequestStatus1Async(global::k8s.Models.V1beta1CertificateSigningRequest body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCertificateSigningRequestStatus1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup9()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup9();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup9Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup9Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources20()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources20();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources20Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources20Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1LeaseList ListLeaseForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListLeaseForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1LeaseList> ListLeaseForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListLeaseForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedLease(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedLease(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedLeaseAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedLeaseAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1LeaseList ListNamespacedLease(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedLease(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1LeaseList> ListNamespacedLeaseAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedLeaseAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Lease CreateNamespacedLease(global::k8s.Models.V1Lease body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedLease(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Lease> CreateNamespacedLeaseAsync(global::k8s.Models.V1Lease body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedLeaseAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedLease(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedLease(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedLeaseAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedLeaseAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Lease ReadNamespacedLease(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedLease(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Lease> ReadNamespacedLeaseAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedLeaseAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Lease PatchNamespacedLease(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedLease(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Lease> PatchNamespacedLeaseAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedLeaseAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Lease ReplaceNamespacedLease(global::k8s.Models.V1Lease body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedLease(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Lease> ReplaceNamespacedLeaseAsync(global::k8s.Models.V1Lease body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedLeaseAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources21()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources21();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources21Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources21Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1LeaseList ListLeaseForAllNamespaces1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListLeaseForAllNamespaces1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1LeaseList> ListLeaseForAllNamespaces1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListLeaseForAllNamespaces1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedLease1(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedLease1(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedHorizontalPodAutoscaler2Async(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedHorizontalPodAutoscaler2Async(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2beta2HorizontalPodAutoscaler ReadNamespacedHorizontalPodAutoscaler2(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedHorizontalPodAutoscaler2(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2beta2HorizontalPodAutoscaler> ReadNamespacedHorizontalPodAutoscaler2Async(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedHorizontalPodAutoscaler2Async(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2beta2HorizontalPodAutoscaler PatchNamespacedHorizontalPodAutoscaler2(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedHorizontalPodAutoscaler2(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2beta2HorizontalPodAutoscaler> PatchNamespacedHorizontalPodAutoscaler2Async(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedHorizontalPodAutoscaler2Async(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2beta2HorizontalPodAutoscaler ReplaceNamespacedHorizontalPodAutoscaler2(global::k8s.Models.V2beta2HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedHorizontalPodAutoscaler2(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2beta2HorizontalPodAutoscaler> ReplaceNamespacedHorizontalPodAutoscaler2Async(global::k8s.Models.V2beta2HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedHorizontalPodAutoscaler2Async(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2beta2HorizontalPodAutoscaler ReadNamespacedHorizontalPodAutoscalerStatus2(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedHorizontalPodAutoscalerStatus2(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2beta2HorizontalPodAutoscaler> ReadNamespacedHorizontalPodAutoscalerStatus2Async(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedHorizontalPodAutoscalerStatus2Async(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2beta2HorizontalPodAutoscaler PatchNamespacedHorizontalPodAutoscalerStatus2(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedHorizontalPodAutoscalerStatus2(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2beta2HorizontalPodAutoscaler> PatchNamespacedHorizontalPodAutoscalerStatus2Async(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedHorizontalPodAutoscalerStatus2Async(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2beta2HorizontalPodAutoscaler ReplaceNamespacedHorizontalPodAutoscalerStatus2(global::k8s.Models.V2beta2HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedHorizontalPodAutoscalerStatus2(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2beta2HorizontalPodAutoscaler> ReplaceNamespacedHorizontalPodAutoscalerStatus2Async(global::k8s.Models.V2beta2HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedHorizontalPodAutoscalerStatus2Async(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup7()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup7();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup7Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup7Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources15()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources15();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources15Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources15Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1JobList ListJobForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListJobForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1JobList> ListJobForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListJobForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedJob(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedJob(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedJobAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedJobAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1JobList ListNamespacedJob(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedJob(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1JobList> ListNamespacedJobAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedJobAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Job CreateNamespacedJob(global::k8s.Models.V1Job body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedJob(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Job> CreateNamespacedJobAsync(global::k8s.Models.V1Job body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedJobAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedJob(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedJob(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedJobAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedJobAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Job ReadNamespacedJob(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedJob(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Job> ReadNamespacedJobAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedJobAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Job PatchNamespacedJob(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedJob(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Job> PatchNamespacedJobAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedJobAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Job ReplaceNamespacedJob(global::k8s.Models.V1Job body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedJob(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Job> ReplaceNamespacedJobAsync(global::k8s.Models.V1Job body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedJobAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Job ReadNamespacedJobStatus(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedJobStatus(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Job> ReadNamespacedJobStatusAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedJobStatusAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Job PatchNamespacedJobStatus(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedJobStatus(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Job> PatchNamespacedJobStatusAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedJobStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Job ReplaceNamespacedJobStatus(global::k8s.Models.V1Job body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedJobStatus(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Job> ReplaceNamespacedJobStatusAsync(global::k8s.Models.V1Job body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedJobStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources16()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources16();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources16Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources16Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CronJobList ListCronJobForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListCronJobForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CronJobList> ListCronJobForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCronJobForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedCronJob(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedCronJob(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedCronJobAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedCronJobAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CronJobList ListNamespacedCronJob(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedCronJob(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CronJobList> ListNamespacedCronJobAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedCronJobAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CronJob CreateNamespacedCronJob(global::k8s.Models.V1beta1CronJob body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedCronJob(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CronJob> CreateNamespacedCronJobAsync(global::k8s.Models.V1beta1CronJob body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedCronJobAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedCronJob(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedCronJob(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedCronJobAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedCronJobAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CronJob ReadNamespacedCronJob(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedCronJob(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CronJob> ReadNamespacedCronJobAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedCronJobAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CronJob PatchNamespacedCronJob(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedCronJob(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CronJob> PatchNamespacedCronJobAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedCronJobAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CronJob ReplaceNamespacedCronJob(global::k8s.Models.V1beta1CronJob body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedCronJob(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CronJob> ReplaceNamespacedCronJobAsync(global::k8s.Models.V1beta1CronJob body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedCronJobAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CronJob ReadNamespacedCronJobStatus(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedCronJobStatus(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CronJob> ReadNamespacedCronJobStatusAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedCronJobStatusAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CronJob PatchNamespacedCronJobStatus(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedCronJobStatus(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CronJob> PatchNamespacedCronJobStatusAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedCronJobStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CronJob ReplaceNamespacedCronJobStatus(global::k8s.Models.V1beta1CronJob body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedCronJobStatus(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CronJob> ReplaceNamespacedCronJobStatusAsync(global::k8s.Models.V1beta1CronJob body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedCronJobStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources17()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources17();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources17Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources17Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2alpha1CronJobList ListCronJobForAllNamespaces1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListCronJobForAllNamespaces1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2alpha1CronJobList> ListCronJobForAllNamespaces1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCronJobForAllNamespaces1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedCronJob1(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedCronJob1(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedCronJob1Async(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedCronJob1Async(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2alpha1CronJobList ListNamespacedCronJob1(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedCronJob1(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2alpha1CronJobList> ListNamespacedCronJob1Async(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedCronJob1Async(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2alpha1CronJob CreateNamespacedCronJob1(global::k8s.Models.V2alpha1CronJob body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedCronJob1(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2alpha1CronJob> CreateNamespacedCronJob1Async(global::k8s.Models.V2alpha1CronJob body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedCronJob1Async(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedCronJob1(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedCronJob1(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedCronJob1Async(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedCronJob1Async(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2alpha1CronJob ReadNamespacedCronJob1(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedCronJob1(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2alpha1CronJob> ReadNamespacedCronJob1Async(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedCronJob1Async(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2alpha1CronJob PatchNamespacedCronJob1(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedCronJob1(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2alpha1CronJob> PatchNamespacedCronJob1Async(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedCronJob1Async(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2alpha1CronJob ReplaceNamespacedCronJob1(global::k8s.Models.V2alpha1CronJob body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedCronJob1(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2alpha1CronJob> ReplaceNamespacedCronJob1Async(global::k8s.Models.V2alpha1CronJob body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedCronJob1Async(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2alpha1CronJob ReadNamespacedCronJobStatus1(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedCronJobStatus1(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2alpha1CronJob> ReadNamespacedCronJobStatus1Async(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedCronJobStatus1Async(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2alpha1CronJob PatchNamespacedCronJobStatus1(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedCronJobStatus1(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2alpha1CronJob> PatchNamespacedCronJobStatus1Async(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedCronJobStatus1Async(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1TokenReview CreateTokenReview1(global::k8s.Models.V1beta1TokenReview body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateTokenReview1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1TokenReview> CreateTokenReview1Async(global::k8s.Models.V1beta1TokenReview body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateTokenReview1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup5()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup5();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup5Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup5Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources10()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources10();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources10Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources10Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1LocalSubjectAccessReview CreateNamespacedLocalSubjectAccessReview(global::k8s.Models.V1LocalSubjectAccessReview body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedLocalSubjectAccessReview(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1LocalSubjectAccessReview> CreateNamespacedLocalSubjectAccessReviewAsync(global::k8s.Models.V1LocalSubjectAccessReview body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedLocalSubjectAccessReviewAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1SelfSubjectAccessReview CreateSelfSubjectAccessReview(global::k8s.Models.V1SelfSubjectAccessReview body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateSelfSubjectAccessReview(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1SelfSubjectAccessReview> CreateSelfSubjectAccessReviewAsync(global::k8s.Models.V1SelfSubjectAccessReview body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateSelfSubjectAccessReviewAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1SelfSubjectRulesReview CreateSelfSubjectRulesReview(global::k8s.Models.V1SelfSubjectRulesReview body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateSelfSubjectRulesReview(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1SelfSubjectRulesReview> CreateSelfSubjectRulesReviewAsync(global::k8s.Models.V1SelfSubjectRulesReview body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateSelfSubjectRulesReviewAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1SubjectAccessReview CreateSubjectAccessReview(global::k8s.Models.V1SubjectAccessReview body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateSubjectAccessReview(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1SubjectAccessReview> CreateSubjectAccessReviewAsync(global::k8s.Models.V1SubjectAccessReview body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateSubjectAccessReviewAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources11()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources11();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources11Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources11Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1LocalSubjectAccessReview CreateNamespacedLocalSubjectAccessReview1(global::k8s.Models.V1beta1LocalSubjectAccessReview body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedLocalSubjectAccessReview1(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1LocalSubjectAccessReview> CreateNamespacedLocalSubjectAccessReview1Async(global::k8s.Models.V1beta1LocalSubjectAccessReview body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedLocalSubjectAccessReview1Async(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1SelfSubjectAccessReview CreateSelfSubjectAccessReview1(global::k8s.Models.V1beta1SelfSubjectAccessReview body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateSelfSubjectAccessReview1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1SelfSubjectAccessReview> CreateSelfSubjectAccessReview1Async(global::k8s.Models.V1beta1SelfSubjectAccessReview body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateSelfSubjectAccessReview1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1SelfSubjectRulesReview CreateSelfSubjectRulesReview1(global::k8s.Models.V1beta1SelfSubjectRulesReview body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateSelfSubjectRulesReview1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1SelfSubjectRulesReview> CreateSelfSubjectRulesReview1Async(global::k8s.Models.V1beta1SelfSubjectRulesReview body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateSelfSubjectRulesReview1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1SubjectAccessReview CreateSubjectAccessReview1(global::k8s.Models.V1beta1SubjectAccessReview body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateSubjectAccessReview1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1SubjectAccessReview> CreateSubjectAccessReview1Async(global::k8s.Models.V1beta1SubjectAccessReview body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateSubjectAccessReview1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup6()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup6();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup6Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup6Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources12()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources12();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources12Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources12Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1HorizontalPodAutoscalerList ListHorizontalPodAutoscalerForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListHorizontalPodAutoscalerForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1HorizontalPodAutoscalerList> ListHorizontalPodAutoscalerForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListHorizontalPodAutoscalerForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedHorizontalPodAutoscaler(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedHorizontalPodAutoscaler(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedHorizontalPodAutoscalerAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedHorizontalPodAutoscalerAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1HorizontalPodAutoscalerList ListNamespacedHorizontalPodAutoscaler(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedHorizontalPodAutoscaler(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1HorizontalPodAutoscalerList> ListNamespacedHorizontalPodAutoscalerAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedHorizontalPodAutoscalerAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1HorizontalPodAutoscaler CreateNamespacedHorizontalPodAutoscaler(global::k8s.Models.V1HorizontalPodAutoscaler body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedHorizontalPodAutoscaler(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1HorizontalPodAutoscaler> CreateNamespacedHorizontalPodAutoscalerAsync(global::k8s.Models.V1HorizontalPodAutoscaler body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedHorizontalPodAutoscalerAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedHorizontalPodAutoscaler(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedHorizontalPodAutoscaler(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedHorizontalPodAutoscalerAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedHorizontalPodAutoscalerAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1HorizontalPodAutoscaler ReadNamespacedHorizontalPodAutoscaler(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedHorizontalPodAutoscaler(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1HorizontalPodAutoscaler> ReadNamespacedHorizontalPodAutoscalerAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedHorizontalPodAutoscalerAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1HorizontalPodAutoscaler PatchNamespacedHorizontalPodAutoscaler(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedHorizontalPodAutoscaler(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1HorizontalPodAutoscaler> PatchNamespacedHorizontalPodAutoscalerAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedHorizontalPodAutoscalerAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1HorizontalPodAutoscaler ReplaceNamespacedHorizontalPodAutoscaler(global::k8s.Models.V1HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedHorizontalPodAutoscaler(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1HorizontalPodAutoscaler> ReplaceNamespacedHorizontalPodAutoscalerAsync(global::k8s.Models.V1HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedHorizontalPodAutoscalerAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1HorizontalPodAutoscaler ReadNamespacedHorizontalPodAutoscalerStatus(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedHorizontalPodAutoscalerStatus(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1HorizontalPodAutoscaler> ReadNamespacedHorizontalPodAutoscalerStatusAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedHorizontalPodAutoscalerStatusAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1HorizontalPodAutoscaler PatchNamespacedHorizontalPodAutoscalerStatus(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedHorizontalPodAutoscalerStatus(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1HorizontalPodAutoscaler> PatchNamespacedHorizontalPodAutoscalerStatusAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedHorizontalPodAutoscalerStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1HorizontalPodAutoscaler ReplaceNamespacedHorizontalPodAutoscalerStatus(global::k8s.Models.V1HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedHorizontalPodAutoscalerStatus(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1HorizontalPodAutoscaler> ReplaceNamespacedHorizontalPodAutoscalerStatusAsync(global::k8s.Models.V1HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedHorizontalPodAutoscalerStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources13()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources13();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources13Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources13Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2beta1HorizontalPodAutoscalerList ListHorizontalPodAutoscalerForAllNamespaces1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListHorizontalPodAutoscalerForAllNamespaces1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2beta1HorizontalPodAutoscalerList> ListHorizontalPodAutoscalerForAllNamespaces1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListHorizontalPodAutoscalerForAllNamespaces1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedHorizontalPodAutoscaler1(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedHorizontalPodAutoscaler1(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedHorizontalPodAutoscaler1Async(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedHorizontalPodAutoscaler1Async(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2beta1HorizontalPodAutoscalerList ListNamespacedHorizontalPodAutoscaler1(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedHorizontalPodAutoscaler1(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2beta1HorizontalPodAutoscalerList> ListNamespacedHorizontalPodAutoscaler1Async(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedHorizontalPodAutoscaler1Async(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2beta1HorizontalPodAutoscaler CreateNamespacedHorizontalPodAutoscaler1(global::k8s.Models.V2beta1HorizontalPodAutoscaler body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedHorizontalPodAutoscaler1(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2beta1HorizontalPodAutoscaler> CreateNamespacedHorizontalPodAutoscaler1Async(global::k8s.Models.V2beta1HorizontalPodAutoscaler body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedHorizontalPodAutoscaler1Async(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedHorizontalPodAutoscaler1(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedHorizontalPodAutoscaler1(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedHorizontalPodAutoscaler1Async(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedHorizontalPodAutoscaler1Async(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2beta1HorizontalPodAutoscaler ReadNamespacedHorizontalPodAutoscaler1(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedHorizontalPodAutoscaler1(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2beta1HorizontalPodAutoscaler> ReadNamespacedHorizontalPodAutoscaler1Async(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedHorizontalPodAutoscaler1Async(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2beta1HorizontalPodAutoscaler PatchNamespacedHorizontalPodAutoscaler1(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedHorizontalPodAutoscaler1(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2beta1HorizontalPodAutoscaler> PatchNamespacedHorizontalPodAutoscaler1Async(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedHorizontalPodAutoscaler1Async(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2beta1HorizontalPodAutoscaler ReplaceNamespacedHorizontalPodAutoscaler1(global::k8s.Models.V2beta1HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedHorizontalPodAutoscaler1(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2beta1HorizontalPodAutoscaler> ReplaceNamespacedHorizontalPodAutoscaler1Async(global::k8s.Models.V2beta1HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedHorizontalPodAutoscaler1Async(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2beta1HorizontalPodAutoscaler ReadNamespacedHorizontalPodAutoscalerStatus1(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedHorizontalPodAutoscalerStatus1(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2beta1HorizontalPodAutoscaler> ReadNamespacedHorizontalPodAutoscalerStatus1Async(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedHorizontalPodAutoscalerStatus1Async(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2beta1HorizontalPodAutoscaler PatchNamespacedHorizontalPodAutoscalerStatus1(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedHorizontalPodAutoscalerStatus1(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2beta1HorizontalPodAutoscaler> PatchNamespacedHorizontalPodAutoscalerStatus1Async(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedHorizontalPodAutoscalerStatus1Async(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2beta1HorizontalPodAutoscaler ReplaceNamespacedHorizontalPodAutoscalerStatus1(global::k8s.Models.V2beta1HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedHorizontalPodAutoscalerStatus1(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2beta1HorizontalPodAutoscaler> ReplaceNamespacedHorizontalPodAutoscalerStatus1Async(global::k8s.Models.V2beta1HorizontalPodAutoscaler body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedHorizontalPodAutoscalerStatus1Async(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources14()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources14();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources14Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources14Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2beta2HorizontalPodAutoscalerList ListHorizontalPodAutoscalerForAllNamespaces2(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListHorizontalPodAutoscalerForAllNamespaces2(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2beta2HorizontalPodAutoscalerList> ListHorizontalPodAutoscalerForAllNamespaces2Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListHorizontalPodAutoscalerForAllNamespaces2Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedHorizontalPodAutoscaler2(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedHorizontalPodAutoscaler2(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedHorizontalPodAutoscaler2Async(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedHorizontalPodAutoscaler2Async(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2beta2HorizontalPodAutoscalerList ListNamespacedHorizontalPodAutoscaler2(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedHorizontalPodAutoscaler2(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2beta2HorizontalPodAutoscalerList> ListNamespacedHorizontalPodAutoscaler2Async(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedHorizontalPodAutoscaler2Async(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V2beta2HorizontalPodAutoscaler CreateNamespacedHorizontalPodAutoscaler2(global::k8s.Models.V2beta2HorizontalPodAutoscaler body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedHorizontalPodAutoscaler2(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V2beta2HorizontalPodAutoscaler> CreateNamespacedHorizontalPodAutoscaler2Async(global::k8s.Models.V2beta2HorizontalPodAutoscaler body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedHorizontalPodAutoscaler2Async(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedHorizontalPodAutoscaler2(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedHorizontalPodAutoscaler2(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Deployment> CreateNamespacedDeploymentAsync(global::k8s.Models.V1Deployment body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedDeploymentAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedDeployment(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedDeployment(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedDeploymentAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedDeploymentAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Deployment ReadNamespacedDeployment(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedDeployment(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Deployment> ReadNamespacedDeploymentAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedDeploymentAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Deployment PatchNamespacedDeployment(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedDeployment(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Deployment> PatchNamespacedDeploymentAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedDeploymentAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Deployment ReplaceNamespacedDeployment(global::k8s.Models.V1Deployment body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedDeployment(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Deployment> ReplaceNamespacedDeploymentAsync(global::k8s.Models.V1Deployment body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedDeploymentAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Scale ReadNamespacedDeploymentScale(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedDeploymentScale(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Scale> ReadNamespacedDeploymentScaleAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedDeploymentScaleAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Scale PatchNamespacedDeploymentScale(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedDeploymentScale(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Scale> PatchNamespacedDeploymentScaleAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedDeploymentScaleAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Scale ReplaceNamespacedDeploymentScale(global::k8s.Models.V1Scale body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedDeploymentScale(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Scale> ReplaceNamespacedDeploymentScaleAsync(global::k8s.Models.V1Scale body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedDeploymentScaleAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Deployment ReadNamespacedDeploymentStatus(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedDeploymentStatus(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Deployment> ReadNamespacedDeploymentStatusAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedDeploymentStatusAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Deployment PatchNamespacedDeploymentStatus(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedDeploymentStatus(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Deployment> PatchNamespacedDeploymentStatusAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedDeploymentStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Deployment ReplaceNamespacedDeploymentStatus(global::k8s.Models.V1Deployment body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedDeploymentStatus(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Deployment> ReplaceNamespacedDeploymentStatusAsync(global::k8s.Models.V1Deployment body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedDeploymentStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedReplicaSet(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedReplicaSet(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedReplicaSetAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedReplicaSetAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ReplicaSetList ListNamespacedReplicaSet(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedReplicaSet(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ReplicaSetList> ListNamespacedReplicaSetAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedReplicaSetAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ReplicaSet CreateNamespacedReplicaSet(global::k8s.Models.V1ReplicaSet body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedReplicaSet(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ReplicaSet> CreateNamespacedReplicaSetAsync(global::k8s.Models.V1ReplicaSet body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedReplicaSetAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedReplicaSet(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedReplicaSet(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedReplicaSetAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedReplicaSetAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ReplicaSet ReadNamespacedReplicaSet(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedReplicaSet(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ReplicaSet> ReadNamespacedReplicaSetAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedReplicaSetAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ReplicaSet PatchNamespacedReplicaSet(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedReplicaSet(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ReplicaSet> PatchNamespacedReplicaSetAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedReplicaSetAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ReplicaSet ReplaceNamespacedReplicaSet(global::k8s.Models.V1ReplicaSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedReplicaSet(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ReplicaSet> ReplaceNamespacedReplicaSetAsync(global::k8s.Models.V1ReplicaSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedReplicaSetAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Scale ReadNamespacedReplicaSetScale(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedReplicaSetScale(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Scale> ReadNamespacedReplicaSetScaleAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedReplicaSetScaleAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Scale PatchNamespacedReplicaSetScale(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedReplicaSetScale(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Scale> PatchNamespacedReplicaSetScaleAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedReplicaSetScaleAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Scale ReplaceNamespacedReplicaSetScale(global::k8s.Models.V1Scale body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedReplicaSetScale(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Scale> ReplaceNamespacedReplicaSetScaleAsync(global::k8s.Models.V1Scale body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedReplicaSetScaleAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ReplicaSet ReadNamespacedReplicaSetStatus(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedReplicaSetStatus(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ReplicaSet> ReadNamespacedReplicaSetStatusAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedReplicaSetStatusAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ReplicaSet PatchNamespacedReplicaSetStatus(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedReplicaSetStatus(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ReplicaSet> PatchNamespacedReplicaSetStatusAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedReplicaSetStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ReplicaSet ReplaceNamespacedReplicaSetStatus(global::k8s.Models.V1ReplicaSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedReplicaSetStatus(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ReplicaSet> ReplaceNamespacedReplicaSetStatusAsync(global::k8s.Models.V1ReplicaSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedReplicaSetStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedStatefulSet(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedStatefulSet(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedStatefulSetAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedStatefulSetAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1StatefulSetList ListNamespacedStatefulSet(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedStatefulSet(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1StatefulSetList> ListNamespacedStatefulSetAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedStatefulSetAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1StatefulSet CreateNamespacedStatefulSet(global::k8s.Models.V1StatefulSet body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedStatefulSet(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1StatefulSet> CreateNamespacedStatefulSetAsync(global::k8s.Models.V1StatefulSet body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedStatefulSetAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedStatefulSet(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedStatefulSet(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedStatefulSetAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedStatefulSetAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1StatefulSet ReadNamespacedStatefulSet(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedStatefulSet(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1StatefulSet> ReadNamespacedStatefulSetAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedStatefulSetAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1StatefulSet PatchNamespacedStatefulSet(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedStatefulSet(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1StatefulSet> PatchNamespacedStatefulSetAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedStatefulSetAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1StatefulSet ReplaceNamespacedStatefulSet(global::k8s.Models.V1StatefulSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedStatefulSet(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1StatefulSet> ReplaceNamespacedStatefulSetAsync(global::k8s.Models.V1StatefulSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedStatefulSetAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Scale ReadNamespacedStatefulSetScale(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedStatefulSetScale(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Scale> ReadNamespacedStatefulSetScaleAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedStatefulSetScaleAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Scale PatchNamespacedStatefulSetScale(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedStatefulSetScale(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Scale> PatchNamespacedStatefulSetScaleAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedStatefulSetScaleAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Scale ReplaceNamespacedStatefulSetScale(global::k8s.Models.V1Scale body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedStatefulSetScale(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Scale> ReplaceNamespacedStatefulSetScaleAsync(global::k8s.Models.V1Scale body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedStatefulSetScaleAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1StatefulSet ReadNamespacedStatefulSetStatus(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedStatefulSetStatus(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1StatefulSet> ReadNamespacedStatefulSetStatusAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedStatefulSetStatusAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1StatefulSet PatchNamespacedStatefulSetStatus(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedStatefulSetStatus(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1StatefulSet> PatchNamespacedStatefulSetStatusAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedStatefulSetStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1StatefulSet ReplaceNamespacedStatefulSetStatus(global::k8s.Models.V1StatefulSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedStatefulSetStatus(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1StatefulSet> ReplaceNamespacedStatefulSetStatusAsync(global::k8s.Models.V1StatefulSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedStatefulSetStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ReplicaSetList ListReplicaSetForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListReplicaSetForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ReplicaSetList> ListReplicaSetForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListReplicaSetForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1StatefulSetList ListStatefulSetForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListStatefulSetForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1StatefulSetList> ListStatefulSetForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListStatefulSetForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup4()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup4();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup4Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup4Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources8()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources8();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources8Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources8Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1TokenReview CreateTokenReview(global::k8s.Models.V1TokenReview body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateTokenReview(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1TokenReview> CreateTokenReviewAsync(global::k8s.Models.V1TokenReview body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateTokenReviewAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources9()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources9();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources9Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources9Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteAPIService(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteAPIService(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteAPIServiceAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteAPIServiceAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIService ReadAPIService(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadAPIService(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIService> ReadAPIServiceAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadAPIServiceAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIService PatchAPIService(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchAPIService(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIService> PatchAPIServiceAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchAPIServiceAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIService ReplaceAPIService(global::k8s.Models.V1APIService body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceAPIService(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIService> ReplaceAPIServiceAsync(global::k8s.Models.V1APIService body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceAPIServiceAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIService ReadAPIServiceStatus(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadAPIServiceStatus(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIService> ReadAPIServiceStatusAsync(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadAPIServiceStatusAsync(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIService PatchAPIServiceStatus(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchAPIServiceStatus(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIService> PatchAPIServiceStatusAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchAPIServiceStatusAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIService ReplaceAPIServiceStatus(global::k8s.Models.V1APIService body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceAPIServiceStatus(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIService> ReplaceAPIServiceStatusAsync(global::k8s.Models.V1APIService body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceAPIServiceStatusAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources6()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources6();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources6Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources6Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionAPIService1(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionAPIService1(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionAPIService1Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionAPIService1Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1APIServiceList ListAPIService1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListAPIService1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1APIServiceList> ListAPIService1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListAPIService1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1APIService CreateAPIService1(global::k8s.Models.V1beta1APIService body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateAPIService1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1APIService> CreateAPIService1Async(global::k8s.Models.V1beta1APIService body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateAPIService1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteAPIService1(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteAPIService1(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteAPIService1Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteAPIService1Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1APIService ReadAPIService1(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadAPIService1(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1APIService> ReadAPIService1Async(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadAPIService1Async(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1APIService PatchAPIService1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchAPIService1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1APIService> PatchAPIService1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchAPIService1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1APIService ReplaceAPIService1(global::k8s.Models.V1beta1APIService body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceAPIService1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1APIService> ReplaceAPIService1Async(global::k8s.Models.V1beta1APIService body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceAPIService1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1APIService ReadAPIServiceStatus1(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadAPIServiceStatus1(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1APIService> ReadAPIServiceStatus1Async(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadAPIServiceStatus1Async(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1APIService PatchAPIServiceStatus1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchAPIServiceStatus1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1APIService> PatchAPIServiceStatus1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchAPIServiceStatus1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1APIService ReplaceAPIServiceStatus1(global::k8s.Models.V1beta1APIService body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceAPIServiceStatus1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1APIService> ReplaceAPIServiceStatus1Async(global::k8s.Models.V1beta1APIService body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceAPIServiceStatus1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup3()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup3();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup3Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup3Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources7()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources7();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources7Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources7Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ControllerRevisionList ListControllerRevisionForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListControllerRevisionForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ControllerRevisionList> ListControllerRevisionForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListControllerRevisionForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1DaemonSetList ListDaemonSetForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListDaemonSetForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1DaemonSetList> ListDaemonSetForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListDaemonSetForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1DeploymentList ListDeploymentForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListDeploymentForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1DeploymentList> ListDeploymentForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListDeploymentForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedControllerRevision(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedControllerRevision(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedControllerRevisionAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedControllerRevisionAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ControllerRevisionList ListNamespacedControllerRevision(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedControllerRevision(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ControllerRevisionList> ListNamespacedControllerRevisionAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedControllerRevisionAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ControllerRevision CreateNamespacedControllerRevision(global::k8s.Models.V1ControllerRevision body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedControllerRevision(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ControllerRevision> CreateNamespacedControllerRevisionAsync(global::k8s.Models.V1ControllerRevision body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedControllerRevisionAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedControllerRevision(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedControllerRevision(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedControllerRevisionAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedControllerRevisionAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ControllerRevision ReadNamespacedControllerRevision(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedControllerRevision(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ControllerRevision> ReadNamespacedControllerRevisionAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedControllerRevisionAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ControllerRevision PatchNamespacedControllerRevision(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedControllerRevision(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ControllerRevision> PatchNamespacedControllerRevisionAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedControllerRevisionAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ControllerRevision ReplaceNamespacedControllerRevision(global::k8s.Models.V1ControllerRevision body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedControllerRevision(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ControllerRevision> ReplaceNamespacedControllerRevisionAsync(global::k8s.Models.V1ControllerRevision body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedControllerRevisionAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedDaemonSet(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedDaemonSet(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedDaemonSetAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedDaemonSetAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1DaemonSetList ListNamespacedDaemonSet(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedDaemonSet(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1DaemonSetList> ListNamespacedDaemonSetAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedDaemonSetAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1DaemonSet CreateNamespacedDaemonSet(global::k8s.Models.V1DaemonSet body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedDaemonSet(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1DaemonSet> CreateNamespacedDaemonSetAsync(global::k8s.Models.V1DaemonSet body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedDaemonSetAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedDaemonSet(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedDaemonSet(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedDaemonSetAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedDaemonSetAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1DaemonSet ReadNamespacedDaemonSet(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedDaemonSet(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1DaemonSet> ReadNamespacedDaemonSetAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedDaemonSetAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1DaemonSet PatchNamespacedDaemonSet(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedDaemonSet(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1DaemonSet> PatchNamespacedDaemonSetAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedDaemonSetAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1DaemonSet ReplaceNamespacedDaemonSet(global::k8s.Models.V1DaemonSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedDaemonSet(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1DaemonSet> ReplaceNamespacedDaemonSetAsync(global::k8s.Models.V1DaemonSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedDaemonSetAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1DaemonSet ReadNamespacedDaemonSetStatus(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedDaemonSetStatus(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1DaemonSet> ReadNamespacedDaemonSetStatusAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedDaemonSetStatusAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1DaemonSet PatchNamespacedDaemonSetStatus(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedDaemonSetStatus(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1DaemonSet> PatchNamespacedDaemonSetStatusAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedDaemonSetStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1DaemonSet ReplaceNamespacedDaemonSetStatus(global::k8s.Models.V1DaemonSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedDaemonSetStatus(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1DaemonSet> ReplaceNamespacedDaemonSetStatusAsync(global::k8s.Models.V1DaemonSet body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedDaemonSetStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedDeployment(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedDeployment(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedDeploymentAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedDeploymentAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1DeploymentList ListNamespacedDeployment(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedDeployment(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1DeploymentList> ListNamespacedDeploymentAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedDeploymentAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Deployment CreateNamespacedDeployment(global::k8s.Models.V1Deployment body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedDeployment(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources2Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources2Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionMutatingWebhookConfiguration1(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionMutatingWebhookConfiguration1(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionMutatingWebhookConfiguration1Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionMutatingWebhookConfiguration1Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1MutatingWebhookConfigurationList ListMutatingWebhookConfiguration1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListMutatingWebhookConfiguration1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1MutatingWebhookConfigurationList> ListMutatingWebhookConfiguration1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListMutatingWebhookConfiguration1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1MutatingWebhookConfiguration CreateMutatingWebhookConfiguration1(global::k8s.Models.V1beta1MutatingWebhookConfiguration body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateMutatingWebhookConfiguration1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1MutatingWebhookConfiguration> CreateMutatingWebhookConfiguration1Async(global::k8s.Models.V1beta1MutatingWebhookConfiguration body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateMutatingWebhookConfiguration1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteMutatingWebhookConfiguration1(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteMutatingWebhookConfiguration1(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteMutatingWebhookConfiguration1Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteMutatingWebhookConfiguration1Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1MutatingWebhookConfiguration ReadMutatingWebhookConfiguration1(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadMutatingWebhookConfiguration1(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1MutatingWebhookConfiguration> ReadMutatingWebhookConfiguration1Async(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadMutatingWebhookConfiguration1Async(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1MutatingWebhookConfiguration PatchMutatingWebhookConfiguration1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchMutatingWebhookConfiguration1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1MutatingWebhookConfiguration> PatchMutatingWebhookConfiguration1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchMutatingWebhookConfiguration1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1MutatingWebhookConfiguration ReplaceMutatingWebhookConfiguration1(global::k8s.Models.V1beta1MutatingWebhookConfiguration body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceMutatingWebhookConfiguration1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1MutatingWebhookConfiguration> ReplaceMutatingWebhookConfiguration1Async(global::k8s.Models.V1beta1MutatingWebhookConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceMutatingWebhookConfiguration1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionValidatingWebhookConfiguration1(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionValidatingWebhookConfiguration1(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionValidatingWebhookConfiguration1Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionValidatingWebhookConfiguration1Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1ValidatingWebhookConfigurationList ListValidatingWebhookConfiguration1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListValidatingWebhookConfiguration1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1ValidatingWebhookConfigurationList> ListValidatingWebhookConfiguration1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListValidatingWebhookConfiguration1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1ValidatingWebhookConfiguration CreateValidatingWebhookConfiguration1(global::k8s.Models.V1beta1ValidatingWebhookConfiguration body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateValidatingWebhookConfiguration1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1ValidatingWebhookConfiguration> CreateValidatingWebhookConfiguration1Async(global::k8s.Models.V1beta1ValidatingWebhookConfiguration body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateValidatingWebhookConfiguration1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteValidatingWebhookConfiguration1(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteValidatingWebhookConfiguration1(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteValidatingWebhookConfiguration1Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteValidatingWebhookConfiguration1Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1ValidatingWebhookConfiguration ReadValidatingWebhookConfiguration1(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadValidatingWebhookConfiguration1(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1ValidatingWebhookConfiguration> ReadValidatingWebhookConfiguration1Async(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadValidatingWebhookConfiguration1Async(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1ValidatingWebhookConfiguration PatchValidatingWebhookConfiguration1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchValidatingWebhookConfiguration1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1ValidatingWebhookConfiguration> PatchValidatingWebhookConfiguration1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchValidatingWebhookConfiguration1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1ValidatingWebhookConfiguration ReplaceValidatingWebhookConfiguration1(global::k8s.Models.V1beta1ValidatingWebhookConfiguration body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceValidatingWebhookConfiguration1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1ValidatingWebhookConfiguration> ReplaceValidatingWebhookConfiguration1Async(global::k8s.Models.V1beta1ValidatingWebhookConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceValidatingWebhookConfiguration1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup1()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup1();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup1Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup1Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources3()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources3();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources3Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources3Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionCustomResourceDefinition(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionCustomResourceDefinition(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionCustomResourceDefinitionAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionCustomResourceDefinitionAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CustomResourceDefinitionList ListCustomResourceDefinition(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListCustomResourceDefinition(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CustomResourceDefinitionList> ListCustomResourceDefinitionAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCustomResourceDefinitionAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CustomResourceDefinition CreateCustomResourceDefinition(global::k8s.Models.V1CustomResourceDefinition body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateCustomResourceDefinition(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CustomResourceDefinition> CreateCustomResourceDefinitionAsync(global::k8s.Models.V1CustomResourceDefinition body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateCustomResourceDefinitionAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCustomResourceDefinition(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCustomResourceDefinition(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCustomResourceDefinitionAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCustomResourceDefinitionAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CustomResourceDefinition ReadCustomResourceDefinition(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadCustomResourceDefinition(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CustomResourceDefinition> ReadCustomResourceDefinitionAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCustomResourceDefinitionAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CustomResourceDefinition PatchCustomResourceDefinition(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchCustomResourceDefinition(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CustomResourceDefinition> PatchCustomResourceDefinitionAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCustomResourceDefinitionAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CustomResourceDefinition ReplaceCustomResourceDefinition(global::k8s.Models.V1CustomResourceDefinition body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceCustomResourceDefinition(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CustomResourceDefinition> ReplaceCustomResourceDefinitionAsync(global::k8s.Models.V1CustomResourceDefinition body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCustomResourceDefinitionAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CustomResourceDefinition ReadCustomResourceDefinitionStatus(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadCustomResourceDefinitionStatus(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CustomResourceDefinition> ReadCustomResourceDefinitionStatusAsync(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCustomResourceDefinitionStatusAsync(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CustomResourceDefinition PatchCustomResourceDefinitionStatus(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchCustomResourceDefinitionStatus(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CustomResourceDefinition> PatchCustomResourceDefinitionStatusAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCustomResourceDefinitionStatusAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1CustomResourceDefinition ReplaceCustomResourceDefinitionStatus(global::k8s.Models.V1CustomResourceDefinition body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceCustomResourceDefinitionStatus(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1CustomResourceDefinition> ReplaceCustomResourceDefinitionStatusAsync(global::k8s.Models.V1CustomResourceDefinition body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCustomResourceDefinitionStatusAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources4()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources4();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources4Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources4Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionCustomResourceDefinition1(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionCustomResourceDefinition1(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionCustomResourceDefinition1Async(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionCustomResourceDefinition1Async(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CustomResourceDefinitionList ListCustomResourceDefinition1(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListCustomResourceDefinition1(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CustomResourceDefinitionList> ListCustomResourceDefinition1Async(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListCustomResourceDefinition1Async(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CustomResourceDefinition CreateCustomResourceDefinition1(global::k8s.Models.V1beta1CustomResourceDefinition body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateCustomResourceDefinition1(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CustomResourceDefinition> CreateCustomResourceDefinition1Async(global::k8s.Models.V1beta1CustomResourceDefinition body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateCustomResourceDefinition1Async(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCustomResourceDefinition1(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCustomResourceDefinition1(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCustomResourceDefinition1Async(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCustomResourceDefinition1Async(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CustomResourceDefinition ReadCustomResourceDefinition1(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadCustomResourceDefinition1(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CustomResourceDefinition> ReadCustomResourceDefinition1Async(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCustomResourceDefinition1Async(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CustomResourceDefinition PatchCustomResourceDefinition1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchCustomResourceDefinition1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CustomResourceDefinition> PatchCustomResourceDefinition1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCustomResourceDefinition1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CustomResourceDefinition ReplaceCustomResourceDefinition1(global::k8s.Models.V1beta1CustomResourceDefinition body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceCustomResourceDefinition1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CustomResourceDefinition> ReplaceCustomResourceDefinition1Async(global::k8s.Models.V1beta1CustomResourceDefinition body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCustomResourceDefinition1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CustomResourceDefinition ReadCustomResourceDefinitionStatus1(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadCustomResourceDefinitionStatus1(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CustomResourceDefinition> ReadCustomResourceDefinitionStatus1Async(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadCustomResourceDefinitionStatus1Async(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CustomResourceDefinition PatchCustomResourceDefinitionStatus1(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchCustomResourceDefinitionStatus1(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CustomResourceDefinition> PatchCustomResourceDefinitionStatus1Async(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchCustomResourceDefinitionStatus1Async(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1CustomResourceDefinition ReplaceCustomResourceDefinitionStatus1(global::k8s.Models.V1beta1CustomResourceDefinition body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceCustomResourceDefinitionStatus1(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1CustomResourceDefinition> ReplaceCustomResourceDefinitionStatus1Async(global::k8s.Models.V1beta1CustomResourceDefinition body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceCustomResourceDefinitionStatus1Async(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup2()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup2();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroup2Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroup2Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources5()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources5();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources5Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources5Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionAPIService(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionAPIService(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionAPIServiceAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionAPIServiceAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIServiceList ListAPIService(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListAPIService(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIServiceList> ListAPIServiceAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListAPIServiceAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIService CreateAPIService(global::k8s.Models.V1APIService body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateAPIService(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIService> CreateAPIServiceAsync(global::k8s.Models.V1APIService body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateAPIServiceAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectHeadNodeProxyWithPath(string name, string path, string path1)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectHeadNodeProxyWithPath(name, path, path1);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectHeadNodeProxyWithPathAsync(string name, string path, string path1, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectHeadNodeProxyWithPathAsync(name, path, path1, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPatchNodeProxyWithPath(string name, string path, string path1)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPatchNodeProxyWithPath(name, path, path1);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPatchNodeProxyWithPathAsync(string name, string path, string path1, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPatchNodeProxyWithPathAsync(name, path, path1, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPostNodeProxyWithPath(string name, string path, string path1)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPostNodeProxyWithPath(name, path, path1);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPostNodeProxyWithPathAsync(string name, string path, string path1, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPostNodeProxyWithPathAsync(name, path, path1, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPutNodeProxyWithPath(string name, string path, string path1)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPutNodeProxyWithPath(name, path, path1);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPutNodeProxyWithPathAsync(string name, string path, string path1, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPutNodeProxyWithPathAsync(name, path, path1, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Node ReadNodeStatus(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNodeStatus(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Node> ReadNodeStatusAsync(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNodeStatusAsync(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Node PatchNodeStatus(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNodeStatus(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Node> PatchNodeStatusAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNodeStatusAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Node ReplaceNodeStatus(global::k8s.Models.V1Node body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNodeStatus(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Node> ReplaceNodeStatusAsync(global::k8s.Models.V1Node body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNodeStatusAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolumeClaimList ListPersistentVolumeClaimForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListPersistentVolumeClaimForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolumeClaimList> ListPersistentVolumeClaimForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPersistentVolumeClaimForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionPersistentVolume(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionPersistentVolume(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionPersistentVolumeAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionPersistentVolumeAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolumeList ListPersistentVolume(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListPersistentVolume(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolumeList> ListPersistentVolumeAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPersistentVolumeAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolume CreatePersistentVolume(global::k8s.Models.V1PersistentVolume body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreatePersistentVolume(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolume> CreatePersistentVolumeAsync(global::k8s.Models.V1PersistentVolume body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreatePersistentVolumeAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolume DeletePersistentVolume(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeletePersistentVolume(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolume> DeletePersistentVolumeAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeletePersistentVolumeAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolume ReadPersistentVolume(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadPersistentVolume(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolume> ReadPersistentVolumeAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPersistentVolumeAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolume PatchPersistentVolume(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchPersistentVolume(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolume> PatchPersistentVolumeAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPersistentVolumeAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolume ReplacePersistentVolume(global::k8s.Models.V1PersistentVolume body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplacePersistentVolume(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolume> ReplacePersistentVolumeAsync(global::k8s.Models.V1PersistentVolume body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePersistentVolumeAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolume ReadPersistentVolumeStatus(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadPersistentVolumeStatus(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolume> ReadPersistentVolumeStatusAsync(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadPersistentVolumeStatusAsync(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolume PatchPersistentVolumeStatus(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchPersistentVolumeStatus(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolume> PatchPersistentVolumeStatusAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchPersistentVolumeStatusAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolume ReplacePersistentVolumeStatus(global::k8s.Models.V1PersistentVolume body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplacePersistentVolumeStatus(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolume> ReplacePersistentVolumeStatusAsync(global::k8s.Models.V1PersistentVolume body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplacePersistentVolumeStatusAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PodList ListPodForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListPodForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PodList> ListPodForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPodForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PodTemplateList ListPodTemplateForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListPodTemplateForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PodTemplateList> ListPodTemplateForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListPodTemplateForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ReplicationControllerList ListReplicationControllerForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListReplicationControllerForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ReplicationControllerList> ListReplicationControllerForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListReplicationControllerForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ResourceQuotaList ListResourceQuotaForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListResourceQuotaForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ResourceQuotaList> ListResourceQuotaForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListResourceQuotaForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1SecretList ListSecretForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListSecretForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1SecretList> ListSecretForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListSecretForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ServiceAccountList ListServiceAccountForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListServiceAccountForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ServiceAccountList> ListServiceAccountForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListServiceAccountForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ServiceList ListServiceForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListServiceForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ServiceList> ListServiceForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListServiceForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroupList GetAPIVersions1()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIVersions1();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroupList> GetAPIVersions1Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIVersions1Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIGroup GetAPIGroup()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIGroup();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIGroup> GetAPIGroupAsync(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIGroupAsync(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources1()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources1();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResources1Async(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResources1Async(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionMutatingWebhookConfiguration(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionMutatingWebhookConfiguration(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionMutatingWebhookConfigurationAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionMutatingWebhookConfigurationAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1MutatingWebhookConfigurationList ListMutatingWebhookConfiguration(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListMutatingWebhookConfiguration(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1MutatingWebhookConfigurationList> ListMutatingWebhookConfigurationAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListMutatingWebhookConfigurationAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1MutatingWebhookConfiguration CreateMutatingWebhookConfiguration(global::k8s.Models.V1MutatingWebhookConfiguration body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateMutatingWebhookConfiguration(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1MutatingWebhookConfiguration> CreateMutatingWebhookConfigurationAsync(global::k8s.Models.V1MutatingWebhookConfiguration body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateMutatingWebhookConfigurationAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteMutatingWebhookConfiguration(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteMutatingWebhookConfiguration(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteMutatingWebhookConfigurationAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteMutatingWebhookConfigurationAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1MutatingWebhookConfiguration ReadMutatingWebhookConfiguration(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadMutatingWebhookConfiguration(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1MutatingWebhookConfiguration> ReadMutatingWebhookConfigurationAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadMutatingWebhookConfigurationAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1MutatingWebhookConfiguration PatchMutatingWebhookConfiguration(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchMutatingWebhookConfiguration(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1MutatingWebhookConfiguration> PatchMutatingWebhookConfigurationAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchMutatingWebhookConfigurationAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1MutatingWebhookConfiguration ReplaceMutatingWebhookConfiguration(global::k8s.Models.V1MutatingWebhookConfiguration body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceMutatingWebhookConfiguration(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1MutatingWebhookConfiguration> ReplaceMutatingWebhookConfigurationAsync(global::k8s.Models.V1MutatingWebhookConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceMutatingWebhookConfigurationAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionValidatingWebhookConfiguration(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionValidatingWebhookConfiguration(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionValidatingWebhookConfigurationAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionValidatingWebhookConfigurationAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ValidatingWebhookConfigurationList ListValidatingWebhookConfiguration(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListValidatingWebhookConfiguration(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ValidatingWebhookConfigurationList> ListValidatingWebhookConfigurationAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListValidatingWebhookConfigurationAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ValidatingWebhookConfiguration CreateValidatingWebhookConfiguration(global::k8s.Models.V1ValidatingWebhookConfiguration body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateValidatingWebhookConfiguration(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ValidatingWebhookConfiguration> CreateValidatingWebhookConfigurationAsync(global::k8s.Models.V1ValidatingWebhookConfiguration body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateValidatingWebhookConfigurationAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteValidatingWebhookConfiguration(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteValidatingWebhookConfiguration(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteValidatingWebhookConfigurationAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteValidatingWebhookConfigurationAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ValidatingWebhookConfiguration ReadValidatingWebhookConfiguration(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadValidatingWebhookConfiguration(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ValidatingWebhookConfiguration> ReadValidatingWebhookConfigurationAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadValidatingWebhookConfigurationAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ValidatingWebhookConfiguration PatchValidatingWebhookConfiguration(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchValidatingWebhookConfiguration(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ValidatingWebhookConfiguration> PatchValidatingWebhookConfigurationAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchValidatingWebhookConfigurationAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ValidatingWebhookConfiguration ReplaceValidatingWebhookConfiguration(global::k8s.Models.V1ValidatingWebhookConfiguration body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceValidatingWebhookConfiguration(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ValidatingWebhookConfiguration> ReplaceValidatingWebhookConfigurationAsync(global::k8s.Models.V1ValidatingWebhookConfiguration body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceValidatingWebhookConfigurationAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources2()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources2();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Service> CreateNamespacedServiceAsync(global::k8s.Models.V1Service body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedServiceAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedService(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedService(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedServiceAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedServiceAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Service ReadNamespacedService(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedService(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Service> ReadNamespacedServiceAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedServiceAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Service PatchNamespacedService(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedService(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Service> PatchNamespacedServiceAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedServiceAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Service ReplaceNamespacedService(global::k8s.Models.V1Service body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedService(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Service> ReplaceNamespacedServiceAsync(global::k8s.Models.V1Service body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedServiceAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectDeleteNamespacedServiceProxy(string name, string namespaceParameter, string path)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectDeleteNamespacedServiceProxy(name, namespaceParameter, path);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectDeleteNamespacedServiceProxyAsync(string name, string namespaceParameter, string path, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectDeleteNamespacedServiceProxyAsync(name, namespaceParameter, path, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectGetNamespacedServiceProxy(string name, string namespaceParameter, string path)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectGetNamespacedServiceProxy(name, namespaceParameter, path);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectGetNamespacedServiceProxyAsync(string name, string namespaceParameter, string path, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectGetNamespacedServiceProxyAsync(name, namespaceParameter, path, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectHeadNamespacedServiceProxy(string name, string namespaceParameter, string path)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectHeadNamespacedServiceProxy(name, namespaceParameter, path);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectHeadNamespacedServiceProxyAsync(string name, string namespaceParameter, string path, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectHeadNamespacedServiceProxyAsync(name, namespaceParameter, path, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPatchNamespacedServiceProxy(string name, string namespaceParameter, string path)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPatchNamespacedServiceProxy(name, namespaceParameter, path);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPatchNamespacedServiceProxyAsync(string name, string namespaceParameter, string path, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPatchNamespacedServiceProxyAsync(name, namespaceParameter, path, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPostNamespacedServiceProxy(string name, string namespaceParameter, string path)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPostNamespacedServiceProxy(name, namespaceParameter, path);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPostNamespacedServiceProxyAsync(string name, string namespaceParameter, string path, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPostNamespacedServiceProxyAsync(name, namespaceParameter, path, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPutNamespacedServiceProxy(string name, string namespaceParameter, string path)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPutNamespacedServiceProxy(name, namespaceParameter, path);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPutNamespacedServiceProxyAsync(string name, string namespaceParameter, string path, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPutNamespacedServiceProxyAsync(name, namespaceParameter, path, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectDeleteNamespacedServiceProxyWithPath(string name, string namespaceParameter, string path, string path1)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectDeleteNamespacedServiceProxyWithPath(name, namespaceParameter, path, path1);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectDeleteNamespacedServiceProxyWithPathAsync(string name, string namespaceParameter, string path, string path1, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectDeleteNamespacedServiceProxyWithPathAsync(name, namespaceParameter, path, path1, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectGetNamespacedServiceProxyWithPath(string name, string namespaceParameter, string path, string path1)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectGetNamespacedServiceProxyWithPath(name, namespaceParameter, path, path1);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectGetNamespacedServiceProxyWithPathAsync(string name, string namespaceParameter, string path, string path1, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectGetNamespacedServiceProxyWithPathAsync(name, namespaceParameter, path, path1, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectHeadNamespacedServiceProxyWithPath(string name, string namespaceParameter, string path, string path1)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectHeadNamespacedServiceProxyWithPath(name, namespaceParameter, path, path1);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectHeadNamespacedServiceProxyWithPathAsync(string name, string namespaceParameter, string path, string path1, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectHeadNamespacedServiceProxyWithPathAsync(name, namespaceParameter, path, path1, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPatchNamespacedServiceProxyWithPath(string name, string namespaceParameter, string path, string path1)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPatchNamespacedServiceProxyWithPath(name, namespaceParameter, path, path1);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPatchNamespacedServiceProxyWithPathAsync(string name, string namespaceParameter, string path, string path1, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPatchNamespacedServiceProxyWithPathAsync(name, namespaceParameter, path, path1, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPostNamespacedServiceProxyWithPath(string name, string namespaceParameter, string path, string path1)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPostNamespacedServiceProxyWithPath(name, namespaceParameter, path, path1);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPostNamespacedServiceProxyWithPathAsync(string name, string namespaceParameter, string path, string path1, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPostNamespacedServiceProxyWithPathAsync(name, namespaceParameter, path, path1, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPutNamespacedServiceProxyWithPath(string name, string namespaceParameter, string path, string path1)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPutNamespacedServiceProxyWithPath(name, namespaceParameter, path, path1);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPutNamespacedServiceProxyWithPathAsync(string name, string namespaceParameter, string path, string path1, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPutNamespacedServiceProxyWithPathAsync(name, namespaceParameter, path, path1, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Service ReadNamespacedServiceStatus(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedServiceStatus(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Service> ReadNamespacedServiceStatusAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedServiceStatusAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Service PatchNamespacedServiceStatus(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedServiceStatus(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Service> PatchNamespacedServiceStatusAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedServiceStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Service ReplaceNamespacedServiceStatus(global::k8s.Models.V1Service body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedServiceStatus(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Service> ReplaceNamespacedServiceStatusAsync(global::k8s.Models.V1Service body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedServiceStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespace(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespace(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespaceAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespaceAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Namespace ReadNamespace(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespace(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Namespace> ReadNamespaceAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespaceAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Namespace PatchNamespace(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespace(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Namespace> PatchNamespaceAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespaceAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Namespace ReplaceNamespace(global::k8s.Models.V1Namespace body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespace(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Namespace> ReplaceNamespaceAsync(global::k8s.Models.V1Namespace body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespaceAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Namespace ReplaceNamespaceFinalize(global::k8s.Models.V1Namespace body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespaceFinalize(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Namespace> ReplaceNamespaceFinalizeAsync(global::k8s.Models.V1Namespace body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespaceFinalizeAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Namespace ReadNamespaceStatus(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespaceStatus(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Namespace> ReadNamespaceStatusAsync(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespaceStatusAsync(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Namespace PatchNamespaceStatus(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespaceStatus(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Namespace> PatchNamespaceStatusAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespaceStatusAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Namespace ReplaceNamespaceStatus(global::k8s.Models.V1Namespace body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespaceStatus(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Namespace> ReplaceNamespaceStatusAsync(global::k8s.Models.V1Namespace body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespaceStatusAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNode(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNode(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNodeAsync(global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNodeAsync(body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1NodeList ListNode(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNode(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1NodeList> ListNodeAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNodeAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Node CreateNode(global::k8s.Models.V1Node body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNode(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Node> CreateNodeAsync(global::k8s.Models.V1Node body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNodeAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNode(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNode(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNodeAsync(string name, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNodeAsync(name, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Node ReadNode(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNode(name, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Node> ReadNodeAsync(string name, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNodeAsync(name, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Node PatchNode(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNode(body, name, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Node> PatchNodeAsync(global::k8s.Models.V1Patch body, string name, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNodeAsync(body, name, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Node ReplaceNode(global::k8s.Models.V1Node body, string name, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNode(body, name, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Node> ReplaceNodeAsync(global::k8s.Models.V1Node body, string name, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNodeAsync(body, name, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectDeleteNodeProxy(string name, string path)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectDeleteNodeProxy(name, path);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectDeleteNodeProxyAsync(string name, string path, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectDeleteNodeProxyAsync(name, path, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectGetNodeProxy(string name, string path)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectGetNodeProxy(name, path);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectGetNodeProxyAsync(string name, string path, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectGetNodeProxyAsync(name, path, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectHeadNodeProxy(string name, string path)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectHeadNodeProxy(name, path);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectHeadNodeProxyAsync(string name, string path, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectHeadNodeProxyAsync(name, path, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPatchNodeProxy(string name, string path)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPatchNodeProxy(name, path);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPatchNodeProxyAsync(string name, string path, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPatchNodeProxyAsync(name, path, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPostNodeProxy(string name, string path)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPostNodeProxy(name, path);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPostNodeProxyAsync(string name, string path, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPostNodeProxyAsync(name, path, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPutNodeProxy(string name, string path)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPutNodeProxy(name, path);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPutNodeProxyAsync(string name, string path, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPutNodeProxyAsync(name, path, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectDeleteNodeProxyWithPath(string name, string path, string path1)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectDeleteNodeProxyWithPath(name, path, path1);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectDeleteNodeProxyWithPathAsync(string name, string path, string path1, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectDeleteNodeProxyWithPathAsync(name, path, path1, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectGetNodeProxyWithPath(string name, string path, string path1)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectGetNodeProxyWithPath(name, path, path1);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectGetNodeProxyWithPathAsync(string name, string path, string path1, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectGetNodeProxyWithPathAsync(name, path, path1, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PodTemplate ReadNamespacedPodTemplate(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedPodTemplate(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PodTemplate> ReadNamespacedPodTemplateAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedPodTemplateAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PodTemplate PatchNamespacedPodTemplate(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedPodTemplate(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PodTemplate> PatchNamespacedPodTemplateAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedPodTemplateAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PodTemplate ReplaceNamespacedPodTemplate(global::k8s.Models.V1PodTemplate body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedPodTemplate(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PodTemplate> ReplaceNamespacedPodTemplateAsync(global::k8s.Models.V1PodTemplate body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedPodTemplateAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedReplicationController(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedReplicationController(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedReplicationControllerAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedReplicationControllerAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ReplicationControllerList ListNamespacedReplicationController(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedReplicationController(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ReplicationControllerList> ListNamespacedReplicationControllerAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedReplicationControllerAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ReplicationController CreateNamespacedReplicationController(global::k8s.Models.V1ReplicationController body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedReplicationController(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ReplicationController> CreateNamespacedReplicationControllerAsync(global::k8s.Models.V1ReplicationController body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedReplicationControllerAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedReplicationController(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedReplicationController(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedReplicationControllerAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedReplicationControllerAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ReplicationController ReadNamespacedReplicationController(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedReplicationController(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ReplicationController> ReadNamespacedReplicationControllerAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedReplicationControllerAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ReplicationController PatchNamespacedReplicationController(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedReplicationController(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ReplicationController> PatchNamespacedReplicationControllerAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedReplicationControllerAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ReplicationController ReplaceNamespacedReplicationController(global::k8s.Models.V1ReplicationController body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedReplicationController(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ReplicationController> ReplaceNamespacedReplicationControllerAsync(global::k8s.Models.V1ReplicationController body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedReplicationControllerAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Scale ReadNamespacedReplicationControllerScale(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedReplicationControllerScale(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Scale> ReadNamespacedReplicationControllerScaleAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedReplicationControllerScaleAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Scale PatchNamespacedReplicationControllerScale(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedReplicationControllerScale(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Scale> PatchNamespacedReplicationControllerScaleAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedReplicationControllerScaleAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Scale ReplaceNamespacedReplicationControllerScale(global::k8s.Models.V1Scale body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedReplicationControllerScale(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Scale> ReplaceNamespacedReplicationControllerScaleAsync(global::k8s.Models.V1Scale body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedReplicationControllerScaleAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ReplicationController ReadNamespacedReplicationControllerStatus(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedReplicationControllerStatus(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ReplicationController> ReadNamespacedReplicationControllerStatusAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedReplicationControllerStatusAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ReplicationController PatchNamespacedReplicationControllerStatus(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedReplicationControllerStatus(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ReplicationController> PatchNamespacedReplicationControllerStatusAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedReplicationControllerStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ReplicationController ReplaceNamespacedReplicationControllerStatus(global::k8s.Models.V1ReplicationController body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedReplicationControllerStatus(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ReplicationController> ReplaceNamespacedReplicationControllerStatusAsync(global::k8s.Models.V1ReplicationController body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedReplicationControllerStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedResourceQuota(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedResourceQuota(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedResourceQuotaAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedResourceQuotaAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ResourceQuotaList ListNamespacedResourceQuota(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedResourceQuota(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ResourceQuotaList> ListNamespacedResourceQuotaAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedResourceQuotaAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ResourceQuota CreateNamespacedResourceQuota(global::k8s.Models.V1ResourceQuota body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedResourceQuota(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ResourceQuota> CreateNamespacedResourceQuotaAsync(global::k8s.Models.V1ResourceQuota body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedResourceQuotaAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ResourceQuota DeleteNamespacedResourceQuota(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedResourceQuota(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ResourceQuota> DeleteNamespacedResourceQuotaAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedResourceQuotaAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ResourceQuota ReadNamespacedResourceQuota(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedResourceQuota(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ResourceQuota> ReadNamespacedResourceQuotaAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedResourceQuotaAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ResourceQuota PatchNamespacedResourceQuota(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedResourceQuota(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ResourceQuota> PatchNamespacedResourceQuotaAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedResourceQuotaAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ResourceQuota ReplaceNamespacedResourceQuota(global::k8s.Models.V1ResourceQuota body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedResourceQuota(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ResourceQuota> ReplaceNamespacedResourceQuotaAsync(global::k8s.Models.V1ResourceQuota body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedResourceQuotaAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ResourceQuota ReadNamespacedResourceQuotaStatus(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedResourceQuotaStatus(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ResourceQuota> ReadNamespacedResourceQuotaStatusAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedResourceQuotaStatusAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ResourceQuota PatchNamespacedResourceQuotaStatus(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedResourceQuotaStatus(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ResourceQuota> PatchNamespacedResourceQuotaStatusAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedResourceQuotaStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ResourceQuota ReplaceNamespacedResourceQuotaStatus(global::k8s.Models.V1ResourceQuota body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedResourceQuotaStatus(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ResourceQuota> ReplaceNamespacedResourceQuotaStatusAsync(global::k8s.Models.V1ResourceQuota body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedResourceQuotaStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedSecret(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedSecret(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedSecretAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedSecretAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1SecretList ListNamespacedSecret(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedSecret(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1SecretList> ListNamespacedSecretAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedSecretAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Secret CreateNamespacedSecret(global::k8s.Models.V1Secret body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedSecret(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Secret> CreateNamespacedSecretAsync(global::k8s.Models.V1Secret body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedSecretAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedSecret(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedSecret(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedSecretAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedSecretAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Secret ReadNamespacedSecret(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedSecret(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Secret> ReadNamespacedSecretAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedSecretAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Secret PatchNamespacedSecret(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedSecret(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Secret> PatchNamespacedSecretAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedSecretAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Secret ReplaceNamespacedSecret(global::k8s.Models.V1Secret body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedSecret(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Secret> ReplaceNamespacedSecretAsync(global::k8s.Models.V1Secret body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedSecretAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedServiceAccount(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedServiceAccount(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedServiceAccountAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedServiceAccountAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ServiceAccountList ListNamespacedServiceAccount(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedServiceAccount(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ServiceAccountList> ListNamespacedServiceAccountAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedServiceAccountAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ServiceAccount CreateNamespacedServiceAccount(global::k8s.Models.V1ServiceAccount body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedServiceAccount(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ServiceAccount> CreateNamespacedServiceAccountAsync(global::k8s.Models.V1ServiceAccount body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedServiceAccountAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ServiceAccount DeleteNamespacedServiceAccount(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedServiceAccount(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ServiceAccount> DeleteNamespacedServiceAccountAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedServiceAccountAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ServiceAccount ReadNamespacedServiceAccount(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedServiceAccount(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ServiceAccount> ReadNamespacedServiceAccountAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedServiceAccountAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ServiceAccount PatchNamespacedServiceAccount(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedServiceAccount(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ServiceAccount> PatchNamespacedServiceAccountAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedServiceAccountAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ServiceAccount ReplaceNamespacedServiceAccount(global::k8s.Models.V1ServiceAccount body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedServiceAccount(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ServiceAccount> ReplaceNamespacedServiceAccountAsync(global::k8s.Models.V1ServiceAccount body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedServiceAccountAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Authenticationv1TokenRequest CreateNamespacedServiceAccountToken(global::k8s.Models.Authenticationv1TokenRequest body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedServiceAccountToken(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Authenticationv1TokenRequest> CreateNamespacedServiceAccountTokenAsync(global::k8s.Models.Authenticationv1TokenRequest body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedServiceAccountTokenAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ServiceList ListNamespacedService(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedService(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ServiceList> ListNamespacedServiceAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedServiceAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Service CreateNamespacedService(global::k8s.Models.V1Service body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedService(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolumeClaim> CreateNamespacedPersistentVolumeClaimAsync(global::k8s.Models.V1PersistentVolumeClaim body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedPersistentVolumeClaimAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolumeClaim DeleteNamespacedPersistentVolumeClaim(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedPersistentVolumeClaim(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolumeClaim> DeleteNamespacedPersistentVolumeClaimAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedPersistentVolumeClaimAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolumeClaim ReadNamespacedPersistentVolumeClaim(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedPersistentVolumeClaim(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolumeClaim> ReadNamespacedPersistentVolumeClaimAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedPersistentVolumeClaimAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolumeClaim PatchNamespacedPersistentVolumeClaim(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedPersistentVolumeClaim(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolumeClaim> PatchNamespacedPersistentVolumeClaimAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedPersistentVolumeClaimAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolumeClaim ReplaceNamespacedPersistentVolumeClaim(global::k8s.Models.V1PersistentVolumeClaim body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedPersistentVolumeClaim(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolumeClaim> ReplaceNamespacedPersistentVolumeClaimAsync(global::k8s.Models.V1PersistentVolumeClaim body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedPersistentVolumeClaimAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolumeClaim ReadNamespacedPersistentVolumeClaimStatus(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedPersistentVolumeClaimStatus(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolumeClaim> ReadNamespacedPersistentVolumeClaimStatusAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedPersistentVolumeClaimStatusAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolumeClaim PatchNamespacedPersistentVolumeClaimStatus(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedPersistentVolumeClaimStatus(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolumeClaim> PatchNamespacedPersistentVolumeClaimStatusAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedPersistentVolumeClaimStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolumeClaim ReplaceNamespacedPersistentVolumeClaimStatus(global::k8s.Models.V1PersistentVolumeClaim body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedPersistentVolumeClaimStatus(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolumeClaim> ReplaceNamespacedPersistentVolumeClaimStatusAsync(global::k8s.Models.V1PersistentVolumeClaim body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedPersistentVolumeClaimStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedPod(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedPod(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedPodAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedPodAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PodList ListNamespacedPod(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedPod(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PodList> ListNamespacedPodAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedPodAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Pod CreateNamespacedPod(global::k8s.Models.V1Pod body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedPod(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Pod> CreateNamespacedPodAsync(global::k8s.Models.V1Pod body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedPodAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Pod DeleteNamespacedPod(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedPod(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Pod> DeleteNamespacedPodAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedPodAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Pod ReadNamespacedPod(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedPod(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Pod> ReadNamespacedPodAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedPodAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Pod PatchNamespacedPod(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedPod(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Pod> PatchNamespacedPodAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedPodAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Pod ReplaceNamespacedPod(global::k8s.Models.V1Pod body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedPod(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Pod> ReplaceNamespacedPodAsync(global::k8s.Models.V1Pod body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedPodAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectGetNamespacedPodAttach(string name, string namespaceParameter, string container, global::System.Nullable<bool> stderr, global::System.Nullable<bool> stdin, global::System.Nullable<bool> stdout, global::System.Nullable<bool> tty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectGetNamespacedPodAttach(name, namespaceParameter, container, stderr, stdin, stdout, tty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectGetNamespacedPodAttachAsync(string name, string namespaceParameter, string container, global::System.Nullable<bool> stderr, global::System.Nullable<bool> stdin, global::System.Nullable<bool> stdout, global::System.Nullable<bool> tty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectGetNamespacedPodAttachAsync(name, namespaceParameter, container, stderr, stdin, stdout, tty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPostNamespacedPodAttach(string name, string namespaceParameter, string container, global::System.Nullable<bool> stderr, global::System.Nullable<bool> stdin, global::System.Nullable<bool> stdout, global::System.Nullable<bool> tty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPostNamespacedPodAttach(name, namespaceParameter, container, stderr, stdin, stdout, tty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPostNamespacedPodAttachAsync(string name, string namespaceParameter, string container, global::System.Nullable<bool> stderr, global::System.Nullable<bool> stdin, global::System.Nullable<bool> stdout, global::System.Nullable<bool> tty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPostNamespacedPodAttachAsync(name, namespaceParameter, container, stderr, stdin, stdout, tty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Binding CreateNamespacedPodBinding(global::k8s.Models.V1Binding body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedPodBinding(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Binding> CreateNamespacedPodBindingAsync(global::k8s.Models.V1Binding body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedPodBindingAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1beta1Eviction CreateNamespacedPodEviction(global::k8s.Models.V1beta1Eviction body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedPodEviction(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1beta1Eviction> CreateNamespacedPodEvictionAsync(global::k8s.Models.V1beta1Eviction body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedPodEvictionAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectGetNamespacedPodExec(string name, string namespaceParameter, string command, string container, global::System.Nullable<bool> stderr, global::System.Nullable<bool> stdin, global::System.Nullable<bool> stdout, global::System.Nullable<bool> tty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectGetNamespacedPodExec(name, namespaceParameter, command, container, stderr, stdin, stdout, tty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectGetNamespacedPodExecAsync(string name, string namespaceParameter, string command, string container, global::System.Nullable<bool> stderr, global::System.Nullable<bool> stdin, global::System.Nullable<bool> stdout, global::System.Nullable<bool> tty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectGetNamespacedPodExecAsync(name, namespaceParameter, command, container, stderr, stdin, stdout, tty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPostNamespacedPodExec(string name, string namespaceParameter, string command, string container, global::System.Nullable<bool> stderr, global::System.Nullable<bool> stdin, global::System.Nullable<bool> stdout, global::System.Nullable<bool> tty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPostNamespacedPodExec(name, namespaceParameter, command, container, stderr, stdin, stdout, tty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPostNamespacedPodExecAsync(string name, string namespaceParameter, string command, string container, global::System.Nullable<bool> stderr, global::System.Nullable<bool> stdin, global::System.Nullable<bool> stdout, global::System.Nullable<bool> tty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPostNamespacedPodExecAsync(name, namespaceParameter, command, container, stderr, stdin, stdout, tty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ReadNamespacedPodLog(string name, string namespaceParameter, string container, global::System.Nullable<bool> follow, global::System.Nullable<bool> insecureSkipTLSVerifyBackend, global::System.Nullable<int> limitBytes, string pretty, global::System.Nullable<bool> previous, global::System.Nullable<int> sinceSeconds, global::System.Nullable<int> tailLines, global::System.Nullable<bool> timestamps)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedPodLog(name, namespaceParameter, container, follow, insecureSkipTLSVerifyBackend, limitBytes, pretty, previous, sinceSeconds, tailLines, timestamps);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ReadNamespacedPodLogAsync(string name, string namespaceParameter, string container, global::System.Nullable<bool> follow, global::System.Nullable<bool> insecureSkipTLSVerifyBackend, global::System.Nullable<int> limitBytes, string pretty, global::System.Nullable<bool> previous, global::System.Nullable<int> sinceSeconds, global::System.Nullable<int> tailLines, global::System.Nullable<bool> timestamps, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedPodLogAsync(name, namespaceParameter, container, follow, insecureSkipTLSVerifyBackend, limitBytes, pretty, previous, sinceSeconds, tailLines, timestamps, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectGetNamespacedPodPortforward(string name, string namespaceParameter, global::System.Nullable<int> ports)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectGetNamespacedPodPortforward(name, namespaceParameter, ports);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectGetNamespacedPodPortforwardAsync(string name, string namespaceParameter, global::System.Nullable<int> ports, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectGetNamespacedPodPortforwardAsync(name, namespaceParameter, ports, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPostNamespacedPodPortforward(string name, string namespaceParameter, global::System.Nullable<int> ports)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPostNamespacedPodPortforward(name, namespaceParameter, ports);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPostNamespacedPodPortforwardAsync(string name, string namespaceParameter, global::System.Nullable<int> ports, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPostNamespacedPodPortforwardAsync(name, namespaceParameter, ports, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectDeleteNamespacedPodProxy(string name, string namespaceParameter, string path)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectDeleteNamespacedPodProxy(name, namespaceParameter, path);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectDeleteNamespacedPodProxyAsync(string name, string namespaceParameter, string path, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectDeleteNamespacedPodProxyAsync(name, namespaceParameter, path, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectGetNamespacedPodProxy(string name, string namespaceParameter, string path)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectGetNamespacedPodProxy(name, namespaceParameter, path);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectGetNamespacedPodProxyAsync(string name, string namespaceParameter, string path, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectGetNamespacedPodProxyAsync(name, namespaceParameter, path, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectHeadNamespacedPodProxy(string name, string namespaceParameter, string path)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectHeadNamespacedPodProxy(name, namespaceParameter, path);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectHeadNamespacedPodProxyAsync(string name, string namespaceParameter, string path, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectHeadNamespacedPodProxyAsync(name, namespaceParameter, path, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPatchNamespacedPodProxy(string name, string namespaceParameter, string path)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPatchNamespacedPodProxy(name, namespaceParameter, path);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPatchNamespacedPodProxyAsync(string name, string namespaceParameter, string path, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPatchNamespacedPodProxyAsync(name, namespaceParameter, path, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPostNamespacedPodProxy(string name, string namespaceParameter, string path)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPostNamespacedPodProxy(name, namespaceParameter, path);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPostNamespacedPodProxyAsync(string name, string namespaceParameter, string path, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPostNamespacedPodProxyAsync(name, namespaceParameter, path, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPutNamespacedPodProxy(string name, string namespaceParameter, string path)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPutNamespacedPodProxy(name, namespaceParameter, path);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPutNamespacedPodProxyAsync(string name, string namespaceParameter, string path, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPutNamespacedPodProxyAsync(name, namespaceParameter, path, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectDeleteNamespacedPodProxyWithPath(string name, string namespaceParameter, string path, string path1)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectDeleteNamespacedPodProxyWithPath(name, namespaceParameter, path, path1);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectDeleteNamespacedPodProxyWithPathAsync(string name, string namespaceParameter, string path, string path1, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectDeleteNamespacedPodProxyWithPathAsync(name, namespaceParameter, path, path1, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectGetNamespacedPodProxyWithPath(string name, string namespaceParameter, string path, string path1)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectGetNamespacedPodProxyWithPath(name, namespaceParameter, path, path1);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectGetNamespacedPodProxyWithPathAsync(string name, string namespaceParameter, string path, string path1, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectGetNamespacedPodProxyWithPathAsync(name, namespaceParameter, path, path1, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectHeadNamespacedPodProxyWithPath(string name, string namespaceParameter, string path, string path1)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectHeadNamespacedPodProxyWithPath(name, namespaceParameter, path, path1);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectHeadNamespacedPodProxyWithPathAsync(string name, string namespaceParameter, string path, string path1, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectHeadNamespacedPodProxyWithPathAsync(name, namespaceParameter, path, path1, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPatchNamespacedPodProxyWithPath(string name, string namespaceParameter, string path, string path1)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPatchNamespacedPodProxyWithPath(name, namespaceParameter, path, path1);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPatchNamespacedPodProxyWithPathAsync(string name, string namespaceParameter, string path, string path1, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPatchNamespacedPodProxyWithPathAsync(name, namespaceParameter, path, path1, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPostNamespacedPodProxyWithPath(string name, string namespaceParameter, string path, string path1)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPostNamespacedPodProxyWithPath(name, namespaceParameter, path, path1);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPostNamespacedPodProxyWithPathAsync(string name, string namespaceParameter, string path, string path1, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPostNamespacedPodProxyWithPathAsync(name, namespaceParameter, path, path1, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::System.IO.Stream ConnectPutNamespacedPodProxyWithPath(string name, string namespaceParameter, string path, string path1)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ConnectPutNamespacedPodProxyWithPath(name, namespaceParameter, path, path1);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::System.IO.Stream> ConnectPutNamespacedPodProxyWithPathAsync(string name, string namespaceParameter, string path, string path1, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ConnectPutNamespacedPodProxyWithPathAsync(name, namespaceParameter, path, path1, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Pod ReadNamespacedPodStatus(string name, string namespaceParameter, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedPodStatus(name, namespaceParameter, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Pod> ReadNamespacedPodStatusAsync(string name, string namespaceParameter, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedPodStatusAsync(name, namespaceParameter, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Pod PatchNamespacedPodStatus(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedPodStatus(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Pod> PatchNamespacedPodStatusAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedPodStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Pod ReplaceNamespacedPodStatus(global::k8s.Models.V1Pod body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedPodStatus(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Pod> ReplaceNamespacedPodStatusAsync(global::k8s.Models.V1Pod body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedPodStatusAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedPodTemplate(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedPodTemplate(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedPodTemplateAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedPodTemplateAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PodTemplateList ListNamespacedPodTemplate(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedPodTemplate(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PodTemplateList> ListNamespacedPodTemplateAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedPodTemplateAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PodTemplate CreateNamespacedPodTemplate(global::k8s.Models.V1PodTemplate body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedPodTemplate(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PodTemplate> CreateNamespacedPodTemplateAsync(global::k8s.Models.V1PodTemplate body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedPodTemplateAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PodTemplate DeleteNamespacedPodTemplate(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedPodTemplate(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PodTemplate> DeleteNamespacedPodTemplateAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedPodTemplateAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public string GetServiceAccountIssuerOpenIDConfiguration()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetServiceAccountIssuerOpenIDConfiguration();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<string> GetServiceAccountIssuerOpenIDConfigurationAsync(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetServiceAccountIssuerOpenIDConfigurationAsync(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIVersions GetAPIVersions()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIVersions();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIVersions> GetAPIVersionsAsync(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIVersionsAsync(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1APIResourceList GetAPIResources()
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.GetAPIResources();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1APIResourceList> GetAPIResourcesAsync(global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetAPIResourcesAsync(cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ComponentStatusList ListComponentStatus(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListComponentStatus(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ComponentStatusList> ListComponentStatusAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListComponentStatusAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ComponentStatus ReadComponentStatus(string name, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadComponentStatus(name, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ComponentStatus> ReadComponentStatusAsync(string name, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadComponentStatusAsync(name, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ConfigMapList ListConfigMapForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListConfigMapForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ConfigMapList> ListConfigMapForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListConfigMapForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1EndpointsList ListEndpointsForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListEndpointsForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1EndpointsList> ListEndpointsForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListEndpointsForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Corev1EventList ListEventForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListEventForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Corev1EventList> ListEventForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListEventForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1LimitRangeList ListLimitRangeForAllNamespaces(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListLimitRangeForAllNamespaces(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1LimitRangeList> ListLimitRangeForAllNamespacesAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string pretty, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListLimitRangeForAllNamespacesAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, pretty, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1NamespaceList ListNamespace(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespace(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1NamespaceList> ListNamespaceAsync(global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespaceAsync(allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Namespace CreateNamespace(global::k8s.Models.V1Namespace body, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespace(body, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Namespace> CreateNamespaceAsync(global::k8s.Models.V1Namespace body, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespaceAsync(body, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Binding CreateNamespacedBinding(global::k8s.Models.V1Binding body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedBinding(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Binding> CreateNamespacedBindingAsync(global::k8s.Models.V1Binding body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedBindingAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedConfigMap(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedConfigMap(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedConfigMapAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedConfigMapAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ConfigMapList ListNamespacedConfigMap(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedConfigMap(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ConfigMapList> ListNamespacedConfigMapAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedConfigMapAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ConfigMap CreateNamespacedConfigMap(global::k8s.Models.V1ConfigMap body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedConfigMap(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ConfigMap> CreateNamespacedConfigMapAsync(global::k8s.Models.V1ConfigMap body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedConfigMapAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedConfigMap(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedConfigMap(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedConfigMapAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedConfigMapAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ConfigMap ReadNamespacedConfigMap(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedConfigMap(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ConfigMap> ReadNamespacedConfigMapAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedConfigMapAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ConfigMap PatchNamespacedConfigMap(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedConfigMap(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ConfigMap> PatchNamespacedConfigMapAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedConfigMapAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1ConfigMap ReplaceNamespacedConfigMap(global::k8s.Models.V1ConfigMap body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedConfigMap(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1ConfigMap> ReplaceNamespacedConfigMapAsync(global::k8s.Models.V1ConfigMap body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedConfigMapAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedEndpoints(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedEndpoints(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedEndpointsAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedEndpointsAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1EndpointsList ListNamespacedEndpoints(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedEndpoints(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1EndpointsList> ListNamespacedEndpointsAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedEndpointsAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Endpoints CreateNamespacedEndpoints(global::k8s.Models.V1Endpoints body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedEndpoints(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Endpoints> CreateNamespacedEndpointsAsync(global::k8s.Models.V1Endpoints body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedEndpointsAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedEndpoints(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedEndpoints(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedEndpointsAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedEndpointsAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Endpoints ReadNamespacedEndpoints(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedEndpoints(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Endpoints> ReadNamespacedEndpointsAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedEndpointsAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Endpoints PatchNamespacedEndpoints(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedEndpoints(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Endpoints> PatchNamespacedEndpointsAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedEndpointsAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Endpoints ReplaceNamespacedEndpoints(global::k8s.Models.V1Endpoints body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedEndpoints(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Endpoints> ReplaceNamespacedEndpointsAsync(global::k8s.Models.V1Endpoints body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedEndpointsAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedEvent(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedEvent(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedEventAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedEventAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Corev1EventList ListNamespacedEvent(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedEvent(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Corev1EventList> ListNamespacedEventAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedEventAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Corev1Event CreateNamespacedEvent(global::k8s.Models.Corev1Event body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedEvent(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Corev1Event> CreateNamespacedEventAsync(global::k8s.Models.Corev1Event body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedEventAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedEvent(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedEvent(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedEventAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedEventAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Corev1Event ReadNamespacedEvent(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedEvent(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Corev1Event> ReadNamespacedEventAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedEventAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Corev1Event PatchNamespacedEvent(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedEvent(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Corev1Event> PatchNamespacedEventAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedEventAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.Corev1Event ReplaceNamespacedEvent(global::k8s.Models.Corev1Event body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedEvent(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.Corev1Event> ReplaceNamespacedEventAsync(global::k8s.Models.Corev1Event body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedEventAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedLimitRange(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedLimitRange(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedLimitRangeAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedLimitRangeAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1LimitRangeList ListNamespacedLimitRange(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedLimitRange(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1LimitRangeList> ListNamespacedLimitRangeAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedLimitRangeAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1LimitRange CreateNamespacedLimitRange(global::k8s.Models.V1LimitRange body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedLimitRange(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1LimitRange> CreateNamespacedLimitRangeAsync(global::k8s.Models.V1LimitRange body, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.CreateNamespacedLimitRangeAsync(body, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteNamespacedLimitRange(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteNamespacedLimitRange(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteNamespacedLimitRangeAsync(string name, string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string dryRun, global::System.Nullable<int> gracePeriodSeconds, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteNamespacedLimitRangeAsync(name, namespaceParameter, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1LimitRange ReadNamespacedLimitRange(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReadNamespacedLimitRange(name, namespaceParameter, exact, export, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1LimitRange> ReadNamespacedLimitRangeAsync(string name, string namespaceParameter, global::System.Nullable<bool> exact, global::System.Nullable<bool> export, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReadNamespacedLimitRangeAsync(name, namespaceParameter, exact, export, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1LimitRange PatchNamespacedLimitRange(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.PatchNamespacedLimitRange(body, name, namespaceParameter, dryRun, fieldManager, force, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1LimitRange> PatchNamespacedLimitRangeAsync(global::k8s.Models.V1Patch body, string name, string namespaceParameter, string dryRun, string fieldManager, global::System.Nullable<bool> force, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.PatchNamespacedLimitRangeAsync(body, name, namespaceParameter, dryRun, fieldManager, force, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1LimitRange ReplaceNamespacedLimitRange(global::k8s.Models.V1LimitRange body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ReplaceNamespacedLimitRange(body, name, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1LimitRange> ReplaceNamespacedLimitRangeAsync(global::k8s.Models.V1LimitRange body, string name, string namespaceParameter, string dryRun, string fieldManager, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ReplaceNamespacedLimitRangeAsync(body, name, namespaceParameter, dryRun, fieldManager, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1Status DeleteCollectionNamespacedPersistentVolumeClaim(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.DeleteCollectionNamespacedPersistentVolumeClaim(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1Status> DeleteCollectionNamespacedPersistentVolumeClaimAsync(string namespaceParameter, global::k8s.Models.V1DeleteOptions body, string continueParameter, string dryRun, string fieldSelector, global::System.Nullable<int> gracePeriodSeconds, string labelSelector, global::System.Nullable<int> limit, global::System.Nullable<bool> orphanDependents, string propagationPolicy, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.DeleteCollectionNamespacedPersistentVolumeClaimAsync(namespaceParameter, body, continueParameter, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, resourceVersionMatch, timeoutSeconds, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolumeClaimList ListNamespacedPersistentVolumeClaim(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.ListNamespacedPersistentVolumeClaim(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.V1PersistentVolumeClaimList> ListNamespacedPersistentVolumeClaimAsync(string namespaceParameter, global::System.Nullable<bool> allowWatchBookmarks, string continueParameter, string fieldSelector, string labelSelector, global::System.Nullable<int> limit, string resourceVersion, string resourceVersionMatch, global::System.Nullable<int> timeoutSeconds, global::System.Nullable<bool> watch, string pretty, global::System.Threading.CancellationToken cancellationToken)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.ListNamespacedPersistentVolumeClaimAsync(namespaceParameter, allowWatchBookmarks, continueParameter, fieldSelector, labelSelector, limit, resourceVersion, resourceVersionMatch, timeoutSeconds, watch, pretty, cancellationToken);
                });
        }

        /// <inheritdoc/>
        public global::k8s.Models.V1PersistentVolumeClaim CreateNamespacedPersistentVolumeClaim(global::k8s.Models.V1PersistentVolumeClaim body, string namespaceParameter, string dryRun, string fieldManager, string pretty)
        {
            return NormalizedRetryPolicy.Invoke(
                () =>
                {
                    return k8s.CreateNamespacedPersistentVolumeClaim(body, namespaceParameter, dryRun, fieldManager, pretty);
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.NodeMetricsList> GetKubernetesNodesMetricsAsync()
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetKubernetesNodesMetricsAsync();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.PodMetricsList> GetKubernetesPodsMetricsAsync()
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetKubernetesPodsMetricsAsync();
                });
        }

        /// <inheritdoc/>
        public async global::System.Threading.Tasks.Task<global::k8s.Models.PodMetricsList> GetKubernetesPodsMetricsByNamespaceAsync(string namespaceParameter)
        {
            return await NormalizedRetryPolicy.InvokeAsync(
                async () =>
                {
                    return await k8s.GetKubernetesPodsMetricsByNamespaceAsync(namespaceParameter);
                });
        }
    }
}
