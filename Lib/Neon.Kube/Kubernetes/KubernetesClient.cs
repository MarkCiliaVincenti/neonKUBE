//-----------------------------------------------------------------------------
// FILE:	    KubernetesClient.cs
// CONTRIBUTOR: Auto-generated by [prebuilder] tool during pre-build event
// COPYRIGHT:	Copyright (c) 2005-2022 by neonFORGE LLC.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: This file is automatically generated during the build.
//          Do not edit this manually.

#pragma warning disable CS1591  // Missing XML comment

using System;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

using k8s;

using Neon.Common;
using Neon.Retry;

namespace Neon.Kube
{
    /// <summary>
    /// <para>
    /// Inherits the standard <see cref="Kubernetes"/> client class, adding a static constructor
    /// that adds a <see cref="JsonStringEnumMemberConverter"/> to the base class.
    /// </para>
    /// <note>
    /// <para>
    /// <b>IMPORTANT:</b> neonFORGE applications must avoid using <see cref="Kubernetes"/> directly
    /// and use either <see cref="KubernetesClient"/> or <see cref="KubernetesWithRetry"/> instead.
    /// </para>
    /// <para>
    /// Not doing this will probably result in <see cref="InvalidOperationException"/> being thrown.
    /// </para>
    /// </note>
    /// </summary>
    public class KubernetesClient : Kubernetes
    {
        //---------------------------------------------------------------------
        // Static methods

        private static bool isInitialized = false;

        /// <summary>
        /// Static constructor.
        /// </summary>
        static KubernetesClient()
        {
            Initialize();
        }

        /// <summary>
        /// Handles initialzation of the stock <see cref="Kubernetes"/> client's JSON serializer to
        /// support <see cref="EnumMemberAttribute"/> and perhaps customize other settings.  This
        /// is required to support our custom resources.
        /// </summary>
        /// <remarks>
        /// <para>
        /// This must be called before any stock <see cref="Kubernetes"/> instances are created because
        /// the JSON serializer settings cannot be changed after and client instances are created.
        /// </para>
        /// <para>
        /// Services derived from <b>Neon.Service.NeonService</b> shouldn't need to worry about this
        /// because its constructor calls this whenever the <b>Neon.Kube</b> assembly is loaded in
        /// the current appdomain.  For other secenarios, you may need to call this explicitly 
        /// early in your application.
        /// </para>
        /// </remarks>
        public static void Initialize()
        {
            // $hack(jefflill/marcusbooyah):
            //
            // The stock Kubernetes client doesn't honor [EnumMember] attributes when serializing
            // Kubernetes objects to JSON.  This code uses reflection to add a [JsonStringEnumMemberConverter]
            // to the [Kubernetes] class.
            //
            // More info: https://github.com/nforgeio/neonKUBE/issues/1517

            if (isInitialized)
            {
                return;
            }

            var kubernetesJsonType = typeof(Kubernetes).Assembly.GetType("k8s.KubernetesJson");

            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(kubernetesJsonType.TypeHandle);

            var member  = kubernetesJsonType.GetField("JsonSerializerOptions", BindingFlags.Static | BindingFlags.NonPublic);
            var options = (JsonSerializerOptions)member.GetValue(kubernetesJsonType);

            options.Converters.Add(new JsonStringEnumMemberConverter());

            isInitialized = true;
        }

        //---------------------------------------------------------------------
        // Instance methods

        /// <summary>
        /// Initializes a new instance of the <see cref="KubernetesClient" /> class.
        /// </summary>
        /// <param name="config">The kube config to use.</param>
        /// <param name="httpClient">The <see cref="HttpClient" /> to use for all requests.</param>
        public KubernetesClient(global::k8s.KubernetesClientConfiguration config, global::System.Net.Http.HttpClient httpClient)
            : base(config, httpClient)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KubernetesClient" /> class.
        /// </summary>
        /// <param name="config">The kube config to use.</param>
        /// <param name="httpClient">The <see cref="HttpClient" /> to use for all requests.</param>
        /// <param name="disposeHttpClient">
        /// Whether or not the <see cref="KubernetesClient"/> object should own the lifetime of <paramref name="httpClient"/>.
        /// </param>
        public KubernetesClient(global::k8s.KubernetesClientConfiguration config, global::System.Net.Http.HttpClient httpClient, bool disposeHttpClient)
            : base(config, httpClient, disposeHttpClient)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KubernetesClient"/> class.
        /// </summary>
        /// <param name="config">The kube config to use.</param>
        /// <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        public KubernetesClient(global::k8s.KubernetesClientConfiguration config, params global::System.Net.Http.DelegatingHandler[] handlers)
            : base(config, handlers)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KubernetesClient"/> class.
        /// </summary>
        /// <param name="credentials">Required. Subscription credentials which uniquely identify client subscription.</param>
        /// <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        public KubernetesClient(global::Microsoft.Rest.ServiceClientCredentials credentials, params global::System.Net.Http.DelegatingHandler[] handlers)
            : base(credentials, handlers)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KubernetesClient"/> class.
        /// </summary>
        /// <param name="credentials">Required. Subscription credentials which uniquely identify client subscription.</param>
        /// <param name="httpClient">HttpClient to be used</param>
        /// <param name="disposeHttpClient">
        /// True: will dispose the provided httpClient on calling Kubernetes.Dispose(). False: will not dispose provided httpClient
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        [Obsolete]
        public KubernetesClient(global::Microsoft.Rest.ServiceClientCredentials credentials, global::System.Net.Http.HttpClient httpClient, bool disposeHttpClient)
            : base(credentials, httpClient, disposeHttpClient)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KubernetesClient"/> class.
        /// </summary>
        /// <param name="credentials">Required. Subscription credentials which uniquely identify client subscription.</param>
        /// <param name="rootHandler">Optional. The http client handler used to handle http transport.</param>
        /// <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        /// <exception cref="ArgumentNullException">Thrown when a required parameter is null</exception>
        public KubernetesClient(global::Microsoft.Rest.ServiceClientCredentials credentials, global::System.Net.Http.HttpClientHandler rootHandler, params global::System.Net.Http.DelegatingHandler[] handlers)
            : base(credentials, rootHandler, handlers)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KubernetesClient"/> class.
        /// </summary>
        /// <param name="baseUri">Optional. The base URI of the service.</param>
        /// <param name="credentials">Required. Subscription credentials which uniquely identify client subscription.</param>
        /// <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        /// <exception cref="ArgumentNullException">Thrown when a required parameter is null</exception>
        public KubernetesClient(global::System.Uri baseUri, global::Microsoft.Rest.ServiceClientCredentials credentials, params global::System.Net.Http.DelegatingHandler[] handlers)
            : base(baseUri, credentials, handlers)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KubernetesClient"/> class.
        /// </summary>
        /// <param name="baseUri">Optional. The base URI of the service.</param>
        /// <param name="credentials">Required. Subscription credentials which uniquely identify client subscription.</param>
        /// <param name="rootHandler">Optional. The http client handler used to handle http transport.</param>
        /// <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        /// <exception cref="ArgumentNullException">Thrown when a required parameter is null</exception>
        public KubernetesClient(global::System.Uri baseUri, global::Microsoft.Rest.ServiceClientCredentials credentials, global::System.Net.Http.HttpClientHandler rootHandler, params global::System.Net.Http.DelegatingHandler[] handlers)
            : base(baseUri, credentials, rootHandler, handlers)
        {
        }
    }
}
