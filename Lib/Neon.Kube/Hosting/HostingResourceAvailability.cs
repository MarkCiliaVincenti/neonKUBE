//-----------------------------------------------------------------------------
// FILE:	    HostingResourceAvailability.cs
// CONTRIBUTOR: Jeff Lill
// COPYRIGHT:	Copyright (c) 2005-2022 by neonFORGE LLC.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;

using Neon.Common;

namespace Neon.Kube
{
    /// <summary>
    /// Describes the availability of a resource like RAM or disk required to install 
    /// cluster via a <see cref="IHostingManager"/>.  This will be generated by a call to 
    /// <see cref="IHostingManager.GetResourceAvailability"/> before beginning cluster
    /// deployment to ensure that sufficient resources are available.
    /// </summary>
    public class HostingResourceAvailability
    {
        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="type">Specifies the resource type: RAM, disk, etc.</param>
        /// <param name="host">Identifies a specific host like a target XenServer.</param>
        /// <param name="node">Identifies the cluster node consuming the resources.</param>
        /// <param name="available">Indicates whether the resource is available in sufficient quantity to deploy a cluster.</param>
        /// <param name="details">Optionally details any problems.  This is required when <paramref name="available"/> is <c>true</c>.</param>
        public HostingResourceAvailability(HostingResourceType type, string host, string node, bool available, string details = null)
        {
            Covenant.Requires<ArgumentNullException>(!string.IsNullOrEmpty(host), nameof(host));
            Covenant.Requires<ArgumentNullException>(!string.IsNullOrEmpty(node), nameof(node));
            Covenant.Requires<ArgumentNullException>(available || !string.IsNullOrEmpty(details), nameof(details));

            this.Type      = type;
            this.Host      = host;
            this.Node      = node;
            this.Available = available;
            this.Details   = details;
        }

        /// <summary>
        /// Specifies the resource type.
        /// </summary>
        public HostingResourceType Type { get; private set; }

        /// <summary>
        /// Identifies a specific host like a target XenServer.
        /// </summary>
        public string Host { get; private set; }

        /// <summary>
        /// Identifies the cluster node consuming the resources.
        /// </summary>
        public string Node { get; private set; }

        /// <summary>
        /// Indicates whether the resource is available in sufficient quantity to deploy a cluster.
        /// </summary>
        public bool Available { get; private set; }

        /// <summary>
        /// Optionally details any problems.  This is required when <see cref="Available"/> is <c>true</c>.
        /// </summary>
        public string Details { get; private set; }
    }
}
