<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.ModelGen</name>
    </assembly>
    <members>
        <member name="T:Neon.ModelGen.CompilerErrorException">
            <summary>
            Thrown for a compiler error.
            </summary>
        </member>
        <member name="M:Neon.ModelGen.CompilerErrorException.GetMessage(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic})">
            <summary>
            Converts compiler diagnostics into a string.
            </summary>
            <param name="diagnostics">The compiler diagnostics.</param>
            <returns>The diagnostics string.</returns>
        </member>
        <member name="M:Neon.ModelGen.CompilerErrorException.#ctor(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic})">
            <summary>
            Constructor.
            </summary>
            <param name="diagnostics">The compiler diagnostics.</param>
        </member>
        <member name="T:Neon.ModelGen.DataModel">
            <summary>
            Holds information about a data model extracted from a source assembly.
            </summary>
        </member>
        <member name="M:Neon.ModelGen.DataModel.#ctor(System.Type,Neon.ModelGen.ModelGenerator)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceType">The source data type.</param>
            <param name="modelGenerator">The model code generator instance.</param>
        </member>
        <member name="P:Neon.ModelGen.DataModel.SourceType">
            <summary>
            Returns the source type.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataModel.Targets">
            <summary>
            Returns the targets for the type.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataModel.PersistedType">
            <summary>
            Optional type identifier to be used for persisting the type.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataModel.IsEnum">
            <summary>
            Indicates that the type is an <c>enum</c>.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataModel.HasEnumFlags">
            <summary>
            Indicates that the <b>enum</b> type has a <c>[Flags]</c> attribute.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataModel.BaseTypeName">
            <summary>
            Returns the base type name for both <c>enum</c> and other data model types
            or <c>null</c> if there is no base type (other than <c>object</c>).
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataModel.BaseModel">
            <summary>
            The base <see cref="T:Neon.ModelGen.DataModel"/> or <c>null</c> if the current
            data model isn't derived from another.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataModel.Persistable">
            <summary>
            Returns the entity persistence settings if the data model was tagged with <c>[Persistedable]</c>
            or <c>null</c> otherwise.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataModel.IsPersistable">
            <summary>
            Returns <c>true</c> if the data model is persistable.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataModel.IsDerived">
            <summary>
            Indicates whether the current data model is derived from another model.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataModel.EnumMembers">
            <summary>
            Lists the members for <c>enum</c> types.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataModel.Properties">
            <summary>
            Lists the properties for a data model.
            </summary>
        </member>
        <member name="M:Neon.ModelGen.DataModel.SelectProperties(System.Func{Neon.ModelGen.DataProperty,System.Boolean},System.Boolean)">
            <summary>
            Returns the data model properties that satisfy a filter.
            </summary>
            <param name="selector">The property selector.</param>
            <param name="includeInherited">Optionally include properties inherited from ancestor data models.</param>
            <returns>The list of selected properties.</returns>
        </member>
        <member name="T:Neon.ModelGen.DataProperty">
            <summary>
            Describes a <see cref="T:Neon.ModelGen.DataModel"/> property.
            </summary>
        </member>
        <member name="M:Neon.ModelGen.DataProperty.#ctor(Neon.ModelGen.ModelGeneratorOutput)">
            <summary>
            Constructor.
            </summary>
            <param name="output">The code generator output.</param>
        </member>
        <member name="P:Neon.ModelGen.DataProperty.Ignore">
            <summary>
            True when this property is not to be serialized.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataProperty.Type">
            <summary>
            The property type.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataProperty.IsNullable">
            <summary>
            Returns <c>true</c> if the property type is nullable.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataProperty.IsHashSource">
            <summary>
            <para>
            Returns <c>true</c> if the property is to be included in
            the generated <see cref="M:System.Object.GetHashCode"/> method's
            hash code computation.
            </para>
            <note>
            At least one property must be tagged with this for 
            <see cref="M:System.Object.GetHashCode"/> to work.
            </note>
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataProperty.Name">
            <summary>
            The property name for generated code.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataProperty.SerializedName">
            <summary>
            The property name to be used for serialization.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataProperty.Order">
            <summary>
            Controls the order for which this property will be serialized.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataProperty.Required">
            <summary>
            Property presence requirements.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataProperty.RequiresObjectification">
            <summary>
            Returns <c>true</c> if the property type requires conversion
            to an object before assignment to a <see cref="T:Newtonsoft.Json.Linq.JObject"/> property.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataProperty.DefaultValue">
            <summary>
            Set to the value specified by a <see cref="T:System.ComponentModel.DefaultValueAttribute"/> 
            on the property or the default value for the property type.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataProperty.DefaultValueLiteral">
            <summary>
            Returns <see cref="P:Neon.ModelGen.DataProperty.DefaultValue"/> as an expression string or
            <c>null</c> if the property has no default value or if it's
            the same as the default value for the property type.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.DataProperty.DefaultValueHandling">
            <summary>
            Set the value specified by a <see cref="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling"/>
            attribute on the property.
            </summary>
        </member>
        <member name="T:Neon.ModelGen.EnumMember">
            <summary>
            Describes an <c>enum</c> member.
            </summary>
        </member>
        <member name="M:Neon.ModelGen.EnumMember.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.EnumMember.Name">
            <summary>
            The enumeration value name as it appears in code.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.EnumMember.SerializedName">
            <summary>
            The enumeration value name as it is serialized.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.EnumMember.OrdinalValue">
            <summary>
            The enumeration ordinal value.
            </summary>
        </member>
        <member name="T:Neon.ModelGen.MetadataReferences">
            <summary>
            Specifies the metadata references to be used when compiling
            C# code.
            </summary>
        </member>
        <member name="M:Neon.ModelGen.MetadataReferences.Add(System.Type)">
            <summary>
            Adds the assembly holding a specific type to the references.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:Neon.ModelGen.MethodParameter">
            <summary>
            Holds information about a service model method parameter.
            </summary>
        </member>
        <member name="M:Neon.ModelGen.MethodParameter.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="parameterInfo">The .NET parameter information.</param>
        </member>
        <member name="P:Neon.ModelGen.MethodParameter.ParameterInfo">
            <summary>
            Returns the low-level .NET parameter information.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.MethodParameter.Name">
            <summary>
            Returns the parameter name.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.MethodParameter.Pass">
            <summary>
            Specifies how the parameter shoud be passed to the service endpoint.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.MethodParameter.SerializedName">
            <summary>
            The parameter or HTTP header name to use when passing the parameter as <see cref="F:Neon.ModelGen.Pass.AsQuery"/>
            <see cref="F:Neon.ModelGen.Pass.AsRoute"/>, or <see cref="F:Neon.ModelGen.Pass.AsHeader"/>.  This is ignored for <see cref="F:Neon.ModelGen.Pass.AsBody"/>.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.MethodParameter.IsOptional">
            <summary>
            Returns <c>true</c> if the parameter is optional.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.MethodParameter.DefaultValue">
            <summary>
            Returns the the default for parameters where <see cref="P:Neon.ModelGen.MethodParameter.IsOptional"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.MethodParameter.DefaultValueLiteral">
            <summary>
            Returns <see cref="P:Neon.ModelGen.MethodParameter.DefaultValue"/> as an expression string or
            <c>null</c> if the parameter is not optional.
            </summary>
        </member>
        <member name="T:Neon.ModelGen.ModelGenerator">
            <summary>
            Handles data model and service client code generation.
            </summary>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.Compile(System.String,System.String,System.Action{Neon.ModelGen.MetadataReferences},Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions)">
            <summary>
            Compiles C# source code into an assembly.
            </summary>
            <param name="source">The C# source code.</param>
            <param name="assemblyName">The generated assembly name.</param>
            <param name="referenceHandler">Called to manage metadata/assembly references (see remarks).</param>
            <param name="options">Optional compilation options.  This defaults to building a release assembly.</param>
            <returns>The compiled assembly as a <see cref="T:System.IO.MemoryStream"/>.</returns>
            <exception cref="T:Neon.ModelGen.CompilerErrorException">Thrown for compiler errors.</exception>
            <remarks>
            <para>
            By default, this method will compile the assembly with references to 
            .NET Standard 2.0.
            </para>
            <para>
            You may customize these by passing a <paramref name="referenceHandler"/>
            action.  This is passed the list of <see cref="T:Microsoft.CodeAnalysis.MetadataReference"/> instances.
            You can add or remove references as required.  The easiest way to add
            a reference is to use type reference like:
            </para>
            <code>
            using Microsoft.CodeAnalysis;
            
            ...
            
            var source   = "public class Foo {}";
            var assembly = ModelGenerator.Compile(source, "my-assembly",
                references =>
                {
                    references.Add(typeof(MyClass));    // Adds the assembly containing MyClass.
                });
            </code>
            </remarks>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.#ctor(Neon.ModelGen.ModelGeneratorSettings)">
            <summary>
            Constructs a code generator.
            </summary>
            <param name="settings">Optional settings.  Reasonable defaults will be used when this is <c>null</c>.</param>
        </member>
        <member name="P:Neon.ModelGen.ModelGenerator.Settings">
            <summary>
            Returns the code generation settings.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ModelGenerator.Output">
            <summary>
            Returns the code generator output instance.
            </summary>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.Generate(System.Reflection.Assembly[])">
            <summary>
            Generates code from a set of source assemblies.
            </summary>
            <param name="assemblies">The source assemblies.</param>
            <returns>A <see cref="T:Neon.ModelGen.ModelGeneratorOutput"/> instance holding the results.</returns>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.ScanAssembly(System.Reflection.Assembly)">
            <summary>
            <para>
            Scans an assembly for data and service models and loads information about these
            to <see cref="F:Neon.ModelGen.ModelGenerator.nameToDataModel"/> and <see cref="F:Neon.ModelGen.ModelGenerator.nameToServiceModel"/>.
            </para>
            <note>
            This method will honor any target filters specified by
            <see cref="P:Neon.ModelGen.ModelGeneratorSettings.Targets"/>.
            </note>
            </summary>
            <param name="assembly">The source assembly.</param>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.FilterModels">
            <summary>
            Removes any data and/or service models that are not within any 
            of the targeted groups.
            </summary>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.LoadServiceModel(System.Type)">
            <summary>
            Loads the required information for a service model type.
            </summary>
            <param name="serviceModelType">The source type.</param>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.LoadDataModel(System.Type,System.Boolean)">
            <summary>
            Loads the required information for a data model type.
            </summary>
            <param name="dataType">The source data model type.</param>
            <param name="preload">Optionally just preload the data model definitions so we can handle forward references.</param>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.CheckForErrors">
            <summary>
            Checks the loaded service and data models for problems.
            </summary>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.GenerateCode">
            <summary>
            Generates code from the input models.
            </summary>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.IsSafeType(System.Type)">
            <summary>
            Determines whether a type is safe to use as a data model property.
            </summary>
            <param name="type">The type being checked.</param>
            <returns><c>true</c> if the type is safe.</returns>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.GenerateDataModel(Neon.ModelGen.DataModel,System.Boolean)">
            <summary>
            Generates source code for a data model.
            </summary>
            <param name="dataModel">The data model.</param>
            <param name="genPersistence">Optionally enables the generation of database persistence related code for this data model.</param>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.GenerateServiceClient(System.String,System.Collections.Generic.IEnumerable{Neon.ModelGen.ServiceModel})">
            <summary>
            Generates a service client for a one or more related service controllers.
            </summary>
            <param name="clientTypeName">The client type name.</param>
            <param name="serviceModels">One or more service models to be included in the generated output.</param>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.GenerateServiceMethod(Neon.ModelGen.ServiceMethod,System.String)">
            <summary>
            Generates a service's method code.
            </summary>
            <param name="serviceMethod">The service method.</param>
            <param name="indent">Optionally specifies additional source code indentation.</param>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.IsValidMethodType(System.Type,Neon.ModelGen.Pass)">
            <summary>
            Determines whether a type can be used as a service method parameter
            or result.
            </summary>
            <param name="type">The type being tested.</param>
            <param name="pass">Indicates how the value will be serialized.</param>
            <returns><c>true</c> if the type is valid.</returns>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.GetTypeName(System.Type)">
            <summary>
            Returns the name we'll use for a type when generating type references.
            </summary>
            <param name="type">The type.</param>
            <returns>The type name.</returns>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.StripNamespace(System.String)">
            <summary>
            Strips the namespace (if present) from a type name.
            </summary>
            <param name="typeName">The type name.</param>
            <returns>The type name without the namespace.</returns>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.ResolveTypeReference(System.Type,System.Boolean)">
            <summary>
            Resolves the type passed into a nice string taking generic types 
            and arrays into account.
            </summary>
            <param name="type">The referenced type.</param>
            <param name="isResultType">Optionally allow the <c>void</c> and related types (used for service method results).</param>
            <returns>The type reference as a string or <c>null</c> if the type is not valid.</returns>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.ResolveTypeReference(System.Type,System.Boolean@,System.Boolean)">
            <summary>
            Resolves the type passed into a nice string taking generic types 
            and arrays into account.
            </summary>
            <param name="type">The referenced type.</param>
            <param name="isModelType">Returns <c>true</c> if the type is a defined data model.</param>
            <param name="isResultType">Optionally allow the <c>void</c> and related types (used for service method results).</param>
            <returns>The type reference as a string or <c>null</c> if the type is not valid.</returns>
        </member>
        <member name="M:Neon.ModelGen.ModelGenerator.ConcatRoutes(System.String[])">
            <summary>
            Concatenates zero or more service route templates into an absolute 
            route template.
            </summary>
            <param name="routes">The route templates being concatenated.</param>
            <returns>The absolute route template.</returns>
        </member>
        <member name="T:Neon.ModelGen.ModelGeneratorOutput">
            <summary>
            Holds the output of a model code generation.
            </summary>
        </member>
        <member name="M:Neon.ModelGen.ModelGeneratorOutput.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ModelGeneratorOutput.HasErrors">
            <summary>
            Indicates whether the coder generator reported any errors.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ModelGeneratorOutput.Errors">
            <summary>
            Returns the list of code generator errors (if any).
            </summary>
        </member>
        <member name="M:Neon.ModelGen.ModelGeneratorOutput.Error(System.String)">
            <summary>
            Appends an error message to the output.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:Neon.ModelGen.ModelGeneratorOutput.SourceCode">
            <summary>
            Returns the generated source code.
            </summary>
        </member>
        <member name="T:Neon.ModelGen.ModelGeneratorSettings">
            <summary>
            Specifies model code generator settings.
            </summary>
        </member>
        <member name="M:Neon.ModelGen.ModelGeneratorSettings.#ctor(System.String[])">
            <summary>
            Constructs an instance with reasonable settings.
            </summary>
            <param name="targetGroups">
            Specifies the targets to be included in the generated output code.
            </param>
        </member>
        <member name="P:Neon.ModelGen.ModelGeneratorSettings.NoServiceClients">
            <summary>
            Indicates that service client code should not be generated.  This defaults to
            <c>false</c> and may be set to <c>true</c> when only the data models
            need to be generated.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ModelGeneratorSettings.ServiceClients">
            <summary>
            Returns <c>true</c> if service client code generation is enabled.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ModelGeneratorSettings.UxFramework">
            <summary>
            Optionally specifies the user experience framework that the generated 
            classes should support by generating additional code.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ModelGeneratorSettings.RoundTrip">
            <summary>
            Enhances data model code generation to prevent property loss
            for noSQL scenarios where somebody added a model property before
            all referencing applications have regenerated their data models.  
            This defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ModelGeneratorSettings.Persisted">
            <summary>
            Optionally generate generated database persistance related code for
            data models tagged with <c>[Persistable]</c>.  This defaults to
            <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ModelGeneratorSettings.Targets">
            <summary>
            <para>
            Used to select a specific targets to be included in the
            generated output.
            </para>
            <note>
            All groups will be generated when the <see cref="P:Neon.ModelGen.ModelGeneratorSettings.Targets"/> 
            list is empty.
            </note>
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ModelGeneratorSettings.TargetNamespace">
            <summary>
            Specifies the C# <c>namespace</c> to be used when generating the output
            code.  This defaults to <c>Neon.ModelGen.Output</c>.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ModelGeneratorSettings.SourceNamespace">
            <summary>
            Specifies the C# <c>namespace</c> to be used to filter the
            service and data model classes processed by the code generator.
            This is especially handy for unit testing.  This defaults to
            <c>null</c> which disables any filtering.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ModelGeneratorSettings.AllowDebuggerStepInto">
            <summary>
            Optionally enables source code debuggers to step into methods and properties 
            generated for both data and service models.  This is normally used
            only when debugging model generation and defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ModelGeneratorSettings.V1Compatible">
            <summary>
            <para>
            Optionally specifies that model classes should be generated such that 
            document type <c>__T</c> properties be serialized using the old v1.x
            compatible <b>"__T"</b> property name rather than the <b>"T$$"</b>
            property name generated for <b>Neon.ModelGen v2+</b>.
            </para>
            <para>
            New projects should leave this alone but existing 1.x based projects
            must set this to <c>true</c> or use the new <b>neon-modelgen --v1compatible</b> 
            option to avoid database corruption and/or data transmission issues. 
            See <a href="https://github.com/nforgeio/neonKUBE/issues/776">#776</a>
            for more information.
            </para>
            </summary>
        </member>
        <member name="T:Neon.ModelGen.NamespaceDoc">
            <summary>
            <para>
            This namespace includes the types used to generate data models from interface definitions. 
            These models can be built to support round-tripping data without loss as well as optionally
            adding <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> related code for UX binding.
            </para>
            <para>
            You can use these classes to integrate model generation into your own tooling or use the
            <b>Neon.ModelGenerator</b> package which includes the pre-built <b>neon-modelgen</b> 
            command line tool.  You'll add a reference to this package to your project and then
            add a custom build target to invoke <b>neon-modelgen</b>.
            </para>
            </summary>
        </member>
        <member name="T:Neon.ModelGen.NamespaceInfo">
            <summary>
            Used to collect information about the items to be generated 
            within an output namespace.
            </summary>
        </member>
        <member name="M:Neon.ModelGen.NamespaceInfo.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="outputNamespace">The output namespace name.</param>
        </member>
        <member name="P:Neon.ModelGen.NamespaceInfo.OutputNamespace">
            <summary>
            Returns the output namspace name.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.NamespaceInfo.DataModels">
            <summary>
            Lists the data models to be generated within this namespace.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.NamespaceInfo.ServiceModels">
            <summary>
            Lists the service models to be generated within this namespace.
            </summary>
        </member>
        <member name="T:Neon.ModelGen.Pass">
            <summary>
            Specifies how a service method value is passed within a REST
            service request.
            </summary>
        </member>
        <member name="F:Neon.ModelGen.Pass.Default">
            <summary>
            Uses default routing.
            </summary>
        </member>
        <member name="F:Neon.ModelGen.Pass.AsQuery">
            <summary>
            Passes the parameter as a URI query parameter.
            </summary>
        </member>
        <member name="F:Neon.ModelGen.Pass.AsRoute">
            <summary>
            Passes the parameter within the URI route template. 
            </summary>
        </member>
        <member name="F:Neon.ModelGen.Pass.AsHeader">
            <summary>
            Passes the parameter as an HTTP header.
            </summary>
        </member>
        <member name="F:Neon.ModelGen.Pass.AsBody">
            <summary>
            Passes the parameter as the HTTP request body. 
            </summary>
        </member>
        <member name="F:Neon.ModelGen.Pass.AsResult">
            <summary>
            Returns the type as a result.
            </summary>
        </member>
        <member name="T:Neon.ModelGen.ServiceMethod">
            <summary>
            Describes a service method.
            </summary>
        </member>
        <member name="M:Neon.ModelGen.ServiceMethod.#ctor(Neon.ModelGen.ServiceModel)">
            <summary>
            Constructor.
            </summary>
            <param name="serviceModel">The parent <see cref="P:Neon.ModelGen.ServiceMethod.ServiceModel"/>.</param>
        </member>
        <member name="P:Neon.ModelGen.ServiceMethod.ServiceModel">
            <summary>
            Returns the parent <see cref="P:Neon.ModelGen.ServiceMethod.ServiceModel"/>.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ServiceMethod.MethodInfo">
            <summary>
            Describes the low-level method name, parameters, and result.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ServiceMethod.IsVoid">
            <summary>
            Returns <c>true</c> if the method returns <c>void</c>.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ServiceMethod.Name">
            <summary>
            The method name to use when generating code for this method.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ServiceMethod.RouteTemplate">
            <summary>
            <para>
            Specifies the route template for this method.
            This includes the service model's route as well.
            </para>
            <note>
            This does not include the service controller's route prefix.
            </note>
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ServiceMethod.HttpMethod">
            <summary>
            Specifies the HTTP method to use for invoking the method.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ServiceMethod.Parameters">
            <summary>
            Returns the list of method parameters.
            </summary>
        </member>
        <member name="T:Neon.ModelGen.ServiceModel">
            <summary>
            Holds information about a service model extracted from a source assembly.
            </summary>
        </member>
        <member name="M:Neon.ModelGen.ServiceModel.#ctor(System.Type,Neon.ModelGen.ModelGenerator)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceType">The source service type.</param>
            <param name="modelGenerator">The code generator instance.</param>
        </member>
        <member name="P:Neon.ModelGen.ServiceModel.SourceType">
            <summary>
            Returns the source type.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ServiceModel.Targets">
            <summary>
            Returns the targets for the type.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ServiceModel.ClientTypeName">
            <summary>
            Specifies the class name to use for the generated service client.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ServiceModel.ClientGroup">
            <summary>
            Optionally used group multiple services into a single generated service client.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ServiceModel.RouteTemplate">
            <summary>
            Optionally specifies the route template prefix for the service.
            </summary>
        </member>
        <member name="P:Neon.ModelGen.ServiceModel.Methods">
            <summary>
            Lists the service.
            </summary>
        </member>
        <member name="T:Neon.ModelGen.UxFrameworks">
            <summary>
            Enumerates the user interface frameworks that are supported with
            additional generated code.
            </summary>
        </member>
        <member name="F:Neon.ModelGen.UxFrameworks.None">
            <summary>
            Disables generation of additional UX related code.
            </summary>
        </member>
        <member name="F:Neon.ModelGen.UxFrameworks.Xaml">
            <summary>
            Generate property and collection change notifications to support
            data binding for XAML UX frameworks.
            </summary>
        </member>
    </members>
</doc>
