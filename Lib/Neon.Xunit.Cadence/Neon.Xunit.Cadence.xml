<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.Xunit.Cadence</name>
    </assembly>
    <members>
        <member name="T:Neon.Xunit.Cadence.CadenceFixture">
            <summary>
            Used to run the Docker <b>ghcr.io/neonrelease/cadence-dev</b> container on 
            the current machine as a test fixture while tests are being performed 
            and then deletes the container when the fixture is disposed.
            </summary>
            <remarks>
            <note>
            <para>
            <b>IMPORTANT:</b> The base Neon <see cref="T:Neon.Xunit.TestFixture"/> implementation <b>DOES NOT</b>
            support parallel test execution because fixtures may impact global machine state
            like starting a Docker container, modifying the local DNS <b>hosts</b> file, or 
            configuring a test database.
            </para>
            <para>
            You should explicitly disable parallel execution in all test assemblies that
            rely on test fixtures by adding a C# file called <c>AssemblyInfo.cs</c> with:
            </para>
            <code language="csharp">
            [assembly: CollectionBehavior(DisableTestParallelization = true, MaxParallelThreads = 1)]
            </code>
            <para>
            and then define your test classes like:
            </para>
            <code language="csharp">
            public class MyTests
            {
                [Collection(TestCollection.NonParallel)]
                [CollectionDefinition(TestCollection.NonParallel, DisableParallelization = true)]
                [Fact]
                public void Test()
                {
                }
            }
            </code>
            </note>
            <para>
            This fixture assumes that Cadence is not currently running on the
            local workstation or as a container named <b>cadence-dev</b>.
            You may see port conflict errors if either of these conditions
            are not true.
            </para>
            <para>
            See <see cref="M:Neon.Xunit.Cadence.CadenceFixture.Start(Neon.Cadence.CadenceSettings,System.String,System.String,System.String,Neon.Diagnostics.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
            for more information about how this works.
            </para>
            <note>
            You can persist <see cref="T:Neon.Cadence.CadenceClient"/> instances to the underlying <see cref="P:Neon.Xunit.TestFixture.State"/>
            dictionary to make these clients available across all test methods.  <see cref="T:Neon.Xunit.Cadence.CadenceFixture"/>
            ensures that any of these clients will be disposed when the fixture is disposed,
            reset, or restarted.
            </note>
            </remarks>
            <threadsafety instance="true"/>
        </member>
        <member name="F:Neon.Xunit.Cadence.CadenceFixture.DefaultComposeFile">
            <summary>
            The default Docker compose file text used to spin up Temporal and its related services
            by the <see cref="T:Neon.Xunit.Cadence.CadenceFixture"/>.
            </summary>
        </member>
        <member name="F:Neon.Xunit.Cadence.CadenceFixture.DefaultDomain">
            <summary>
            The default domain configured for <see cref="T:Neon.Xunit.Cadence.CadenceFixture"/> clients.
            </summary>
        </member>
        <member name="M:Neon.Xunit.Cadence.CadenceFixture.#ctor">
            <summary>
            Constructs the fixture.
            </summary>
        </member>
        <member name="M:Neon.Xunit.Cadence.CadenceFixture.Start(Neon.Cadence.CadenceSettings,System.String,System.String,System.String,Neon.Diagnostics.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <para>
            Starts a Cadence container if it's not already running.  You'll generally want
            to call this in your test class constructor instead of <see cref="M:Neon.Xunit.ITestFixture.Start(System.Action)"/>.
            </para>
            <note>
            You'll need to call <see cref="M:Neon.Xunit.Cadence.CadenceFixture.StartAsComposed(Neon.Cadence.CadenceSettings,System.String,System.String,System.String,Neon.Diagnostics.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
            instead when this fixture is being added to a <see cref="T:Neon.Xunit.ComposedFixture"/>.
            </note>
            </summary>
            <param name="settings">Optional Cadence settings.</param>
            <param name="name">Optionally specifies the Cadence container name (defaults to <c>cadence-dev</c>).</param>
            <param name="composeFile">
            <para>
            Optionally specifies the Temporal Docker compose file text.  This defaults to
            <see cref="F:Neon.Xunit.Cadence.CadenceFixture.DefaultComposeFile"/> which configures Temporal server to start with
            a new Cassandra database instance listening on port <b>9042</b> as well as the
            Temporal web UI running on port <b>8088</b>.  Temporal server is listening on
            its standard gRPC port <b>7233</b>.
            </para>
            <para>
            You may specify your own Docker compose text file to customize this by configuring
            a different backend database, etc.
            </para>
            </param>
            <param name="defaultDomain">Optionally specifies the default domain for the fixture's client.  This defaults to <b>test-domain</b>.</param>
            <param name="logLevel">Specifies the Cadence log level.  This defaults to <see cref="F:Neon.Diagnostics.LogLevel.None"/>.</param>
            <param name="reconnect">
            Optionally specifies that a new Cadence connection <b>should</b> be established for each
            unit test case.  By default, the same connection will be reused which will save about a 
            second per test.
            </param>
            <param name="keepRunning">
            Optionally indicates that the container should remain running after the fixture is disposed.
            This is handy for using the Temporal web UI for port mortems after tests have completed.
            </param>
            <param name="noClient">
            Optionally disables establishing a client connection when <c>true</c>
            is passed.  The <see cref="P:Neon.Xunit.Cadence.CadenceFixture.Client"/> and <see cref="P:Neon.Xunit.Cadence.CadenceFixture.HttpClient"/> properties
            will be set to <c>null</c> in this case.
            </param>
            <param name="noReset">
            Optionally prevents the fixture from calling <see cref="M:Neon.Cadence.CadenceClient.Reset"/> to
            put the Cadence client library into its initial state before the fixture starts as well
            as when the fixture itself is reset.
            </param>
            <returns>
            <see cref="F:Neon.Xunit.TestFixtureStatus.Started"/> if the fixture wasn't previously started and
            this method call started it or <see cref="F:Neon.Xunit.TestFixtureStatus.AlreadyRunning"/> if the 
            fixture was already running.
            </returns>
            <remarks>
            <note>
            Some of the <paramref name="settings"/> properties will be ignored including 
            <see cref="P:Neon.Cadence.CadenceSettings.Servers"/>.  This will be replaced by the local
            endpoint for the Cadence container.  Also, the fixture will connect to the 
            <b>default</b> Cadence domain by default (unless another is specified).
            </note>
            <note>
            A fresh Cadence client <see cref="P:Neon.Xunit.Cadence.CadenceFixture.Client"/> will be established every time this
            fixture is started, regardless of whether the fixture has already been started.  This
            ensures that each unit test will start with a client in the default state.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Xunit.Cadence.CadenceFixture.StartAsComposed(Neon.Cadence.CadenceSettings,System.String,System.String,System.String,Neon.Diagnostics.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to start the fixture within a <see cref="T:Neon.Xunit.ComposedFixture"/>.
            </summary>
            <param name="settings">Optional Cadence settings.</param>
            <param name="name">Optionally specifies the Cadence container name (defaults to <c>cadence-dev</c>).</param>
            <param name="composeFile">
            <para>
            Optionally specifies the Temporal Docker compose file text.  This defaults to
            <see cref="F:Neon.Xunit.Cadence.CadenceFixture.DefaultComposeFile"/> which configures Temporal server to start with
            a new Cassandra database instance listening on port <b>9042</b> as well as the
            Temporal web UI running on port <b>8088</b>.  Temporal server is listening on
            its standard gRPC port <b>7233</b>.
            </para>
            <para>
            You may specify your own Docker compose text file to customize this by configuring
            a different backend database, etc.
            </para>
            </param>
            <param name="defaultDomain">Optionally specifies the default domain for the fixture's client.  This defaults to <b>test-domain</b>.</param>
            <param name="logLevel">Specifies the Cadence log level.  This defaults to <see cref="F:Neon.Diagnostics.LogLevel.None"/>.</param>
            <param name="reconnect">
            Optionally specifies that a new Cadence connection <b>should</b> be established for each
            unit test case.  By default, the same connection will be reused which will save about a 
            second per test case.
            </param>
            <param name="keepRunning">
            Optionally indicates that the container should remain running after the fixture is disposed.
            This is handy for using the Temporal web UI for port mortems after tests have completed.
            </param>
            <param name="noClient">
            Optionally disables establishing a client connection when <c>true</c>
            is passed.  The <see cref="P:Neon.Xunit.Cadence.CadenceFixture.Client"/> and <see cref="P:Neon.Xunit.Cadence.CadenceFixture.HttpClient"/> properties
            will be set to <c>null</c> in this case.
            </param>
            <param name="noReset">
            Optionally prevents the fixture from calling <see cref="M:Neon.Cadence.CadenceClient.Reset"/> to
            put the Cadence client library into its initial state before the fixture starts as well
            as when the fixture itself is reset.
            </param>
            <remarks>
            <note>
            A fresh Cadence client <see cref="P:Neon.Xunit.Cadence.CadenceFixture.Client"/> will be established every time this
            fixture is started, regardless of whether the fixture has already been started.  This
            ensures that each unit test will start with a client in the default state.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Xunit.Cadence.CadenceFixture.Settings">
            <summary>
            Returns the settings used to connect to the Cadence cluster.
            </summary>
        </member>
        <member name="P:Neon.Xunit.Cadence.CadenceFixture.Client">
            <summary>
            Returns the <see cref="T:Neon.Cadence.CadenceClient"/> to be used to interact with Cadence.
            </summary>
        </member>
        <member name="P:Neon.Xunit.Cadence.CadenceFixture.HttpClient">
            <summary>
            Returns a <see cref="T:System.Net.Http.HttpClient"/> suitable for submitting requests to the
            <see cref="P:Neon.Xunit.Cadence.CadenceFixture.HttpClient"/> instance web server.
            </summary>
        </member>
        <member name="P:Neon.Xunit.Cadence.CadenceFixture.ProxyClient">
            <summary>
            <para>
            Returns a <see cref="T:System.Net.Http.HttpClient"/> suitable for submitting requests to the
            associated <b>cadence-proxy</b> process.
            </para>
            <note>
            This will return <c>null</c> if the <b>cadence-proxy</b> process was disabled by
            the settings.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Xunit.Cadence.CadenceFixture.Restart">
            <summary>
            Closes the existing Cadence connection and restarts the Cadence
            server and then establishes a new connection.
            </summary>
        </member>
        <member name="M:Neon.Xunit.Cadence.CadenceFixture.Reset">
            <summary>
            This method completely resets the fixture by removing the Cadence 
            container from Docker.  Use <see cref="M:Neon.Xunit.ContainerFixture.Restart"/> 
            if you just want to restart a fresh Cadence instance.
            </summary>
        </member>
        <member name="M:Neon.Xunit.Cadence.CadenceFixture.OnRestart">
            <summary>
            Called when an already started fixture is being restarted.  This 
            establishes a fresh Cadence connection.
            </summary>
        </member>
        <member name="T:Neon.Xunit.Cadence.NamespaceDoc">
            <summary>
            This namespace includes the Cadence workflow Xunit test fixture.
            </summary>
        </member>
    </members>
</doc>
