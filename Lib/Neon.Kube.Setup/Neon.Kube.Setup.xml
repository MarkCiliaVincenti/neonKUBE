<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.Kube.Setup</name>
    </assembly>
    <members>
        <member name="T:Neon.Kube.KubeSetup">
            <summary>
            Implements cluster setup operations.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeSetup.CalculateResourceRequirements(Neon.Kube.ISetupController)">
            <summary>
            <para>
            Executed very early during cluster setup to determine service/pod requests and
            limits as a <see cref="T:Neon.Kube.KubeClusterAdvice"/> instance that will then be made
            available to the subquent setup steps as the <see cref="F:Neon.Kube.KubeSetupProperty.ClusterAdvice"/>
            property value.
            </para>
            <para>
            This gives cluster setup a chance to holistically examine the services as well as the
            resources available to the entire cluster to configure these values.
            </para>
            </summary>
            <param name="controller">The setup controller.</param>
        </member>
        <member name="T:Neon.Kube.KubeSetup.RemoteFile">
            <summary>
            Holds information about a remote file we'll need to download.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeSetup.RemoteFile.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="path">The file path.</param>
            <param name="permissions">Optional file permissions.</param>
            <param name="owner">Optional file owner.</param>
        </member>
        <member name="P:Neon.Kube.KubeSetup.RemoteFile.Path">
            <summary>
            Returns the file path.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetup.RemoteFile.Permissions">
            <summary>
            Returns the file permissions.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetup.RemoteFile.Owner">
            <summary>
            Returns the file owner formatted as: USER:GROUP.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeSetup.GetK8sClient(Neon.Kube.ISetupController)">
            <summary>
            Returns the <see cref="T:k8s.Kubernetes"/> client persisted in the dictionary passed.
            </summary>
            <param name="controller">The setup controller.</param>
            <returns>The <see cref="T:k8s.Kubernetes"/> client.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown when there is no persisted client, indicating that <see cref="M:Neon.Kube.KubeSetup.ConnectCluster(Neon.Kube.ISetupController)"/>
            has not been called yet.
            </exception>
        </member>
        <member name="M:Neon.Kube.KubeSetup.GetLabelValue(System.Object)">
            <summary>
            Renders a Kubernetes label value in a format suitable for labeling a node.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeSetup.GetTaintsAsync(Neon.Kube.ISetupController,System.String,System.String)">
            <summary>
            Gets a list of taints that are currently applied to all nodes matching the given node label/value pair.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="labelKey">The target nodes label key.</param>
            <param name="labelValue">The target nodes label value.</param>
            <returns>The taint list.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.InstallWorkstationBinariesAsync(Neon.Kube.ISetupController)">
            <summary>
            Downloads and installs any required binaries to the workstation cache if they're not already present.
            </summary>
            <param name="controller">The setup controller.</param>
        </member>
        <member name="M:Neon.Kube.KubeSetup.ConnectCluster(Neon.Kube.ISetupController)">
            <summary>
            <para>
            Connects to a Kubernetes cluster if it already exists.  This sets the <see cref="F:Neon.Kube.KubeSetupProperty.K8sClient"/>
            property in the setup controller state when Kubernetes is running and a connection has not already 
            been established.
            </para>
            <note>
            The <see cref="F:Neon.Kube.KubeSetupProperty.K8sClient"/> will not be set when Kubernetes has not been started, so 
            <see cref="M:Neon.Collections.ObjectDictionary.Get``1(System.String)"/> calls for this property will fail when the
            cluster has not been connected yet, which will be useful for debugging setup steps that require
            a connection but this hasn't happened yet.
            </note>
            </summary>
            <param name="controller">The setup controller.</param>
        </member>
        <member name="M:Neon.Kube.KubeSetup.SetupEtcdHaProxy(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Configures a local HAProxy container that makes the Kubernetes Etc
            cluster highly available.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="node">The node where the operation will be performed.</param>
        </member>
        <member name="M:Neon.Kube.KubeSetup.LabelNodesAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Adds the Kubernetes node labels.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The first master node where the operation will be performed.</param>
        </member>
        <member name="M:Neon.Kube.KubeSetup.SetupClusterAsync(Neon.Kube.ISetupController,System.Int32)">
            <summary>
            Initializes the cluster on the first manager, then joins the remaining
            masters and workers to the cluster.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="maxParallel">
            The maximum number of operations on separate nodes to be performed in parallel.
            This defaults to <see cref="F:Neon.Kube.KubeSetup.defaultMaxParallelNodes"/>.
            </param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.ConfigureKubernetes(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Basic Kubernetes cluster initialization.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
        </member>
        <member name="M:Neon.Kube.KubeSetup.ConfigureWorkstation(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Configures the local workstation.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="firstMaster">The master node where the operation will be performed.</param>
        </member>
        <member name="M:Neon.Kube.KubeSetup.InstallCalicoCniAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Installs the Calico CNI.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
        </member>
        <member name="M:Neon.Kube.KubeSetup.ConfigureMasterTaintsAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Configures pods to be schedule on masters when enabled.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
        </member>
        <member name="M:Neon.Kube.KubeSetup.InstallMetricsServerAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Installs the Kubernetes Metrics Server service.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
        </member>
        <member name="M:Neon.Kube.KubeSetup.InstallIstioAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Installs Istio.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
        </member>
        <member name="M:Neon.Kube.KubeSetup.CreateRootUserAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Configures the root Kubernetes user.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
        </member>
        <member name="M:Neon.Kube.KubeSetup.InstallKubeDashboardAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Configures the root Kubernetes user.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
        </member>
        <member name="M:Neon.Kube.KubeSetup.TaintNodesAsync(Neon.Kube.ISetupController)">
            <summary>
            Adds the node taints.
            </summary>
            <param name="controller">The setup controller.</param>
        </member>
        <member name="M:Neon.Kube.KubeSetup.InstallKialiAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Deploy Kiali.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
        </member>
        <member name="M:Neon.Kube.KubeSetup.KubeSetupAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Some initial kubernetes configuration.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.InstallOpenEBSAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Installs OpenEBS.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.CreateNamespaceAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition},System.String,System.Boolean)">
            <summary>
            Creates a Kubernetes namespace.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
            <param name="name">The new Namespace name.</param>
            <param name="istioInjectionEnabled">Whether Istio sidecar injection should be enabled.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.CreateHostPathStorageClass(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition},System.String)">
            <summary>
            Creates a Kubernetes Storage Class.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
            <param name="name">The new <see cref="T:k8s.Models.V1StorageClass"/> name.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.CreateCstorStorageClass(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition},System.String,System.String,System.Int32)">
            <summary>
            Creates an OpenEBS cStor Kubernetes Storage Class.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
            <param name="name">The new <see cref="T:k8s.Models.V1StorageClass"/> name.</param>
            <param name="cstorPoolCluster">Specifies the cStor pool name.</param>
            <param name="replicaCount">Specifies the data replication factor.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.InstallEtcdAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Installs an Etcd cluster to the monitoring namespace.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.InstallPrometheusAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Installs a Prometheus Operator to the monitoring namespace.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.WaitForPrometheusAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Waits for Prometheus to be fully ready.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.InstallCortexAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Installs Cortex to the monitoring namespace.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.InstallLokiAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Installs Loki to the monitoring namespace.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.InstallPromtailAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Installs Promtail to the monitoring namespace.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.InstallGrafanaAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Installs Grafana to the monitoring namespace.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.InstallMinioAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Installs a Minio cluster to the monitoring namespace.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.SetupMonitoringAsync(Neon.Kube.ISetupController)">
            <summary>
            Installs an Neon Monitoring to the monitoring namespace.
            </summary>
            <param name="controller">The setup controller.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.InstallJaegerAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Installs Jaeger
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
            <remarks>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</remarks>
        </member>
        <member name="M:Neon.Kube.KubeSetup.InstallContainerRegistryAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Installs a harbor container registry and required components.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.InstallClusterOperatorAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Installs the Neon Cluster Operator.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.CreateNamespacesAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Creates required namespaces.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.InstallSystemDbAsync(Neon.Kube.ISetupController,Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Installs a Citus-postgres database used by neon-system services.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="master">The master node where the operation will be performed.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.WaitForDeploymentAsync(Neon.Kube.ISetupController,System.String,System.String,System.String,System.String)">
            <summary>
            Waits for a service deployment to complete.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="namespace">The namespace.</param>
            <param name="name">The deployment name.</param>
            <param name="labelSelector">The optional label selector.</param>
            <param name="fieldSelector">The optional field selector.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.WaitForStatefulSetAsync(Neon.Kube.ISetupController,System.String,System.String,System.String,System.String)">
            <summary>
            Waits for a stateful set deployment to complete.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="namespace">The namespace.</param>
            <param name="name">The deployment name.</param>
            <param name="labelSelector">The optional label selector.</param>
            <param name="fieldSelector">The optional field selector.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.WaitForDaemonsetAsync(Neon.Kube.ISetupController,System.String,System.String,System.String,System.String)">
            <summary>
            Waits for a daemon set deployment to complete.
            </summary>
            <param name="controller">The setup controller.</param>
            <param name="namespace">The namespace.</param>
            <param name="name">The deployment name.</param>
            <param name="labelSelector">The optional label selector.</param>
            <param name="fieldSelector">The optional field selector.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.ToSiString(System.Nullable{System.Decimal})">
            <summary>
            Returns the string value for byte units.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.ToSiString(System.Nullable{System.Double})">
            <summary>
            Returns the string value for byte units.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.GetWsl2ClusterDefintion">
            <summary>
            Returns the built-in cluster definition (as text) for a cluster provisioned on WSL2.
            </summary>
            <returns>The cluster definition text.</returns>
        </member>
        <member name="M:Neon.Kube.KubeSetup.CreateClusterPrepareController(Neon.Kube.ClusterDefinition,System.Int32,System.Collections.Generic.IEnumerable{System.Net.IPEndPoint},System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Constructs the <see cref="T:Neon.Kube.ISetupController"/> to be used for preparing a cluster.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <param name="maxParallel">
            Optionally specifies the maximum number of node operations to be performed in parallel.
            This <b>defaults to 500</b> which is effectively infinite.
            </param>
            <param name="packageCacheEndpoints">
            <para>
            Optionally specifies the IP endpoints for the APT package caches to be used by
            the cluster, overriding the cluster definition settings.  This is useful when
            package caches are already deployed in an environment.
            </para>
            <note>
            Package cache servers are deployed to the masters by default.
            </note>
            </param>
            <param name="unredacted">
            Optionally indicates that sensitive information <b>won't be redacted</b> from the setup logs 
            (typically used when debugging).
            </param>
            <param name="debugMode">Optionally indicates that the cluster will be prepared in debug mode.</param>
            <param name="baseImageName">Optionally specifies the base image name to use for debug mode.</param>
            <param name="automate">
            Optionally specifies that the operation is to be performed in <b>automation mode</b>, where the
            current neonDESKTOP state will not be impacted.
            </param>
            <returns>The <see cref="T:Neon.Kube.ISetupController"/>.</returns>
            <exception cref="T:Neon.Kube.KubeException">Thrown when there's a problem.</exception>
        </member>
        <member name="M:Neon.Kube.KubeSetup.CreateClusterRemoveController(Neon.Kube.ClusterLogin,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Constructs the <see cref="T:Neon.Kube.ISetupController"/> to be used for deprovisioning a cluster.
            </summary>
            <param name="clusterLogin">The cluster login.</param>
            <param name="maxParallel">
            Optionally specifies the maximum number of node operations to be performed in parallel.
            This <b>defaults to 500</b> which is effectively infinite.
            </param>
            <param name="unredacted">
            Optionally indicates that sensitive information <b>won't be redacted</b> from the setup logs 
            (typically used when debugging).
            </param>
            <param name="automate">
            Optionally specifies that the operation is to be performed in <b>automation mode</b>, where the
            current neonDESKTOP state will not be impacted.
            </param>
            <returns>The <see cref="T:Neon.Kube.ISetupController"/>.</returns>
            <exception cref="T:Neon.Kube.KubeException">Thrown when there's a problem.</exception>
        </member>
        <member name="M:Neon.Kube.KubeSetup.CreateClusterSetupController(Neon.Kube.ClusterDefinition,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructs the <see cref="T:Neon.Kube.ISetupController"/> to be used for setting up a cluster.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <param name="maxParallel">
            Optionally specifies the maximum number of node operations to be performed in parallel.
            This <b>defaults to 500</b> which is effectively infinite.
            </param>
            <param name="unredacted">
            Optionally indicates that sensitive information <b>won't be redacted</b> from the setup logs 
            (typically used when debugging).
            </param>
            <param name="debugMode">Optionally indicates that the cluster will be prepared in debug mode.</param>
            <param name="uploadCharts">
            <para>
            Optionally specifies that the current Helm charts should be uploaded to replace the charts in the base image.
            </para>
            <note>
            This will be treated as <c>true</c> when <paramref name="debugMode"/> is passed as <c>true</c>.
            </note>
            </param>
            <param name="automate">
            Optionally specifies that the operation is to be performed in <b>automation mode</b>, where the
            current neonDESKTOP state will not be impacted.
            </param>
            <returns>The <see cref="T:Neon.Kube.ISetupController"/>.</returns>
            <exception cref="T:Neon.Kube.KubeException">Thrown when there's a problem.</exception>
        </member>
    </members>
</doc>
