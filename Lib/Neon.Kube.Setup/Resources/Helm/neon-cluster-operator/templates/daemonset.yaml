apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: neon-cluster-operator
  name: neon-cluster-operator
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  selector:
    matchLabels:
      app: neon-cluster-operator
  template:
    metadata:
      labels:
        app: neon-cluster-operator
        kubectl.kubernetes.io/default-container: neon-cluster-operator
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/"
        prometheus.io/port: "9762"
        sidecar.istio.io/inject: '{{ .Values.serviceMesh.enabled }}'
    spec:
      nodeSelector: 
        neonkube.io/node.role: master
      serviceAccountName: neon-cluster-operator
      tolerations:
      - operator: Exists
      priorityClassName: {{ .Values.priorityClassName }}
      containers:
      - name: neon-cluster-operator
        env:
        - name: LOG_LEVEL
          value: {{ .Values.logLevel }}
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: WATCHER_MAX_RETRY_INTERVAL
          value: 15s
        - name: CLUSTEROPERATOR_IDLE_INTERVAL
          value: 60s
        - name: CLUSTEROPERATOR_ERROR_MIN_REQUEUE_INTERVAL
          value: 15s
        - name: CLUSTEROPERATOR_ERROR_MAX_REQUEUE_INTERVAL
          value: 60s
        envFrom:
        - configMapRef:
            name: neon-cluster-operator-webhook
        image: {{ .Values.image.organization }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        startupProbe:
          exec:
            command:
            - /health-check
          initialDelaySeconds: 5
          failureThreshold: 120
          periodSeconds: 1
          timeoutSeconds: 1
        livenessProbe:
          exec:
            command:
            - /health-check
          periodSeconds: 5
          timeoutSeconds: 1
        readinessProbe:
          exec:
            command:
            - /ready-check
          periodSeconds: 5
          timeoutSeconds: 1
        ports:
        - name: http
          containerPort: 5000
        - name: http-metrics
          containerPort: 9762
          protocol: TCP
        resources:
          limits:
            cpu: {{ .Values.resource.limits.cpu }}
            memory: {{ .Values.resource.limits.memory }}
          requests:
            cpu: {{ .Values.resource.requests.cpu }}
            memory: {{ .Values.resource.requests.memory }}
      terminationGracePeriodSeconds: 10
