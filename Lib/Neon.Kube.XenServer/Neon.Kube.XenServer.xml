<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.Kube.XenServer</name>
    </assembly>
    <members>
        <member name="T:Neon.Kube.XenServerHostingManager">
            <summary>
            Manages cluster provisioning on the XenServer hypervisor.
            </summary>
        </member>
        <member name="T:Neon.Kube.XenServerHostingManager.DiskTemplateInfo">
            <summary>
            Used to persist information about downloaded XVA template files.
            </summary>
        </member>
        <member name="P:Neon.Kube.XenServerHostingManager.DiskTemplateInfo.ETag">
            <summary>
            The downloaded file ETAG.
            </summary>
        </member>
        <member name="P:Neon.Kube.XenServerHostingManager.DiskTemplateInfo.Length">
            <summary>
            The downloaded file length used as a quick verification that
            the complete file was downloaded.
            </summary>
        </member>
        <member name="M:Neon.Kube.XenServerHostingManager.Load">
            <summary>
            Ensures that the assembly hosting this hosting manager is loaded.
            </summary>
        </member>
        <member name="M:Neon.Kube.XenServerHostingManager.#ctor">
            <summary>
            Creates an instance that is only capable of validating the hosting
            related options in the cluster definition.
            </summary>
        </member>
        <member name="M:Neon.Kube.XenServerHostingManager.#ctor(Neon.Kube.ClusterProxy,System.String)">
            <summary>
            Creates an instance that is capable of provisioning a cluster on XenServer/XCP-ng servers.
            </summary>
            <param name="cluster">The cluster being managed.</param>
            <param name="logFolder">
            The folder where log files are to be written, otherwise or <c>null</c> or 
            empty if logging is disabled.
            </param>
        </member>
        <member name="M:Neon.Kube.XenServerHostingManager.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Kube.XenServerHostingManager.HostingEnvironment">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Kube.XenServerHostingManager.RequiresNodeAddressCheck">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.XenServerHostingManager.Validate(Neon.Kube.ClusterDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.XenServerHostingManager.AddProvisioningSteps(Neon.Kube.SetupController{Neon.Kube.NodeDefinition})">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.XenServerHostingManager.AddPostProvisioningSteps(Neon.Kube.SetupController{Neon.Kube.NodeDefinition})">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.XenServerHostingManager.AddDeprovisoningSteps(Neon.Kube.SetupController{Neon.Kube.NodeDefinition})">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.XenServerHostingManager.GetHostedNodes(Neon.XenServer.XenClient)">
            <summary>
            Returns the list of <see cref="T:Neon.Kube.NodeDefinition"/> instances describing which cluster
            nodes are to be hosted by a specific XenServer.
            </summary>
            <param name="xenHost">The target XenServer.</param>
            <returns>The list of nodes to be hosted on the XenServer.</returns>
        </member>
        <member name="M:Neon.Kube.XenServerHostingManager.GetVmName(Neon.Kube.NodeSshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Returns the name to use when naming the virtual machine hosting the node.
            </summary>
            <param name="node">The target node.</param>
            <returns>The virtual machine name.</returns>
        </member>
        <member name="M:Neon.Kube.XenServerHostingManager.VerifyReady(Neon.Kube.NodeSshProxy{Neon.XenServer.XenClient})">
            <summary>
            Verify that the XenServer is ready to provision the cluster virtual machines.
            </summary>
            <param name="xenSshProxy">The XenServer SSH proxy.</param>
        </member>
        <member name="M:Neon.Kube.XenServerHostingManager.CheckVmTemplate(Neon.Kube.NodeSshProxy{Neon.XenServer.XenClient})">
            <summary>
            Install the virtual machine template on the XenServer if it's not already present.
            </summary>
            <param name="xenSshProxy">The XenServer SSH proxy.</param>
        </member>
        <member name="M:Neon.Kube.XenServerHostingManager.FormatVmStatus(System.String,System.String)">
            <summary>
            Formats a nice node status message.
            </summary>
            <param name="vmName">The name of the virtual machine used to host the cluster node.</param>
            <param name="message">The status message.</param>
            <returns>The formatted status message.</returns>
        </member>
        <member name="M:Neon.Kube.XenServerHostingManager.ProvisionVM(Neon.Kube.NodeSshProxy{Neon.XenServer.XenClient})">
            <summary>
            Provision the virtual machines on the XenServer.
            </summary>
            <param name="xenSshProxy">The XenServer SSH proxy.</param>
        </member>
        <member name="M:Neon.Kube.XenServerHostingManager.GetSshEndpoint(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.XenServerHostingManager.GetDataDisk(Neon.SSH.LinuxSshProxy)">
            <inheritdoc/>
        </member>
    </members>
</doc>
