@page "/"

<PageTitle>Index</PageTitle>

<HeadlessButton OnClick="(async () => await headlessDialog.Open())"
                Type="button"
                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
    Open Dialog
</HeadlessButton>
<br />
<br />
<HeadlessSwitchGroup>
    @{ var checkedCssClass = isChecked ? "bg-indigo-600" : "bg-indigo-200"; }
    <HeadlessSwitch @bind-Checked="isChecked" class="@( $"{checkedCssClass} relative inline-flex h-[38px] w-[74px] shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus-visible:ring-2  focus-visible:ring-white focus-visible:ring-opacity-75" )">
        <span class="sr-only">Use setting</span>
        <span
          aria-hidden="true"
              class="@(isChecked ? "translate-x-9" : "translate-x-0") pointer-events-none inline-block h-[34px] w-[34px] transform rounded-full bg-white shadow-lg ring-0 transition duration-200 ease-in-out" />
    </HeadlessSwitch>
</HeadlessSwitchGroup>
<br />
<br />
<Menu></Menu>
<br />
<br />
<PortalContent PortalName="modal-root">
  <HeadlessDialog 
    class="fixed inset-0 bg-white-500 bg-opacity-75 transition-opacity"
    Show="false"
    Enter="ease-out"
    EnterDuration="300"
    EnterFrom="opacity-0"
    EnterTo="opacity-100"
    Leave="ease-in"
    LeaveDuration="200"
    LeaveFrom="opacity-100"
    LeaveTo="opacity-0"
    @ref="headlessDialog">
    <div class="fixed inset-0 overflow-y-auto">
              <div class="flex items-end sm:items-center justify-center min-h-full p-4 text-center sm:p-0">
    <HeadlessDialogPanel
        Enter="ease-out duration-300"
        EnterDuration="300"
        EnterFrom="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        EnterTo="opacity-100 translate-y-0 sm:scale-100"
        Leave="ease-in duration-200"
        LeaveDuration="200"
        LeaveFrom="opacity-100 translate-y-0 sm:scale-100"
        LeaveTo="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        Context="dialogPanel"
        @ref="@headlessDialogPanel"
        class="relative bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:max-w-sm sm:w-full sm:p-6">
                      <div>
                          <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100">
                              <!-- Heroicon name: outline/check -->
                              <svg class="h-6 w-6 text-green-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">
                                  <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" />
                              </svg>
                          </div>
                          <div class="mt-3 text-center sm:mt-5">
                              <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">Payment successful</h3>
                              <div class="mt-2">
                                  <p class="text-sm text-white-500">Lorem ipsum dolor sit amet consectetur adipisicing elit. Consequatur amet labore.</p>
                              </div>
                          </div>
                      </div>
                      
                    <HeadlessButton OnClick="(async () => await headlessDialog.Close())"
                                    Type="button"
                                    class="inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:text-sm">
                        Go back to dashboard
                    </HeadlessButton>
    </HeadlessDialogPanel>
    </div>
    </div>
  </HeadlessDialog>
</PortalContent>

@code{
    HeadlessDialog headlessDialog;
    HeadlessDialogPanel headlessDialogPanel;

    private Transition transition;
    private bool isOpen = true;
    private bool isChecked;



    private Person selectedPerson;

    private List<Person> people = new()
    {
        new() { Id = 1, Name = "Durward Reynolds" },
        new() { Id = 2, Name = "Kenton Towne", Enabled = false },
        new() { Id = 3, Name = "Therese Wunsch" },
        new() { Id = 4, Name = "Benedict Kegler" },
        new() { Id = 5, Name = "Katelyn Rohan" }
    };

    private void TestClick()
    {
        var x = "stopHere";
    }

    private record Person
    {
        public int Id { get; init; }
        public string Name { get; init; }
        public bool Enabled { get; init; } = true;
    }

    private string BuildMenuItemCssClass(HeadlessMenuItem item)
    {
        var cssClass = "";
        if (item.IsActive)
            cssClass = "bg-gray-100 text-gray-900 ";
        else
            cssClass = "text-gray-700 ";

        return cssClass + "flex justify-between w-full px-4 py-2 text-sm leading-5 text-left";
    }
}