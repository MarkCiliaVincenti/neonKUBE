<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>net7.0</TargetFramework>
		<OutputType>Exe</OutputType>
		<IsPackable>false</IsPackable>
		<RootNamespace>NeonClusterOperator</RootNamespace>
		<ServerGarbageCollection>true</ServerGarbageCollection>
		<ConcurrentGarbageCollection>true</ConcurrentGarbageCollection>
		<AssemblyName>neon-cluster-operator</AssemblyName>
		<Configurations>Debug;Release</Configurations>
	</PropertyGroup>

	<ItemGroup>
		<Compile Include="$(SolutionDir)\Lib\Neon.Kube.BuildInfo\AssemblyAttributes.cs" Link="Properties\AssemblyAttributes.cs" />
		<Compile Include="$(SolutionDir)\Lib\Neon.Kube.BuildInfo\AssemblyInfo.cs" Link="Properties\AssemblyInfo.cs" />
	</ItemGroup>

	<PropertyGroup>
		<!-- Write generated installation YAML to an git-ignored folder -->
		<KubeOpsConfigRoot>config.gitignore</KubeOpsConfigRoot>
		<KubeOpsSkipDockerfile>true</KubeOpsSkipDockerfile>
	</PropertyGroup>

    <ItemGroup>
        <Protobuf Include="Protos/**/*.proto" OutputDir="$(ProjectDir)" GrpcServices="Client" />
    </ItemGroup>

	<ItemGroup>
		<EmbeddedResource Include="Resources\cluster-manifest.json" />
	</ItemGroup>

	<ItemGroup>
        <PackageReference Include="DnsClient" Version="1.6.1" />
		<PackageReference Include="Google.Protobuf" Version="3.21.7" />
		<PackageReference Include="Grpc.Net.Client" Version="2.49.0" />
		<PackageReference Include="Grpc.Tools" Version="2.49.1">
		  <PrivateAssets>all</PrivateAssets>
		  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
        <PackageReference Include="JsonDiffPatch" Version="2.0.55" />
		<PackageReference Include="Minio" Version="4.0.6" />
		<PackageReference Include="NSwag.MSBuild" Version="13.18.0">
		  <PrivateAssets>all</PrivateAssets>
		  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
		<PackageReference Include="OpenTelemetry" Version="1.4.0-beta.1" />
		<PackageReference Include="OpenTelemetry.Instrumentation.GrpcCore" Version="1.0.0-beta.5" />
		<PackageReference Include="OpenTelemetry.Instrumentation.Quartz" Version="1.0.0-alpha.1" />
		<PackageReference Include="Npgsql.OpenTelemetry" Version="6.0.7" />
		<PackageReference Include="Microsoft.AspNetCore.JsonPatch" Version="6.0.9" />
		<PackageReference Include="Quartz" Version="3.5.0" />
		<PackageReference Include="Neon.Common" Version="10000.0.2621-dev-master" />
        <PackageReference Include="Neon.Service" Version="10000.0.2621-dev-master" />
    </ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\..\Lib\Neon.Kube.BuildInfo\Neon.Kube.BuildInfo.csproj" />
		<ProjectReference Include="..\..\Lib\Neon.Kube.Operator\Neon.Kube.Operator.csproj" />
		<ProjectReference Include="..\..\Lib\Neon.Kube.Resources\Neon.Kube.Resources.csproj" />
		<ProjectReference Include="..\..\Lib\Neon.Kube\Neon.Kube.csproj" />
	</ItemGroup>

	<ItemGroup>
		<Folder Include="config.gitignore\" />
	</ItemGroup>

	<!--
	The [ClusterManifest] build target executes a [neon-build download-const-uri] command to
	download the cluster manifest JSON file for the current cluster version.  The manifest
	will be generated during image builds in neonCLOUD and uploaded to S3.
  
	The [neon-build download-const-uri] obtains the URI for the manifest from:
  
		assembly:   Neon.Kube.dll
		constant:   Neon.Kube.NeonDownloads.NeonClusterManifestUri
  
	We'll be loading the [Neon.Kube.dll] assembly from that project's folder using the same
	build configuration and target runtime as this project.  This is a bit fragile.
  
	Note that the [neon-build download-const-uri] doesn't fail if it couldn't download the
	file so that developers will be able to work offline.  We'll just build with the existing
	manifest file which is checked into git and won't change very often.
	-->

	<Target Name="ClusterManifest" BeforeTargets="CoreCompile">
		<Exec Command="neon-build download-const-uri &quot;%NK_ROOT%\Lib\Neon.Kube\bin\$(Configuration)\net7.0\Neon.Kube.dll&quot; Neon.Kube.KubeDownloads NeonClusterManifestUri &quot;$(ProjectDir)Resources\cluster-manifest.json" />
	</Target>

	<!--  CRD generation settings. -->
	
	<PropertyGroup>
		<KubeOpsConfigRoot>config.gitignore</KubeOpsConfigRoot>
		<KubeOpsSkipDockerfile>true</KubeOpsSkipDockerfile>
	</PropertyGroup>

	<!-- 
    The KubeOps config file generator doesn't rebuild the files when the config output
    directory already exists.  We're going to delete this folder to ensure that these
    files are always regenerated.
    -->

	<!--<Target Name="RemoveConfig" BeforeTargets="BeforeBuild">
		<Message Importance="high" Text="Purge CRDs from: $(ProjectDir)config.gitignore" />
		<Exec Command="neon-build rmdir &quot;$(ProjectDir)config.gitignore&quot;" />
	</Target>-->

	<!--
    This target publishes all generated CRDs to [$/Lib/Neon.Kube.Setup/Resources/Helm/neon-cluster-operator/crds/*].
  
    NOTE: This does not copy any other deployment related files to [$/Lib/Neon.Kube.Setup].  We'll edit deployment,
  	      RBAC and other files in place there, like we do for all other charts.
  
    NOTE: [GenerateAfterBuild] is the KubeOps build target that generates the CRDs and other Kubernetes manifest 
          and kustomization files.
    -->

	<Target Name="PublishCRDs" AfterTargets="GenerateAfterBuild">
		<Message Importance="high" Text="Publish CRDs to: Neon.Kube.Setup" />
		<Exec Command="neon-build rm &quot;$(SolutionDir)Lib\Neon.Kube.Setup\Resources\Helm\$(MSBuildProjectName)\crds\*&quot;" />
		<Exec Command="neon-build publish-files &quot;$(ProjectDir)config.gitignore\crds\*&quot; &quot;$(NK_ROOT)\Lib\Neon.Kube.Setup\Resources\Helm\$(MSBuildProjectName)\crds&quot; --exclude-kustomize" />
	</Target>
    
    <Target Name="NSwag" AfterTargets="BeforeBuild">
        <Exec Command="$(NSwagExe) openapi2csclient /classname:HarborClient /namespace:NeonClusterOperator.Harbor /input:../../Lib/Neon.Kube/Harbor/swagger.json /output:HarborClient.mg.cs" />
    </Target>

</Project>
